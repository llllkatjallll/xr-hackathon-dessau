import{a2 as s,d as Y}from"./three@0.169.5.js";import{M as H}from"./MeshBVH.f9f8c76a.js";class z{constructor(d){this.name="WorkerBase",this.running=!1,this.worker=d,this.worker.onerror=l=>{throw l.message?new Error(`${this.name}: Could not create Web Worker with error "${l.message}"`):new Error(`${this.name}: Could not create Web Worker.`)}}runTask(){}generate(...d){if(this.running)throw new Error("GenerateMeshBVHWorker: Already running job.");if(this.worker===null)throw new Error("GenerateMeshBVHWorker: Worker has been disposed.");this.running=!0;const l=this.runTask(this.worker,...d);return l.finally(()=>{this.running=!1}),l}dispose(){this.worker.terminate(),this.worker=null}}const h="(function(){"use strict";var An=typeof document<"u"?document.currentScript:null;/**
 * @license
 * Copyright 2010-2024 Three.js Authors
 * SPDX-License-Identifier: MIT
 */const Xe="169",Vi=0,Ui=1,Eo=2,Mn=0,ki=300,Co=301,Fo=302,Hi=1e3,_s=1001,qi=1002,zs=1003,$i=1006,Gi=1008,Ro=1009,Bo=1013,Wi=1014,Io=1015,vo=1016,Po=1020,Lo=1023,Sn=1026,Xi=1027,Yi=0,Oo=1,bs="",$t="srgb",Es="srgb-linear",Do="display-p3",Zi="display-p3-linear",_n="linear",Ji="srgb",ji="rec709",Qi="p3",Cs=35044,Ye=2e3,zn=2001;class Ze{addEventListener(t,e){this._listeners===void 0&&(this._listeners={});const s=this._listeners;s[t]===void 0&&(s[t]=[]),s[t].indexOf(e)===-1&&s[t].push(e)}hasEventListener(t,e){if(this._listeners===void 0)return!1;const s=this._listeners;return s[t]!==void 0&&s[t].indexOf(e)!==-1}removeEventListener(t,e){if(this._listeners===void 0)return;const n=this._listeners[t];if(n!==void 0){const i=n.indexOf(e);i!==-1&&n.splice(i,1)}}dispatchEvent(t){if(this._listeners===void 0)return;const s=this._listeners[t.type];if(s!==void 0){t.target=this;const n=s.slice(0);for(let i=0,o=n.length;i<o;i++)n[i].call(this,t);t.target=null}}}const ot=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"];let Ki=1234567;const tr=Math.PI/180,er=180/Math.PI;function Kt(){const r=Math.random()*4294967295|0,t=Math.random()*4294967295|0,e=Math.random()*4294967295|0,s=Math.random()*4294967295|0;return(ot[r&255]+ot[r>>8&255]+ot[r>>16&255]+ot[r>>24&255]+"-"+ot[t&255]+ot[t>>8&255]+"-"+ot[t>>16&15|64]+ot[t>>24&255]+"-"+ot[e&63|128]+ot[e>>8&255]+"-"+ot[e>>16&255]+ot[e>>24&255]+ot[s&255]+ot[s>>8&255]+ot[s>>16&255]+ot[s>>24&255]).toLowerCase()}function at(r,t,e){return Math.max(t,Math.min(e,r))}function bn(r,t){return(r%t+t)%t}function Vo(r,t,e,s,n){return s+(r-t)*(n-s)/(e-t)}function Uo(r,t,e){return r!==t?(e-r)/(t-r):0}function Je(r,t,e){return(1-e)*r+e*t}function ko(r,t,e,s){return Je(r,t,1-Math.exp(-e*s))}function Ho(r,t=1){return t-Math.abs(bn(r,t*2)-t)}function qo(r,t,e){return r<=t?0:r>=e?1:(r=(r-t)/(e-t),r*r*(3-2*r))}function $o(r,t,e){return r<=t?0:r>=e?1:(r=(r-t)/(e-t),r*r*r*(r*(r*6-15)+10))}function Go(r,t){return r+Math.floor(Math.random()*(t-r+1))}function Wo(r,t){return r+Math.random()*(t-r)}function Xo(r){return r*(.5-Math.random())}function Yo(r){r!==void 0&&(Ki=r);let t=Ki+=1831565813;return t=Math.imul(t^t>>>15,t|1),t^=t+Math.imul(t^t>>>7,t|61),((t^t>>>14)>>>0)/4294967296}function Zo(r){return r*tr}function Jo(r){return r*er}function jo(r){return(r&r-1)===0&&r!==0}function Qo(r){return Math.pow(2,Math.ceil(Math.log(r)/Math.LN2))}function Ko(r){return Math.pow(2,Math.floor(Math.log(r)/Math.LN2))}function ta(r,t,e,s,n){const i=Math.cos,o=Math.sin,a=i(e/2),c=o(e/2),u=i((t+s)/2),h=o((t+s)/2),l=i((t-s)/2),d=o((t-s)/2),f=i((s-t)/2),p=o((s-t)/2);switch(n){case"XYX":r.set(a*h,c*l,c*d,a*u);break;case"YZY":r.set(c*d,a*h,c*l,a*u);break;case"ZXZ":r.set(c*l,c*d,a*h,a*u);break;case"XZX":r.set(a*h,c*p,c*f,a*u);break;case"YXY":r.set(c*f,a*h,c*p,a*u);break;case"ZYZ":r.set(c*p,c*f,a*h,a*u);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+n)}}function Et(r,t){switch(t.constructor){case Float32Array:return r;case Uint32Array:return r/4294967295;case Uint16Array:return r/65535;case Uint8Array:return r/255;case Int32Array:return Math.max(r/2147483647,-1);case Int16Array:return Math.max(r/32767,-1);case Int8Array:return Math.max(r/127,-1);default:throw new Error("Invalid component type.")}}function $(r,t){switch(t.constructor){case Float32Array:return r;case Uint32Array:return Math.round(r*4294967295);case Uint16Array:return Math.round(r*65535);case Uint8Array:return Math.round(r*255);case Int32Array:return Math.round(r*2147483647);case Int16Array:return Math.round(r*32767);case Int8Array:return Math.round(r*127);default:throw new Error("Invalid component type.")}}const ea={DEG2RAD:tr,RAD2DEG:er,generateUUID:Kt,clamp:at,euclideanModulo:bn,mapLinear:Vo,inverseLerp:Uo,lerp:Je,damp:ko,pingpong:Ho,smoothstep:qo,smootherstep:$o,randInt:Go,randFloat:Wo,randFloatSpread:Xo,seededRandom:Yo,degToRad:Zo,radToDeg:Jo,isPowerOfTwo:jo,ceilPowerOfTwo:Qo,floorPowerOfTwo:Ko,setQuaternionFromProperEuler:ta,normalize:$,denormalize:Et};class J{constructor(t=0,e=0){J.prototype.isVector2=!0,this.x=t,this.y=e}get width(){return this.x}set width(t){this.x=t}get height(){return this.y}set height(t){this.y=t}set(t,e){return this.x=t,this.y=e,this}setScalar(t){return this.x=t,this.y=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y)}copy(t){return this.x=t.x,this.y=t.y,this}add(t){return this.x+=t.x,this.y+=t.y,this}addScalar(t){return this.x+=t,this.y+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this}subScalar(t){return this.x-=t,this.y-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this}multiply(t){return this.x*=t.x,this.y*=t.y,this}multiplyScalar(t){return this.x*=t,this.y*=t,this}divide(t){return this.x/=t.x,this.y/=t.y,this}divideScalar(t){return this.multiplyScalar(1/t)}applyMatrix3(t){const e=this.x,s=this.y,n=t.elements;return this.x=n[0]*e+n[3]*s+n[6],this.y=n[1]*e+n[4]*s+n[7],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this}clampLength(t,e){const s=this.length();return this.divideScalar(s||1).multiplyScalar(Math.max(t,Math.min(e,s)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(e===0)return Math.PI/2;const s=this.dot(t)/e;return Math.acos(at(s,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,s=this.y-t.y;return e*e+s*s}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this}lerpVectors(t,e,s){return this.x=t.x+(e.x-t.x)*s,this.y=t.y+(e.y-t.y)*s,this}equals(t){return t.x===this.x&&t.y===this.y}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this}rotateAround(t,e){const s=Math.cos(e),n=Math.sin(e),i=this.x-t.x,o=this.y-t.y;return this.x=i*s-o*n+t.x,this.y=i*n+o*s+t.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}class Ct{constructor(t,e,s,n,i,o,a,c,u){Ct.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1],t!==void 0&&this.set(t,e,s,n,i,o,a,c,u)}set(t,e,s,n,i,o,a,c,u){const h=this.elements;return h[0]=t,h[1]=n,h[2]=a,h[3]=e,h[4]=i,h[5]=c,h[6]=s,h[7]=o,h[8]=u,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(t){const e=this.elements,s=t.elements;return e[0]=s[0],e[1]=s[1],e[2]=s[2],e[3]=s[3],e[4]=s[4],e[5]=s[5],e[6]=s[6],e[7]=s[7],e[8]=s[8],this}extractBasis(t,e,s){return t.setFromMatrix3Column(this,0),e.setFromMatrix3Column(this,1),s.setFromMatrix3Column(this,2),this}setFromMatrix4(t){const e=t.elements;return this.set(e[0],e[4],e[8],e[1],e[5],e[9],e[2],e[6],e[10]),this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const s=t.elements,n=e.elements,i=this.elements,o=s[0],a=s[3],c=s[6],u=s[1],h=s[4],l=s[7],d=s[2],f=s[5],p=s[8],m=n[0],g=n[3],y=n[6],T=n[1],w=n[4],M=n[7],N=n[2],_=n[5],S=n[8];return i[0]=o*m+a*T+c*N,i[3]=o*g+a*w+c*_,i[6]=o*y+a*M+c*S,i[1]=u*m+h*T+l*N,i[4]=u*g+h*w+l*_,i[7]=u*y+h*M+l*S,i[2]=d*m+f*T+p*N,i[5]=d*g+f*w+p*_,i[8]=d*y+f*M+p*S,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[3]*=t,e[6]*=t,e[1]*=t,e[4]*=t,e[7]*=t,e[2]*=t,e[5]*=t,e[8]*=t,this}determinant(){const t=this.elements,e=t[0],s=t[1],n=t[2],i=t[3],o=t[4],a=t[5],c=t[6],u=t[7],h=t[8];return e*o*h-e*a*u-s*i*h+s*a*c+n*i*u-n*o*c}invert(){const t=this.elements,e=t[0],s=t[1],n=t[2],i=t[3],o=t[4],a=t[5],c=t[6],u=t[7],h=t[8],l=h*o-a*u,d=a*c-h*i,f=u*i-o*c,p=e*l+s*d+n*f;if(p===0)return this.set(0,0,0,0,0,0,0,0,0);const m=1/p;return t[0]=l*m,t[1]=(n*u-h*s)*m,t[2]=(a*s-n*o)*m,t[3]=d*m,t[4]=(h*e-n*c)*m,t[5]=(n*i-a*e)*m,t[6]=f*m,t[7]=(s*c-u*e)*m,t[8]=(o*e-s*i)*m,this}transpose(){let t;const e=this.elements;return t=e[1],e[1]=e[3],e[3]=t,t=e[2],e[2]=e[6],e[6]=t,t=e[5],e[5]=e[7],e[7]=t,this}getNormalMatrix(t){return this.setFromMatrix4(t).invert().transpose()}transposeIntoArray(t){const e=this.elements;return t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8],this}setUvTransform(t,e,s,n,i,o,a){const c=Math.cos(i),u=Math.sin(i);return this.set(s*c,s*u,-s*(c*o+u*a)+o+t,-n*u,n*c,-n*(-u*o+c*a)+a+e,0,0,1),this}scale(t,e){return this.premultiply(En.makeScale(t,e)),this}rotate(t){return this.premultiply(En.makeRotation(-t)),this}translate(t,e){return this.premultiply(En.makeTranslation(t,e)),this}makeTranslation(t,e){return t.isVector2?this.set(1,0,t.x,0,1,t.y,0,0,1):this.set(1,0,t,0,1,e,0,0,1),this}makeRotation(t){const e=Math.cos(t),s=Math.sin(t);return this.set(e,-s,0,s,e,0,0,0,1),this}makeScale(t,e){return this.set(t,0,0,0,e,0,0,0,1),this}equals(t){const e=this.elements,s=t.elements;for(let n=0;n<9;n++)if(e[n]!==s[n])return!1;return!0}fromArray(t,e=0){for(let s=0;s<9;s++)this.elements[s]=t[s+e];return this}toArray(t=[],e=0){const s=this.elements;return t[e]=s[0],t[e+1]=s[1],t[e+2]=s[2],t[e+3]=s[3],t[e+4]=s[4],t[e+5]=s[5],t[e+6]=s[6],t[e+7]=s[7],t[e+8]=s[8],t}clone(){return new this.constructor().fromArray(this.elements)}}const En=new Ct;function sa(r){for(let t=r.length-1;t>=0;--t)if(r[t]>=65535)return!0;return!1}function sr(r){return document.createElementNS("http://www.w3.org/1999/xhtml",r)}const nr=new Ct().set(.8224621,.177538,0,.0331941,.9668058,0,.0170827,.0723974,.9105199),ir=new Ct().set(1.2249401,-.2249404,0,-.0420569,1.0420571,0,-.0196376,-.0786361,1.0982735),je={[Es]:{transfer:_n,primaries:ji,luminanceCoefficients:[.2126,.7152,.0722],toReference:r=>r,fromReference:r=>r},[$t]:{transfer:Ji,primaries:ji,luminanceCoefficients:[.2126,.7152,.0722],toReference:r=>r.convertSRGBToLinear(),fromReference:r=>r.convertLinearToSRGB()},[Zi]:{transfer:_n,primaries:Qi,luminanceCoefficients:[.2289,.6917,.0793],toReference:r=>r.applyMatrix3(ir),fromReference:r=>r.applyMatrix3(nr)},[Do]:{transfer:Ji,primaries:Qi,luminanceCoefficients:[.2289,.6917,.0793],toReference:r=>r.convertSRGBToLinear().applyMatrix3(ir),fromReference:r=>r.applyMatrix3(nr).convertLinearToSRGB()}},na=new Set([Es,Zi]),mt={enabled:!0,_workingColorSpace:Es,get workingColorSpace(){return this._workingColorSpace},set workingColorSpace(r){if(!na.has(r))throw new Error(`Unsupported working color space, "${r}".`);this._workingColorSpace=r},convert:function(r,t,e){if(this.enabled===!1||t===e||!t||!e)return r;const s=je[t].toReference,n=je[e].fromReference;return n(s(r))},fromWorkingColorSpace:function(r,t){return this.convert(r,this._workingColorSpace,t)},toWorkingColorSpace:function(r,t){return this.convert(r,t,this._workingColorSpace)},getPrimaries:function(r){return je[r].primaries},getTransfer:function(r){return r===bs?_n:je[r].transfer},getLuminanceCoefficients:function(r,t=this._workingColorSpace){return r.fromArray(je[t].luminanceCoefficients)}};function xe(r){return r<.04045?r*.0773993808:Math.pow(r*.9478672986+.0521327014,2.4)}function Cn(r){return r<.0031308?r*12.92:1.055*Math.pow(r,.41666)-.055}let Te;class ia{static getDataURL(t){if(/^data:/i.test(t.src)||typeof HTMLCanvasElement>"u")return t.src;let e;if(t instanceof HTMLCanvasElement)e=t;else{Te===void 0&&(Te=sr("canvas")),Te.width=t.width,Te.height=t.height;const s=Te.getContext("2d");t instanceof ImageData?s.putImageData(t,0,0):s.drawImage(t,0,0,t.width,t.height),e=Te}return e.width>2048||e.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",t),e.toDataURL("image/jpeg",.6)):e.toDataURL("image/png")}static sRGBToLinear(t){if(typeof HTMLImageElement<"u"&&t instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&t instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&t instanceof ImageBitmap){const e=sr("canvas");e.width=t.width,e.height=t.height;const s=e.getContext("2d");s.drawImage(t,0,0,t.width,t.height);const n=s.getImageData(0,0,t.width,t.height),i=n.data;for(let o=0;o<i.length;o++)i[o]=xe(i[o]/255)*255;return s.putImageData(n,0,0),e}else if(t.data){const e=t.data.slice(0);for(let s=0;s<e.length;s++)e instanceof Uint8Array||e instanceof Uint8ClampedArray?e[s]=Math.floor(xe(e[s]/255)*255):e[s]=xe(e[s]);return{data:e,width:t.width,height:t.height}}else return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),t}}let ra=0;class rr{constructor(t=null){this.isSource=!0,Object.defineProperty(this,"id",{value:ra++}),this.uuid=Kt(),this.data=t,this.dataReady=!0,this.version=0}set needsUpdate(t){t===!0&&this.version++}toJSON(t){const e=t===void 0||typeof t=="string";if(!e&&t.images[this.uuid]!==void 0)return t.images[this.uuid];const s={uuid:this.uuid,url:""},n=this.data;if(n!==null){let i;if(Array.isArray(n)){i=[];for(let o=0,a=n.length;o<a;o++)n[o].isDataTexture?i.push(Fn(n[o].image)):i.push(Fn(n[o]))}else i=Fn(n);s.url=i}return e||(t.images[this.uuid]=s),s}}function Fn(r){return typeof HTMLImageElement<"u"&&r instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&r instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&r instanceof ImageBitmap?ia.getDataURL(r):r.data?{data:Array.from(r.data),width:r.width,height:r.height,type:r.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let oa=0;class Dt extends Ze{constructor(t=Dt.DEFAULT_IMAGE,e=Dt.DEFAULT_MAPPING,s=_s,n=_s,i=$i,o=Gi,a=Lo,c=Ro,u=Dt.DEFAULT_ANISOTROPY,h=bs){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:oa++}),this.uuid=Kt(),this.name="",this.source=new rr(t),this.mipmaps=[],this.mapping=e,this.channel=0,this.wrapS=s,this.wrapT=n,this.magFilter=i,this.minFilter=o,this.anisotropy=u,this.format=a,this.internalFormat=null,this.type=c,this.offset=new J(0,0),this.repeat=new J(1,1),this.center=new J(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new Ct,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.colorSpace=h,this.userData={},this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1,this.pmremVersion=0}get image(){return this.source.data}set image(t=null){this.source.data=t}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return new this.constructor().copy(this)}copy(t){return this.name=t.name,this.source=t.source,this.mipmaps=t.mipmaps.slice(0),this.mapping=t.mapping,this.channel=t.channel,this.wrapS=t.wrapS,this.wrapT=t.wrapT,this.magFilter=t.magFilter,this.minFilter=t.minFilter,this.anisotropy=t.anisotropy,this.format=t.format,this.internalFormat=t.internalFormat,this.type=t.type,this.offset.copy(t.offset),this.repeat.copy(t.repeat),this.center.copy(t.center),this.rotation=t.rotation,this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrix.copy(t.matrix),this.generateMipmaps=t.generateMipmaps,this.premultiplyAlpha=t.premultiplyAlpha,this.flipY=t.flipY,this.unpackAlignment=t.unpackAlignment,this.colorSpace=t.colorSpace,this.userData=JSON.parse(JSON.stringify(t.userData)),this.needsUpdate=!0,this}toJSON(t){const e=t===void 0||typeof t=="string";if(!e&&t.textures[this.uuid]!==void 0)return t.textures[this.uuid];const s={metadata:{version:4.6,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(t).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return Object.keys(this.userData).length>0&&(s.userData=this.userData),e||(t.textures[this.uuid]=s),s}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(t){if(this.mapping!==ki)return t;if(t.applyMatrix3(this.matrix),t.x<0||t.x>1)switch(this.wrapS){case Hi:t.x=t.x-Math.floor(t.x);break;case _s:t.x=t.x<0?0:1;break;case qi:Math.abs(Math.floor(t.x)%2)===1?t.x=Math.ceil(t.x)-t.x:t.x=t.x-Math.floor(t.x);break}if(t.y<0||t.y>1)switch(this.wrapT){case Hi:t.y=t.y-Math.floor(t.y);break;case _s:t.y=t.y<0?0:1;break;case qi:Math.abs(Math.floor(t.y)%2)===1?t.y=Math.ceil(t.y)-t.y:t.y=t.y-Math.floor(t.y);break}return this.flipY&&(t.y=1-t.y),t}set needsUpdate(t){t===!0&&(this.version++,this.source.needsUpdate=!0)}set needsPMREMUpdate(t){t===!0&&this.pmremVersion++}}Dt.DEFAULT_IMAGE=null,Dt.DEFAULT_MAPPING=ki,Dt.DEFAULT_ANISOTROPY=4;class Ft{constructor(t=0,e=0,s=0,n=1){Ft.prototype.isVector4=!0,this.x=t,this.y=e,this.z=s,this.w=n}get width(){return this.z}set width(t){this.z=t}get height(){return this.w}set height(t){this.w=t}set(t,e,s,n){return this.x=t,this.y=e,this.z=s,this.w=n,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this.w=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setW(t){return this.w=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;case 3:this.w=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w!==void 0?t.w:1,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this.w+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this.w=t.w+e.w,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this.w+=t.w*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this.w-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this.w=t.w-e.w,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this.w*=t.w,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this}applyMatrix4(t){const e=this.x,s=this.y,n=this.z,i=this.w,o=t.elements;return this.x=o[0]*e+o[4]*s+o[8]*n+o[12]*i,this.y=o[1]*e+o[5]*s+o[9]*n+o[13]*i,this.z=o[2]*e+o[6]*s+o[10]*n+o[14]*i,this.w=o[3]*e+o[7]*s+o[11]*n+o[15]*i,this}divideScalar(t){return this.multiplyScalar(1/t)}setAxisAngleFromQuaternion(t){this.w=2*Math.acos(t.w);const e=Math.sqrt(1-t.w*t.w);return e<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=t.x/e,this.y=t.y/e,this.z=t.z/e),this}setAxisAngleFromRotationMatrix(t){let e,s,n,i;const c=t.elements,u=c[0],h=c[4],l=c[8],d=c[1],f=c[5],p=c[9],m=c[2],g=c[6],y=c[10];if(Math.abs(h-d)<.01&&Math.abs(l-m)<.01&&Math.abs(p-g)<.01){if(Math.abs(h+d)<.1&&Math.abs(l+m)<.1&&Math.abs(p+g)<.1&&Math.abs(u+f+y-3)<.1)return this.set(1,0,0,0),this;e=Math.PI;const w=(u+1)/2,M=(f+1)/2,N=(y+1)/2,_=(h+d)/4,S=(l+m)/4,E=(p+g)/4;return w>M&&w>N?w<.01?(s=0,n=.707106781,i=.707106781):(s=Math.sqrt(w),n=_/s,i=S/s):M>N?M<.01?(s=.707106781,n=0,i=.707106781):(n=Math.sqrt(M),s=_/n,i=E/n):N<.01?(s=.707106781,n=.707106781,i=0):(i=Math.sqrt(N),s=S/i,n=E/i),this.set(s,n,i,e),this}let T=Math.sqrt((g-p)*(g-p)+(l-m)*(l-m)+(d-h)*(d-h));return Math.abs(T)<.001&&(T=1),this.x=(g-p)/T,this.y=(l-m)/T,this.z=(d-h)/T,this.w=Math.acos((u+f+y-1)/2),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this.w=e[15],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this.w=Math.min(this.w,t.w),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this.w=Math.max(this.w,t.w),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this.w=Math.max(t.w,Math.min(e.w,this.w)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this.w=Math.max(t,Math.min(e,this.w)),this}clampLength(t,e){const s=this.length();return this.divideScalar(s||1).multiplyScalar(Math.max(t,Math.min(e,s)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this.w=Math.trunc(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this.w+=(t.w-this.w)*e,this}lerpVectors(t,e,s){return this.x=t.x+(e.x-t.x)*s,this.y=t.y+(e.y-t.y)*s,this.z=t.z+(e.z-t.z)*s,this.w=t.w+(e.w-t.w)*s,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this.w=t[e+3],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t[e+3]=this.w,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this.w=t.getW(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}class or extends Ze{constructor(t=1,e=1,s={}){super(),this.isRenderTarget=!0,this.width=t,this.height=e,this.depth=1,this.scissor=new Ft(0,0,t,e),this.scissorTest=!1,this.viewport=new Ft(0,0,t,e);const n={width:t,height:e,depth:1};s=Object.assign({generateMipmaps:!1,internalFormat:null,minFilter:$i,depthBuffer:!0,stencilBuffer:!1,resolveDepthBuffer:!0,resolveStencilBuffer:!0,depthTexture:null,samples:0,count:1},s);const i=new Dt(n,s.mapping,s.wrapS,s.wrapT,s.magFilter,s.minFilter,s.format,s.type,s.anisotropy,s.colorSpace);i.flipY=!1,i.generateMipmaps=s.generateMipmaps,i.internalFormat=s.internalFormat,this.textures=[];const o=s.count;for(let a=0;a<o;a++)this.textures[a]=i.clone(),this.textures[a].isRenderTargetTexture=!0;this.depthBuffer=s.depthBuffer,this.stencilBuffer=s.stencilBuffer,this.resolveDepthBuffer=s.resolveDepthBuffer,this.resolveStencilBuffer=s.resolveStencilBuffer,this.depthTexture=s.depthTexture,this.samples=s.samples}get texture(){return this.textures[0]}set texture(t){this.textures[0]=t}setSize(t,e,s=1){if(this.width!==t||this.height!==e||this.depth!==s){this.width=t,this.height=e,this.depth=s;for(let n=0,i=this.textures.length;n<i;n++)this.textures[n].image.width=t,this.textures[n].image.height=e,this.textures[n].image.depth=s;this.dispose()}this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e)}clone(){return new this.constructor().copy(this)}copy(t){this.width=t.width,this.height=t.height,this.depth=t.depth,this.scissor.copy(t.scissor),this.scissorTest=t.scissorTest,this.viewport.copy(t.viewport),this.textures.length=0;for(let s=0,n=t.textures.length;s<n;s++)this.textures[s]=t.textures[s].clone(),this.textures[s].isRenderTargetTexture=!0;const e=Object.assign({},t.texture.image);return this.texture.source=new rr(e),this.depthBuffer=t.depthBuffer,this.stencilBuffer=t.stencilBuffer,this.resolveDepthBuffer=t.resolveDepthBuffer,this.resolveStencilBuffer=t.resolveStencilBuffer,t.depthTexture!==null&&(this.depthTexture=t.depthTexture.clone()),this.samples=t.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}class Qe{constructor(t=0,e=0,s=0,n=1){this.isQuaternion=!0,this._x=t,this._y=e,this._z=s,this._w=n}static slerpFlat(t,e,s,n,i,o,a){let c=s[n+0],u=s[n+1],h=s[n+2],l=s[n+3];const d=i[o+0],f=i[o+1],p=i[o+2],m=i[o+3];if(a===0){t[e+0]=c,t[e+1]=u,t[e+2]=h,t[e+3]=l;return}if(a===1){t[e+0]=d,t[e+1]=f,t[e+2]=p,t[e+3]=m;return}if(l!==m||c!==d||u!==f||h!==p){let g=1-a;const y=c*d+u*f+h*p+l*m,T=y>=0?1:-1,w=1-y*y;if(w>Number.EPSILON){const N=Math.sqrt(w),_=Math.atan2(N,y*T);g=Math.sin(g*_)/N,a=Math.sin(a*_)/N}const M=a*T;if(c=c*g+d*M,u=u*g+f*M,h=h*g+p*M,l=l*g+m*M,g===1-a){const N=1/Math.sqrt(c*c+u*u+h*h+l*l);c*=N,u*=N,h*=N,l*=N}}t[e]=c,t[e+1]=u,t[e+2]=h,t[e+3]=l}static multiplyQuaternionsFlat(t,e,s,n,i,o){const a=s[n],c=s[n+1],u=s[n+2],h=s[n+3],l=i[o],d=i[o+1],f=i[o+2],p=i[o+3];return t[e]=a*p+h*l+c*f-u*d,t[e+1]=c*p+h*d+u*l-a*f,t[e+2]=u*p+h*f+a*d-c*l,t[e+3]=h*p-a*l-c*d-u*f,t}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get w(){return this._w}set w(t){this._w=t,this._onChangeCallback()}set(t,e,s,n){return this._x=t,this._y=e,this._z=s,this._w=n,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(t){return this._x=t.x,this._y=t.y,this._z=t.z,this._w=t.w,this._onChangeCallback(),this}setFromEuler(t,e=!0){const s=t._x,n=t._y,i=t._z,o=t._order,a=Math.cos,c=Math.sin,u=a(s/2),h=a(n/2),l=a(i/2),d=c(s/2),f=c(n/2),p=c(i/2);switch(o){case"XYZ":this._x=d*h*l+u*f*p,this._y=u*f*l-d*h*p,this._z=u*h*p+d*f*l,this._w=u*h*l-d*f*p;break;case"YXZ":this._x=d*h*l+u*f*p,this._y=u*f*l-d*h*p,this._z=u*h*p-d*f*l,this._w=u*h*l+d*f*p;break;case"ZXY":this._x=d*h*l-u*f*p,this._y=u*f*l+d*h*p,this._z=u*h*p+d*f*l,this._w=u*h*l-d*f*p;break;case"ZYX":this._x=d*h*l-u*f*p,this._y=u*f*l+d*h*p,this._z=u*h*p-d*f*l,this._w=u*h*l+d*f*p;break;case"YZX":this._x=d*h*l+u*f*p,this._y=u*f*l+d*h*p,this._z=u*h*p-d*f*l,this._w=u*h*l-d*f*p;break;case"XZY":this._x=d*h*l-u*f*p,this._y=u*f*l-d*h*p,this._z=u*h*p+d*f*l,this._w=u*h*l+d*f*p;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+o)}return e===!0&&this._onChangeCallback(),this}setFromAxisAngle(t,e){const s=e/2,n=Math.sin(s);return this._x=t.x*n,this._y=t.y*n,this._z=t.z*n,this._w=Math.cos(s),this._onChangeCallback(),this}setFromRotationMatrix(t){const e=t.elements,s=e[0],n=e[4],i=e[8],o=e[1],a=e[5],c=e[9],u=e[2],h=e[6],l=e[10],d=s+a+l;if(d>0){const f=.5/Math.sqrt(d+1);this._w=.25/f,this._x=(h-c)*f,this._y=(i-u)*f,this._z=(o-n)*f}else if(s>a&&s>l){const f=2*Math.sqrt(1+s-a-l);this._w=(h-c)/f,this._x=.25*f,this._y=(n+o)/f,this._z=(i+u)/f}else if(a>l){const f=2*Math.sqrt(1+a-s-l);this._w=(i-u)/f,this._x=(n+o)/f,this._y=.25*f,this._z=(c+h)/f}else{const f=2*Math.sqrt(1+l-s-a);this._w=(o-n)/f,this._x=(i+u)/f,this._y=(c+h)/f,this._z=.25*f}return this._onChangeCallback(),this}setFromUnitVectors(t,e){let s=t.dot(e)+1;return s<Number.EPSILON?(s=0,Math.abs(t.x)>Math.abs(t.z)?(this._x=-t.y,this._y=t.x,this._z=0,this._w=s):(this._x=0,this._y=-t.z,this._z=t.y,this._w=s)):(this._x=t.y*e.z-t.z*e.y,this._y=t.z*e.x-t.x*e.z,this._z=t.x*e.y-t.y*e.x,this._w=s),this.normalize()}angleTo(t){return 2*Math.acos(Math.abs(at(this.dot(t),-1,1)))}rotateTowards(t,e){const s=this.angleTo(t);if(s===0)return this;const n=Math.min(1,e/s);return this.slerp(t,n),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let t=this.length();return t===0?(this._x=0,this._y=0,this._z=0,this._w=1):(t=1/t,this._x=this._x*t,this._y=this._y*t,this._z=this._z*t,this._w=this._w*t),this._onChangeCallback(),this}multiply(t){return this.multiplyQuaternions(this,t)}premultiply(t){return this.multiplyQuaternions(t,this)}multiplyQuaternions(t,e){const s=t._x,n=t._y,i=t._z,o=t._w,a=e._x,c=e._y,u=e._z,h=e._w;return this._x=s*h+o*a+n*u-i*c,this._y=n*h+o*c+i*a-s*u,this._z=i*h+o*u+s*c-n*a,this._w=o*h-s*a-n*c-i*u,this._onChangeCallback(),this}slerp(t,e){if(e===0)return this;if(e===1)return this.copy(t);const s=this._x,n=this._y,i=this._z,o=this._w;let a=o*t._w+s*t._x+n*t._y+i*t._z;if(a<0?(this._w=-t._w,this._x=-t._x,this._y=-t._y,this._z=-t._z,a=-a):this.copy(t),a>=1)return this._w=o,this._x=s,this._y=n,this._z=i,this;const c=1-a*a;if(c<=Number.EPSILON){const f=1-e;return this._w=f*o+e*this._w,this._x=f*s+e*this._x,this._y=f*n+e*this._y,this._z=f*i+e*this._z,this.normalize(),this}const u=Math.sqrt(c),h=Math.atan2(u,a),l=Math.sin((1-e)*h)/u,d=Math.sin(e*h)/u;return this._w=o*l+this._w*d,this._x=s*l+this._x*d,this._y=n*l+this._y*d,this._z=i*l+this._z*d,this._onChangeCallback(),this}slerpQuaternions(t,e,s){return this.copy(t).slerp(e,s)}random(){const t=2*Math.PI*Math.random(),e=2*Math.PI*Math.random(),s=Math.random(),n=Math.sqrt(1-s),i=Math.sqrt(s);return this.set(n*Math.sin(t),n*Math.cos(t),i*Math.sin(e),i*Math.cos(e))}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w}fromArray(t,e=0){return this._x=t[e],this._y=t[e+1],this._z=t[e+2],this._w=t[e+3],this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._w,t}fromBufferAttribute(t,e){return this._x=t.getX(e),this._y=t.getY(e),this._z=t.getZ(e),this._w=t.getW(e),this._onChangeCallback(),this}toJSON(){return this.toArray()}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}}class A{constructor(t=0,e=0,s=0){A.prototype.isVector3=!0,this.x=t,this.y=e,this.z=s}set(t,e,s){return s===void 0&&(s=this.z),this.x=t,this.y=e,this.z=s,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this}addVectors(t,e){return this.x=t.x+e.x,this.y=t.y+e.y,this.z=t.z+e.z,this}addScaledVector(t,e){return this.x+=t.x*e,this.y+=t.y*e,this.z+=t.z*e,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this}subVectors(t,e){return this.x=t.x-e.x,this.y=t.y-e.y,this.z=t.z-e.z,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this}multiplyVectors(t,e){return this.x=t.x*e.x,this.y=t.y*e.y,this.z=t.z*e.z,this}applyEuler(t){return this.applyQuaternion(ar.setFromEuler(t))}applyAxisAngle(t,e){return this.applyQuaternion(ar.setFromAxisAngle(t,e))}applyMatrix3(t){const e=this.x,s=this.y,n=this.z,i=t.elements;return this.x=i[0]*e+i[3]*s+i[6]*n,this.y=i[1]*e+i[4]*s+i[7]*n,this.z=i[2]*e+i[5]*s+i[8]*n,this}applyNormalMatrix(t){return this.applyMatrix3(t).normalize()}applyMatrix4(t){const e=this.x,s=this.y,n=this.z,i=t.elements,o=1/(i[3]*e+i[7]*s+i[11]*n+i[15]);return this.x=(i[0]*e+i[4]*s+i[8]*n+i[12])*o,this.y=(i[1]*e+i[5]*s+i[9]*n+i[13])*o,this.z=(i[2]*e+i[6]*s+i[10]*n+i[14])*o,this}applyQuaternion(t){const e=this.x,s=this.y,n=this.z,i=t.x,o=t.y,a=t.z,c=t.w,u=2*(o*n-a*s),h=2*(a*e-i*n),l=2*(i*s-o*e);return this.x=e+c*u+o*l-a*h,this.y=s+c*h+a*u-i*l,this.z=n+c*l+i*h-o*u,this}project(t){return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)}unproject(t){return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld)}transformDirection(t){const e=this.x,s=this.y,n=this.z,i=t.elements;return this.x=i[0]*e+i[4]*s+i[8]*n,this.y=i[1]*e+i[5]*s+i[9]*n,this.z=i[2]*e+i[6]*s+i[10]*n,this.normalize()}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this}divideScalar(t){return this.multiplyScalar(1/t)}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this}clampLength(t,e){const s=this.length();return this.divideScalar(s||1).multiplyScalar(Math.max(t,Math.min(e,s)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this}lerpVectors(t,e,s){return this.x=t.x+(e.x-t.x)*s,this.y=t.y+(e.y-t.y)*s,this.z=t.z+(e.z-t.z)*s,this}cross(t){return this.crossVectors(this,t)}crossVectors(t,e){const s=t.x,n=t.y,i=t.z,o=e.x,a=e.y,c=e.z;return this.x=n*c-i*a,this.y=i*o-s*c,this.z=s*a-n*o,this}projectOnVector(t){const e=t.lengthSq();if(e===0)return this.set(0,0,0);const s=t.dot(this)/e;return this.copy(t).multiplyScalar(s)}projectOnPlane(t){return Rn.copy(this).projectOnVector(t),this.sub(Rn)}reflect(t){return this.sub(Rn.copy(t).multiplyScalar(2*this.dot(t)))}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(e===0)return Math.PI/2;const s=this.dot(t)/e;return Math.acos(at(s,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,s=this.y-t.y,n=this.z-t.z;return e*e+s*s+n*n}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z)}setFromSpherical(t){return this.setFromSphericalCoords(t.radius,t.phi,t.theta)}setFromSphericalCoords(t,e,s){const n=Math.sin(e)*t;return this.x=n*Math.sin(s),this.y=Math.cos(e)*t,this.z=n*Math.cos(s),this}setFromCylindrical(t){return this.setFromCylindricalCoords(t.radius,t.theta,t.y)}setFromCylindricalCoords(t,e,s){return this.x=t*Math.sin(e),this.y=s,this.z=t*Math.cos(e),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this}setFromMatrixScale(t){const e=this.setFromMatrixColumn(t,0).length(),s=this.setFromMatrixColumn(t,1).length(),n=this.setFromMatrixColumn(t,2).length();return this.x=e,this.y=s,this.z=n,this}setFromMatrixColumn(t,e){return this.fromArray(t.elements,e*4)}setFromMatrix3Column(t,e){return this.fromArray(t.elements,e*3)}setFromEuler(t){return this.x=t._x,this.y=t._y,this.z=t._z,this}setFromColor(t){return this.x=t.r,this.y=t.g,this.z=t.b,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const t=Math.random()*Math.PI*2,e=Math.random()*2-1,s=Math.sqrt(1-e*e);return this.x=s*Math.cos(t),this.y=e,this.z=s*Math.sin(t),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}const Rn=new A,ar=new Qe;class ht{constructor(t=new A(1/0,1/0,1/0),e=new A(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=t,this.max=e}set(t,e){return this.min.copy(t),this.max.copy(e),this}setFromArray(t){this.makeEmpty();for(let e=0,s=t.length;e<s;e+=3)this.expandByPoint(Rt.fromArray(t,e));return this}setFromBufferAttribute(t){this.makeEmpty();for(let e=0,s=t.count;e<s;e++)this.expandByPoint(Rt.fromBufferAttribute(t,e));return this}setFromPoints(t){this.makeEmpty();for(let e=0,s=t.length;e<s;e++)this.expandByPoint(t[e]);return this}setFromCenterAndSize(t,e){const s=Rt.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(s),this.max.copy(t).add(s),this}setFromObject(t,e=!1){return this.makeEmpty(),this.expandByObject(t,e)}clone(){return new this.constructor().copy(this)}copy(t){return this.min.copy(t.min),this.max.copy(t.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(t){return this.isEmpty()?t.set(0,0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return this.isEmpty()?t.set(0,0,0):t.subVectors(this.max,this.min)}expandByPoint(t){return this.min.min(t),this.max.max(t),this}expandByVector(t){return this.min.sub(t),this.max.add(t),this}expandByScalar(t){return this.min.addScalar(-t),this.max.addScalar(t),this}expandByObject(t,e=!1){t.updateWorldMatrix(!1,!1);const s=t.geometry;if(s!==void 0){const i=s.getAttribute("position");if(e===!0&&i!==void 0&&t.isInstancedMesh!==!0)for(let o=0,a=i.count;o<a;o++)t.isMesh===!0?t.getVertexPosition(o,Rt):Rt.fromBufferAttribute(i,o),Rt.applyMatrix4(t.matrixWorld),this.expandByPoint(Rt);else t.boundingBox!==void 0?(t.boundingBox===null&&t.computeBoundingBox(),Fs.copy(t.boundingBox)):(s.boundingBox===null&&s.computeBoundingBox(),Fs.copy(s.boundingBox)),Fs.applyMatrix4(t.matrixWorld),this.union(Fs)}const n=t.children;for(let i=0,o=n.length;i<o;i++)this.expandByObject(n[i],e);return this}containsPoint(t){return t.x>=this.min.x&&t.x<=this.max.x&&t.y>=this.min.y&&t.y<=this.max.y&&t.z>=this.min.z&&t.z<=this.max.z}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y&&this.min.z<=t.min.z&&t.max.z<=this.max.z}getParameter(t,e){return e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y),(t.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(t){return t.max.x>=this.min.x&&t.min.x<=this.max.x&&t.max.y>=this.min.y&&t.min.y<=this.max.y&&t.max.z>=this.min.z&&t.min.z<=this.max.z}intersectsSphere(t){return this.clampPoint(t.center,Rt),Rt.distanceToSquared(t.center)<=t.radius*t.radius}intersectsPlane(t){let e,s;return t.normal.x>0?(e=t.normal.x*this.min.x,s=t.normal.x*this.max.x):(e=t.normal.x*this.max.x,s=t.normal.x*this.min.x),t.normal.y>0?(e+=t.normal.y*this.min.y,s+=t.normal.y*this.max.y):(e+=t.normal.y*this.max.y,s+=t.normal.y*this.min.y),t.normal.z>0?(e+=t.normal.z*this.min.z,s+=t.normal.z*this.max.z):(e+=t.normal.z*this.max.z,s+=t.normal.z*this.min.z),e<=-t.constant&&s>=-t.constant}intersectsTriangle(t){if(this.isEmpty())return!1;this.getCenter(Ke),Rs.subVectors(this.max,Ke),Ne.subVectors(t.a,Ke),we.subVectors(t.b,Ke),Ae.subVectors(t.c,Ke),te.subVectors(we,Ne),ee.subVectors(Ae,we),ue.subVectors(Ne,Ae);let e=[0,-te.z,te.y,0,-ee.z,ee.y,0,-ue.z,ue.y,te.z,0,-te.x,ee.z,0,-ee.x,ue.z,0,-ue.x,-te.y,te.x,0,-ee.y,ee.x,0,-ue.y,ue.x,0];return!Bn(e,Ne,we,Ae,Rs)||(e=[1,0,0,0,1,0,0,0,1],!Bn(e,Ne,we,Ae,Rs))?!1:(Bs.crossVectors(te,ee),e=[Bs.x,Bs.y,Bs.z],Bn(e,Ne,we,Ae,Rs))}clampPoint(t,e){return e.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return this.clampPoint(t,Rt).distanceTo(t)}getBoundingSphere(t){return this.isEmpty()?t.makeEmpty():(this.getCenter(t.center),t.radius=this.getSize(Rt).length()*.5),t}intersect(t){return this.min.max(t.min),this.max.min(t.max),this.isEmpty()&&this.makeEmpty(),this}union(t){return this.min.min(t.min),this.max.max(t.max),this}applyMatrix4(t){return this.isEmpty()?this:(Gt[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),Gt[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),Gt[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),Gt[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),Gt[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),Gt[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),Gt[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),Gt[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints(Gt),this)}translate(t){return this.min.add(t),this.max.add(t),this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}const Gt=[new A,new A,new A,new A,new A,new A,new A,new A],Rt=new A,Fs=new ht,Ne=new A,we=new A,Ae=new A,te=new A,ee=new A,ue=new A,Ke=new A,Rs=new A,Bs=new A,le=new A;function Bn(r,t,e,s,n){for(let i=0,o=r.length-3;i<=o;i+=3){le.fromArray(r,i);const a=n.x*Math.abs(le.x)+n.y*Math.abs(le.y)+n.z*Math.abs(le.z),c=t.dot(le),u=e.dot(le),h=s.dot(le);if(Math.max(-Math.max(c,u,h),Math.min(c,u,h))>a)return!1}return!0}const aa=new ht,ts=new A,In=new A;class cr{constructor(t=new A,e=-1){this.isSphere=!0,this.center=t,this.radius=e}set(t,e){return this.center.copy(t),this.radius=e,this}setFromPoints(t,e){const s=this.center;e!==void 0?s.copy(e):aa.setFromPoints(t).getCenter(s);let n=0;for(let i=0,o=t.length;i<o;i++)n=Math.max(n,s.distanceToSquared(t[i]));return this.radius=Math.sqrt(n),this}copy(t){return this.center.copy(t.center),this.radius=t.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(t){return t.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(t){return t.distanceTo(this.center)-this.radius}intersectsSphere(t){const e=this.radius+t.radius;return t.center.distanceToSquared(this.center)<=e*e}intersectsBox(t){return t.intersectsSphere(this)}intersectsPlane(t){return Math.abs(t.distanceToPoint(this.center))<=this.radius}clampPoint(t,e){const s=this.center.distanceToSquared(t);return e.copy(t),s>this.radius*this.radius&&(e.sub(this.center).normalize(),e.multiplyScalar(this.radius).add(this.center)),e}getBoundingBox(t){return this.isEmpty()?(t.makeEmpty(),t):(t.set(this.center,this.center),t.expandByScalar(this.radius),t)}applyMatrix4(t){return this.center.applyMatrix4(t),this.radius=this.radius*t.getMaxScaleOnAxis(),this}translate(t){return this.center.add(t),this}expandByPoint(t){if(this.isEmpty())return this.center.copy(t),this.radius=0,this;ts.subVectors(t,this.center);const e=ts.lengthSq();if(e>this.radius*this.radius){const s=Math.sqrt(e),n=(s-this.radius)*.5;this.center.addScaledVector(ts,n/s),this.radius+=n}return this}union(t){return t.isEmpty()?this:this.isEmpty()?(this.copy(t),this):(this.center.equals(t.center)===!0?this.radius=Math.max(this.radius,t.radius):(In.subVectors(t.center,this.center).setLength(t.radius),this.expandByPoint(ts.copy(t.center).add(In)),this.expandByPoint(ts.copy(t.center).sub(In))),this)}equals(t){return t.center.equals(this.center)&&t.radius===this.radius}clone(){return new this.constructor().copy(this)}}class nt{constructor(t,e,s,n,i,o,a,c,u,h,l,d,f,p,m,g){nt.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],t!==void 0&&this.set(t,e,s,n,i,o,a,c,u,h,l,d,f,p,m,g)}set(t,e,s,n,i,o,a,c,u,h,l,d,f,p,m,g){const y=this.elements;return y[0]=t,y[4]=e,y[8]=s,y[12]=n,y[1]=i,y[5]=o,y[9]=a,y[13]=c,y[2]=u,y[6]=h,y[10]=l,y[14]=d,y[3]=f,y[7]=p,y[11]=m,y[15]=g,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new nt().fromArray(this.elements)}copy(t){const e=this.elements,s=t.elements;return e[0]=s[0],e[1]=s[1],e[2]=s[2],e[3]=s[3],e[4]=s[4],e[5]=s[5],e[6]=s[6],e[7]=s[7],e[8]=s[8],e[9]=s[9],e[10]=s[10],e[11]=s[11],e[12]=s[12],e[13]=s[13],e[14]=s[14],e[15]=s[15],this}copyPosition(t){const e=this.elements,s=t.elements;return e[12]=s[12],e[13]=s[13],e[14]=s[14],this}setFromMatrix3(t){const e=t.elements;return this.set(e[0],e[3],e[6],0,e[1],e[4],e[7],0,e[2],e[5],e[8],0,0,0,0,1),this}extractBasis(t,e,s){return t.setFromMatrixColumn(this,0),e.setFromMatrixColumn(this,1),s.setFromMatrixColumn(this,2),this}makeBasis(t,e,s){return this.set(t.x,e.x,s.x,0,t.y,e.y,s.y,0,t.z,e.z,s.z,0,0,0,0,1),this}extractRotation(t){const e=this.elements,s=t.elements,n=1/Me.setFromMatrixColumn(t,0).length(),i=1/Me.setFromMatrixColumn(t,1).length(),o=1/Me.setFromMatrixColumn(t,2).length();return e[0]=s[0]*n,e[1]=s[1]*n,e[2]=s[2]*n,e[3]=0,e[4]=s[4]*i,e[5]=s[5]*i,e[6]=s[6]*i,e[7]=0,e[8]=s[8]*o,e[9]=s[9]*o,e[10]=s[10]*o,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromEuler(t){const e=this.elements,s=t.x,n=t.y,i=t.z,o=Math.cos(s),a=Math.sin(s),c=Math.cos(n),u=Math.sin(n),h=Math.cos(i),l=Math.sin(i);if(t.order==="XYZ"){const d=o*h,f=o*l,p=a*h,m=a*l;e[0]=c*h,e[4]=-c*l,e[8]=u,e[1]=f+p*u,e[5]=d-m*u,e[9]=-a*c,e[2]=m-d*u,e[6]=p+f*u,e[10]=o*c}else if(t.order==="YXZ"){const d=c*h,f=c*l,p=u*h,m=u*l;e[0]=d+m*a,e[4]=p*a-f,e[8]=o*u,e[1]=o*l,e[5]=o*h,e[9]=-a,e[2]=f*a-p,e[6]=m+d*a,e[10]=o*c}else if(t.order==="ZXY"){const d=c*h,f=c*l,p=u*h,m=u*l;e[0]=d-m*a,e[4]=-o*l,e[8]=p+f*a,e[1]=f+p*a,e[5]=o*h,e[9]=m-d*a,e[2]=-o*u,e[6]=a,e[10]=o*c}else if(t.order==="ZYX"){const d=o*h,f=o*l,p=a*h,m=a*l;e[0]=c*h,e[4]=p*u-f,e[8]=d*u+m,e[1]=c*l,e[5]=m*u+d,e[9]=f*u-p,e[2]=-u,e[6]=a*c,e[10]=o*c}else if(t.order==="YZX"){const d=o*c,f=o*u,p=a*c,m=a*u;e[0]=c*h,e[4]=m-d*l,e[8]=p*l+f,e[1]=l,e[5]=o*h,e[9]=-a*h,e[2]=-u*h,e[6]=f*l+p,e[10]=d-m*l}else if(t.order==="XZY"){const d=o*c,f=o*u,p=a*c,m=a*u;e[0]=c*h,e[4]=-l,e[8]=u*h,e[1]=d*l+m,e[5]=o*h,e[9]=f*l-p,e[2]=p*l-f,e[6]=a*h,e[10]=m*l+d}return e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromQuaternion(t){return this.compose(ca,t,ha)}lookAt(t,e,s){const n=this.elements;return yt.subVectors(t,e),yt.lengthSq()===0&&(yt.z=1),yt.normalize(),se.crossVectors(s,yt),se.lengthSq()===0&&(Math.abs(s.z)===1?yt.x+=1e-4:yt.z+=1e-4,yt.normalize(),se.crossVectors(s,yt)),se.normalize(),Is.crossVectors(yt,se),n[0]=se.x,n[4]=Is.x,n[8]=yt.x,n[1]=se.y,n[5]=Is.y,n[9]=yt.y,n[2]=se.z,n[6]=Is.z,n[10]=yt.z,this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,e){const s=t.elements,n=e.elements,i=this.elements,o=s[0],a=s[4],c=s[8],u=s[12],h=s[1],l=s[5],d=s[9],f=s[13],p=s[2],m=s[6],g=s[10],y=s[14],T=s[3],w=s[7],M=s[11],N=s[15],_=n[0],S=n[4],E=n[8],F=n[12],R=n[1],I=n[5],B=n[9],P=n[13],L=n[2],V=n[6],G=n[10],Nt=n[14],Ht=n[3],qt=n[7],Nn=n[11],wn=n[15];return i[0]=o*_+a*R+c*L+u*Ht,i[4]=o*S+a*I+c*V+u*qt,i[8]=o*E+a*B+c*G+u*Nn,i[12]=o*F+a*P+c*Nt+u*wn,i[1]=h*_+l*R+d*L+f*Ht,i[5]=h*S+l*I+d*V+f*qt,i[9]=h*E+l*B+d*G+f*Nn,i[13]=h*F+l*P+d*Nt+f*wn,i[2]=p*_+m*R+g*L+y*Ht,i[6]=p*S+m*I+g*V+y*qt,i[10]=p*E+m*B+g*G+y*Nn,i[14]=p*F+m*P+g*Nt+y*wn,i[3]=T*_+w*R+M*L+N*Ht,i[7]=T*S+w*I+M*V+N*qt,i[11]=T*E+w*B+M*G+N*Nn,i[15]=T*F+w*P+M*Nt+N*wn,this}multiplyScalar(t){const e=this.elements;return e[0]*=t,e[4]*=t,e[8]*=t,e[12]*=t,e[1]*=t,e[5]*=t,e[9]*=t,e[13]*=t,e[2]*=t,e[6]*=t,e[10]*=t,e[14]*=t,e[3]*=t,e[7]*=t,e[11]*=t,e[15]*=t,this}determinant(){const t=this.elements,e=t[0],s=t[4],n=t[8],i=t[12],o=t[1],a=t[5],c=t[9],u=t[13],h=t[2],l=t[6],d=t[10],f=t[14],p=t[3],m=t[7],g=t[11],y=t[15];return p*(+i*c*l-n*u*l-i*a*d+s*u*d+n*a*f-s*c*f)+m*(+e*c*f-e*u*d+i*o*d-n*o*f+n*u*h-i*c*h)+g*(+e*u*l-e*a*f-i*o*l+s*o*f+i*a*h-s*u*h)+y*(-n*a*h-e*c*l+e*a*d+n*o*l-s*o*d+s*c*h)}transpose(){const t=this.elements;let e;return e=t[1],t[1]=t[4],t[4]=e,e=t[2],t[2]=t[8],t[8]=e,e=t[6],t[6]=t[9],t[9]=e,e=t[3],t[3]=t[12],t[12]=e,e=t[7],t[7]=t[13],t[13]=e,e=t[11],t[11]=t[14],t[14]=e,this}setPosition(t,e,s){const n=this.elements;return t.isVector3?(n[12]=t.x,n[13]=t.y,n[14]=t.z):(n[12]=t,n[13]=e,n[14]=s),this}invert(){const t=this.elements,e=t[0],s=t[1],n=t[2],i=t[3],o=t[4],a=t[5],c=t[6],u=t[7],h=t[8],l=t[9],d=t[10],f=t[11],p=t[12],m=t[13],g=t[14],y=t[15],T=l*g*u-m*d*u+m*c*f-a*g*f-l*c*y+a*d*y,w=p*d*u-h*g*u-p*c*f+o*g*f+h*c*y-o*d*y,M=h*m*u-p*l*u+p*a*f-o*m*f-h*a*y+o*l*y,N=p*l*c-h*m*c-p*a*d+o*m*d+h*a*g-o*l*g,_=e*T+s*w+n*M+i*N;if(_===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const S=1/_;return t[0]=T*S,t[1]=(m*d*i-l*g*i-m*n*f+s*g*f+l*n*y-s*d*y)*S,t[2]=(a*g*i-m*c*i+m*n*u-s*g*u-a*n*y+s*c*y)*S,t[3]=(l*c*i-a*d*i-l*n*u+s*d*u+a*n*f-s*c*f)*S,t[4]=w*S,t[5]=(h*g*i-p*d*i+p*n*f-e*g*f-h*n*y+e*d*y)*S,t[6]=(p*c*i-o*g*i-p*n*u+e*g*u+o*n*y-e*c*y)*S,t[7]=(o*d*i-h*c*i+h*n*u-e*d*u-o*n*f+e*c*f)*S,t[8]=M*S,t[9]=(p*l*i-h*m*i-p*s*f+e*m*f+h*s*y-e*l*y)*S,t[10]=(o*m*i-p*a*i+p*s*u-e*m*u-o*s*y+e*a*y)*S,t[11]=(h*a*i-o*l*i-h*s*u+e*l*u+o*s*f-e*a*f)*S,t[12]=N*S,t[13]=(h*m*n-p*l*n+p*s*d-e*m*d-h*s*g+e*l*g)*S,t[14]=(p*a*n-o*m*n-p*s*c+e*m*c+o*s*g-e*a*g)*S,t[15]=(o*l*n-h*a*n+h*s*c-e*l*c-o*s*d+e*a*d)*S,this}scale(t){const e=this.elements,s=t.x,n=t.y,i=t.z;return e[0]*=s,e[4]*=n,e[8]*=i,e[1]*=s,e[5]*=n,e[9]*=i,e[2]*=s,e[6]*=n,e[10]*=i,e[3]*=s,e[7]*=n,e[11]*=i,this}getMaxScaleOnAxis(){const t=this.elements,e=t[0]*t[0]+t[1]*t[1]+t[2]*t[2],s=t[4]*t[4]+t[5]*t[5]+t[6]*t[6],n=t[8]*t[8]+t[9]*t[9]+t[10]*t[10];return Math.sqrt(Math.max(e,s,n))}makeTranslation(t,e,s){return t.isVector3?this.set(1,0,0,t.x,0,1,0,t.y,0,0,1,t.z,0,0,0,1):this.set(1,0,0,t,0,1,0,e,0,0,1,s,0,0,0,1),this}makeRotationX(t){const e=Math.cos(t),s=Math.sin(t);return this.set(1,0,0,0,0,e,-s,0,0,s,e,0,0,0,0,1),this}makeRotationY(t){const e=Math.cos(t),s=Math.sin(t);return this.set(e,0,s,0,0,1,0,0,-s,0,e,0,0,0,0,1),this}makeRotationZ(t){const e=Math.cos(t),s=Math.sin(t);return this.set(e,-s,0,0,s,e,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(t,e){const s=Math.cos(e),n=Math.sin(e),i=1-s,o=t.x,a=t.y,c=t.z,u=i*o,h=i*a;return this.set(u*o+s,u*a-n*c,u*c+n*a,0,u*a+n*c,h*a+s,h*c-n*o,0,u*c-n*a,h*c+n*o,i*c*c+s,0,0,0,0,1),this}makeScale(t,e,s){return this.set(t,0,0,0,0,e,0,0,0,0,s,0,0,0,0,1),this}makeShear(t,e,s,n,i,o){return this.set(1,s,i,0,t,1,o,0,e,n,1,0,0,0,0,1),this}compose(t,e,s){const n=this.elements,i=e._x,o=e._y,a=e._z,c=e._w,u=i+i,h=o+o,l=a+a,d=i*u,f=i*h,p=i*l,m=o*h,g=o*l,y=a*l,T=c*u,w=c*h,M=c*l,N=s.x,_=s.y,S=s.z;return n[0]=(1-(m+y))*N,n[1]=(f+M)*N,n[2]=(p-w)*N,n[3]=0,n[4]=(f-M)*_,n[5]=(1-(d+y))*_,n[6]=(g+T)*_,n[7]=0,n[8]=(p+w)*S,n[9]=(g-T)*S,n[10]=(1-(d+m))*S,n[11]=0,n[12]=t.x,n[13]=t.y,n[14]=t.z,n[15]=1,this}decompose(t,e,s){const n=this.elements;let i=Me.set(n[0],n[1],n[2]).length();const o=Me.set(n[4],n[5],n[6]).length(),a=Me.set(n[8],n[9],n[10]).length();this.determinant()<0&&(i=-i),t.x=n[12],t.y=n[13],t.z=n[14],Bt.copy(this);const u=1/i,h=1/o,l=1/a;return Bt.elements[0]*=u,Bt.elements[1]*=u,Bt.elements[2]*=u,Bt.elements[4]*=h,Bt.elements[5]*=h,Bt.elements[6]*=h,Bt.elements[8]*=l,Bt.elements[9]*=l,Bt.elements[10]*=l,e.setFromRotationMatrix(Bt),s.x=i,s.y=o,s.z=a,this}makePerspective(t,e,s,n,i,o,a=Ye){const c=this.elements,u=2*i/(e-t),h=2*i/(s-n),l=(e+t)/(e-t),d=(s+n)/(s-n);let f,p;if(a===Ye)f=-(o+i)/(o-i),p=-2*o*i/(o-i);else if(a===zn)f=-o/(o-i),p=-o*i/(o-i);else throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: "+a);return c[0]=u,c[4]=0,c[8]=l,c[12]=0,c[1]=0,c[5]=h,c[9]=d,c[13]=0,c[2]=0,c[6]=0,c[10]=f,c[14]=p,c[3]=0,c[7]=0,c[11]=-1,c[15]=0,this}makeOrthographic(t,e,s,n,i,o,a=Ye){const c=this.elements,u=1/(e-t),h=1/(s-n),l=1/(o-i),d=(e+t)*u,f=(s+n)*h;let p,m;if(a===Ye)p=(o+i)*l,m=-2*l;else if(a===zn)p=i*l,m=-1*l;else throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: "+a);return c[0]=2*u,c[4]=0,c[8]=0,c[12]=-d,c[1]=0,c[5]=2*h,c[9]=0,c[13]=-f,c[2]=0,c[6]=0,c[10]=m,c[14]=-p,c[3]=0,c[7]=0,c[11]=0,c[15]=1,this}equals(t){const e=this.elements,s=t.elements;for(let n=0;n<16;n++)if(e[n]!==s[n])return!1;return!0}fromArray(t,e=0){for(let s=0;s<16;s++)this.elements[s]=t[s+e];return this}toArray(t=[],e=0){const s=this.elements;return t[e]=s[0],t[e+1]=s[1],t[e+2]=s[2],t[e+3]=s[3],t[e+4]=s[4],t[e+5]=s[5],t[e+6]=s[6],t[e+7]=s[7],t[e+8]=s[8],t[e+9]=s[9],t[e+10]=s[10],t[e+11]=s[11],t[e+12]=s[12],t[e+13]=s[13],t[e+14]=s[14],t[e+15]=s[15],t}}const Me=new A,Bt=new nt,ca=new A(0,0,0),ha=new A(1,1,1),se=new A,Is=new A,yt=new A,hr=new nt,ur=new Qe;class vs{constructor(t=0,e=0,s=0,n=vs.DEFAULT_ORDER){this.isEuler=!0,this._x=t,this._y=e,this._z=s,this._order=n}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get order(){return this._order}set order(t){this._order=t,this._onChangeCallback()}set(t,e,s,n=this._order){return this._x=t,this._y=e,this._z=s,this._order=n,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(t){return this._x=t._x,this._y=t._y,this._z=t._z,this._order=t._order,this._onChangeCallback(),this}setFromRotationMatrix(t,e=this._order,s=!0){const n=t.elements,i=n[0],o=n[4],a=n[8],c=n[1],u=n[5],h=n[9],l=n[2],d=n[6],f=n[10];switch(e){case"XYZ":this._y=Math.asin(at(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(-h,f),this._z=Math.atan2(-o,i)):(this._x=Math.atan2(d,u),this._z=0);break;case"YXZ":this._x=Math.asin(-at(h,-1,1)),Math.abs(h)<.9999999?(this._y=Math.atan2(a,f),this._z=Math.atan2(c,u)):(this._y=Math.atan2(-l,i),this._z=0);break;case"ZXY":this._x=Math.asin(at(d,-1,1)),Math.abs(d)<.9999999?(this._y=Math.atan2(-l,f),this._z=Math.atan2(-o,u)):(this._y=0,this._z=Math.atan2(c,i));break;case"ZYX":this._y=Math.asin(-at(l,-1,1)),Math.abs(l)<.9999999?(this._x=Math.atan2(d,f),this._z=Math.atan2(c,i)):(this._x=0,this._z=Math.atan2(-o,u));break;case"YZX":this._z=Math.asin(at(c,-1,1)),Math.abs(c)<.9999999?(this._x=Math.atan2(-h,u),this._y=Math.atan2(-l,i)):(this._x=0,this._y=Math.atan2(a,f));break;case"XZY":this._z=Math.asin(-at(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(d,u),this._y=Math.atan2(a,i)):(this._x=Math.atan2(-h,f),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+e)}return this._order=e,s===!0&&this._onChangeCallback(),this}setFromQuaternion(t,e,s){return hr.makeRotationFromQuaternion(t),this.setFromRotationMatrix(hr,e,s)}setFromVector3(t,e=this._order){return this.set(t.x,t.y,t.z,e)}reorder(t){return ur.setFromEuler(this),this.setFromQuaternion(ur,t)}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._order===this._order}fromArray(t){return this._x=t[0],this._y=t[1],this._z=t[2],t[3]!==void 0&&(this._order=t[3]),this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._order,t}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}}vs.DEFAULT_ORDER="XYZ";class ua{constructor(){this.mask=1}set(t){this.mask=(1<<t|0)>>>0}enable(t){this.mask|=1<<t|0}enableAll(){this.mask=-1}toggle(t){this.mask^=1<<t|0}disable(t){this.mask&=~(1<<t|0)}disableAll(){this.mask=0}test(t){return(this.mask&t.mask)!==0}isEnabled(t){return(this.mask&(1<<t|0))!==0}}let la=0;const lr=new A,Se=new Qe,Wt=new nt,Ps=new A,es=new A,da=new A,fa=new Qe,dr=new A(1,0,0),fr=new A(0,1,0),pr=new A(0,0,1),mr={type:"added"},pa={type:"removed"},_e={type:"childadded",child:null},vn={type:"childremoved",child:null};class ne extends Ze{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:la++}),this.uuid=Kt(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=ne.DEFAULT_UP.clone();const t=new A,e=new vs,s=new Qe,n=new A(1,1,1);function i(){s.setFromEuler(e,!1)}function o(){e.setFromQuaternion(s,void 0,!1)}e._onChange(i),s._onChange(o),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:t},rotation:{configurable:!0,enumerable:!0,value:e},quaternion:{configurable:!0,enumerable:!0,value:s},scale:{configurable:!0,enumerable:!0,value:n},modelViewMatrix:{value:new nt},normalMatrix:{value:new Ct}}),this.matrix=new nt,this.matrixWorld=new nt,this.matrixAutoUpdate=ne.DEFAULT_MATRIX_AUTO_UPDATE,this.matrixWorldAutoUpdate=ne.DEFAULT_MATRIX_WORLD_AUTO_UPDATE,this.matrixWorldNeedsUpdate=!1,this.layers=new ua,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeShadow(){}onAfterShadow(){}onBeforeRender(){}onAfterRender(){}applyMatrix4(t){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(t),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(t){return this.quaternion.premultiply(t),this}setRotationFromAxisAngle(t,e){this.quaternion.setFromAxisAngle(t,e)}setRotationFromEuler(t){this.quaternion.setFromEuler(t,!0)}setRotationFromMatrix(t){this.quaternion.setFromRotationMatrix(t)}setRotationFromQuaternion(t){this.quaternion.copy(t)}rotateOnAxis(t,e){return Se.setFromAxisAngle(t,e),this.quaternion.multiply(Se),this}rotateOnWorldAxis(t,e){return Se.setFromAxisAngle(t,e),this.quaternion.premultiply(Se),this}rotateX(t){return this.rotateOnAxis(dr,t)}rotateY(t){return this.rotateOnAxis(fr,t)}rotateZ(t){return this.rotateOnAxis(pr,t)}translateOnAxis(t,e){return lr.copy(t).applyQuaternion(this.quaternion),this.position.add(lr.multiplyScalar(e)),this}translateX(t){return this.translateOnAxis(dr,t)}translateY(t){return this.translateOnAxis(fr,t)}translateZ(t){return this.translateOnAxis(pr,t)}localToWorld(t){return this.updateWorldMatrix(!0,!1),t.applyMatrix4(this.matrixWorld)}worldToLocal(t){return this.updateWorldMatrix(!0,!1),t.applyMatrix4(Wt.copy(this.matrixWorld).invert())}lookAt(t,e,s){t.isVector3?Ps.copy(t):Ps.set(t,e,s);const n=this.parent;this.updateWorldMatrix(!0,!1),es.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?Wt.lookAt(es,Ps,this.up):Wt.lookAt(Ps,es,this.up),this.quaternion.setFromRotationMatrix(Wt),n&&(Wt.extractRotation(n.matrixWorld),Se.setFromRotationMatrix(Wt),this.quaternion.premultiply(Se.invert()))}add(t){if(arguments.length>1){for(let e=0;e<arguments.length;e++)this.add(arguments[e]);return this}return t===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",t),this):(t&&t.isObject3D?(t.removeFromParent(),t.parent=this,this.children.push(t),t.dispatchEvent(mr),_e.child=t,this.dispatchEvent(_e),_e.child=null):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",t),this)}remove(t){if(arguments.length>1){for(let s=0;s<arguments.length;s++)this.remove(arguments[s]);return this}const e=this.children.indexOf(t);return e!==-1&&(t.parent=null,this.children.splice(e,1),t.dispatchEvent(pa),vn.child=t,this.dispatchEvent(vn),vn.child=null),this}removeFromParent(){const t=this.parent;return t!==null&&t.remove(this),this}clear(){return this.remove(...this.children)}attach(t){return this.updateWorldMatrix(!0,!1),Wt.copy(this.matrixWorld).invert(),t.parent!==null&&(t.parent.updateWorldMatrix(!0,!1),Wt.multiply(t.parent.matrixWorld)),t.applyMatrix4(Wt),t.removeFromParent(),t.parent=this,this.children.push(t),t.updateWorldMatrix(!1,!0),t.dispatchEvent(mr),_e.child=t,this.dispatchEvent(_e),_e.child=null,this}getObjectById(t){return this.getObjectByProperty("id",t)}getObjectByName(t){return this.getObjectByProperty("name",t)}getObjectByProperty(t,e){if(this[t]===e)return this;for(let s=0,n=this.children.length;s<n;s++){const o=this.children[s].getObjectByProperty(t,e);if(o!==void 0)return o}}getObjectsByProperty(t,e,s=[]){this[t]===e&&s.push(this);const n=this.children;for(let i=0,o=n.length;i<o;i++)n[i].getObjectsByProperty(t,e,s);return s}getWorldPosition(t){return this.updateWorldMatrix(!0,!1),t.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(es,t,da),t}getWorldScale(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(es,fa,t),t}getWorldDirection(t){this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return t.set(e[8],e[9],e[10]).normalize()}raycast(){}traverse(t){t(this);const e=this.children;for(let s=0,n=e.length;s<n;s++)e[s].traverse(t)}traverseVisible(t){if(this.visible===!1)return;t(this);const e=this.children;for(let s=0,n=e.length;s<n;s++)e[s].traverseVisible(t)}traverseAncestors(t){const e=this.parent;e!==null&&(t(e),e.traverseAncestors(t))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||t)&&(this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),this.matrixWorldNeedsUpdate=!1,t=!0);const e=this.children;for(let s=0,n=e.length;s<n;s++)e[s].updateMatrixWorld(t)}updateWorldMatrix(t,e){const s=this.parent;if(t===!0&&s!==null&&s.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),e===!0){const n=this.children;for(let i=0,o=n.length;i<o;i++)n[i].updateWorldMatrix(!1,!0)}}toJSON(t){const e=t===void 0||typeof t=="string",s={};e&&(t={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},s.metadata={version:4.6,type:"Object",generator:"Object3D.toJSON"});const n={};n.uuid=this.uuid,n.type=this.type,this.name!==""&&(n.name=this.name),this.castShadow===!0&&(n.castShadow=!0),this.receiveShadow===!0&&(n.receiveShadow=!0),this.visible===!1&&(n.visible=!1),this.frustumCulled===!1&&(n.frustumCulled=!1),this.renderOrder!==0&&(n.renderOrder=this.renderOrder),Object.keys(this.userData).length>0&&(n.userData=this.userData),n.layers=this.layers.mask,n.matrix=this.matrix.toArray(),n.up=this.up.toArray(),this.matrixAutoUpdate===!1&&(n.matrixAutoUpdate=!1),this.isInstancedMesh&&(n.type="InstancedMesh",n.count=this.count,n.instanceMatrix=this.instanceMatrix.toJSON(),this.instanceColor!==null&&(n.instanceColor=this.instanceColor.toJSON())),this.isBatchedMesh&&(n.type="BatchedMesh",n.perObjectFrustumCulled=this.perObjectFrustumCulled,n.sortObjects=this.sortObjects,n.drawRanges=this._drawRanges,n.reservedRanges=this._reservedRanges,n.visibility=this._visibility,n.active=this._active,n.bounds=this._bounds.map(a=>({boxInitialized:a.boxInitialized,boxMin:a.box.min.toArray(),boxMax:a.box.max.toArray(),sphereInitialized:a.sphereInitialized,sphereRadius:a.sphere.radius,sphereCenter:a.sphere.center.toArray()})),n.maxInstanceCount=this._maxInstanceCount,n.maxVertexCount=this._maxVertexCount,n.maxIndexCount=this._maxIndexCount,n.geometryInitialized=this._geometryInitialized,n.geometryCount=this._geometryCount,n.matricesTexture=this._matricesTexture.toJSON(t),this._colorsTexture!==null&&(n.colorsTexture=this._colorsTexture.toJSON(t)),this.boundingSphere!==null&&(n.boundingSphere={center:n.boundingSphere.center.toArray(),radius:n.boundingSphere.radius}),this.boundingBox!==null&&(n.boundingBox={min:n.boundingBox.min.toArray(),max:n.boundingBox.max.toArray()}));function i(a,c){return a[c.uuid]===void 0&&(a[c.uuid]=c.toJSON(t)),c.uuid}if(this.isScene)this.background&&(this.background.isColor?n.background=this.background.toJSON():this.background.isTexture&&(n.background=this.background.toJSON(t).uuid)),this.environment&&this.environment.isTexture&&this.environment.isRenderTargetTexture!==!0&&(n.environment=this.environment.toJSON(t).uuid);else if(this.isMesh||this.isLine||this.isPoints){n.geometry=i(t.geometries,this.geometry);const a=this.geometry.parameters;if(a!==void 0&&a.shapes!==void 0){const c=a.shapes;if(Array.isArray(c))for(let u=0,h=c.length;u<h;u++){const l=c[u];i(t.shapes,l)}else i(t.shapes,c)}}if(this.isSkinnedMesh&&(n.bindMode=this.bindMode,n.bindMatrix=this.bindMatrix.toArray(),this.skeleton!==void 0&&(i(t.skeletons,this.skeleton),n.skeleton=this.skeleton.uuid)),this.material!==void 0)if(Array.isArray(this.material)){const a=[];for(let c=0,u=this.material.length;c<u;c++)a.push(i(t.materials,this.material[c]));n.material=a}else n.material=i(t.materials,this.material);if(this.children.length>0){n.children=[];for(let a=0;a<this.children.length;a++)n.children.push(this.children[a].toJSON(t).object)}if(this.animations.length>0){n.animations=[];for(let a=0;a<this.animations.length;a++){const c=this.animations[a];n.animations.push(i(t.animations,c))}}if(e){const a=o(t.geometries),c=o(t.materials),u=o(t.textures),h=o(t.images),l=o(t.shapes),d=o(t.skeletons),f=o(t.animations),p=o(t.nodes);a.length>0&&(s.geometries=a),c.length>0&&(s.materials=c),u.length>0&&(s.textures=u),h.length>0&&(s.images=h),l.length>0&&(s.shapes=l),d.length>0&&(s.skeletons=d),f.length>0&&(s.animations=f),p.length>0&&(s.nodes=p)}return s.object=n,s;function o(a){const c=[];for(const u in a){const h=a[u];delete h.metadata,c.push(h)}return c}}clone(t){return new this.constructor().copy(this,t)}copy(t,e=!0){if(this.name=t.name,this.up.copy(t.up),this.position.copy(t.position),this.rotation.order=t.rotation.order,this.quaternion.copy(t.quaternion),this.scale.copy(t.scale),this.matrix.copy(t.matrix),this.matrixWorld.copy(t.matrixWorld),this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrixWorldAutoUpdate=t.matrixWorldAutoUpdate,this.matrixWorldNeedsUpdate=t.matrixWorldNeedsUpdate,this.layers.mask=t.layers.mask,this.visible=t.visible,this.castShadow=t.castShadow,this.receiveShadow=t.receiveShadow,this.frustumCulled=t.frustumCulled,this.renderOrder=t.renderOrder,this.animations=t.animations.slice(),this.userData=JSON.parse(JSON.stringify(t.userData)),e===!0)for(let s=0;s<t.children.length;s++){const n=t.children[s];this.add(n.clone())}return this}}ne.DEFAULT_UP=new A(0,1,0),ne.DEFAULT_MATRIX_AUTO_UPDATE=!0,ne.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=!0;const It=new A,Xt=new A,Pn=new A,Yt=new A,ze=new A,be=new A,yr=new A,Ln=new A,On=new A,Dn=new A,Vn=new Ft,Un=new Ft,kn=new Ft;class wt{constructor(t=new A,e=new A,s=new A){this.a=t,this.b=e,this.c=s}static getNormal(t,e,s,n){n.subVectors(s,e),It.subVectors(t,e),n.cross(It);const i=n.lengthSq();return i>0?n.multiplyScalar(1/Math.sqrt(i)):n.set(0,0,0)}static getBarycoord(t,e,s,n,i){It.subVectors(n,e),Xt.subVectors(s,e),Pn.subVectors(t,e);const o=It.dot(It),a=It.dot(Xt),c=It.dot(Pn),u=Xt.dot(Xt),h=Xt.dot(Pn),l=o*u-a*a;if(l===0)return i.set(0,0,0),null;const d=1/l,f=(u*c-a*h)*d,p=(o*h-a*c)*d;return i.set(1-f-p,p,f)}static containsPoint(t,e,s,n){return this.getBarycoord(t,e,s,n,Yt)===null?!1:Yt.x>=0&&Yt.y>=0&&Yt.x+Yt.y<=1}static getInterpolation(t,e,s,n,i,o,a,c){return this.getBarycoord(t,e,s,n,Yt)===null?(c.x=0,c.y=0,"z"in c&&(c.z=0),"w"in c&&(c.w=0),null):(c.setScalar(0),c.addScaledVector(i,Yt.x),c.addScaledVector(o,Yt.y),c.addScaledVector(a,Yt.z),c)}static getInterpolatedAttribute(t,e,s,n,i,o){return Vn.setScalar(0),Un.setScalar(0),kn.setScalar(0),Vn.fromBufferAttribute(t,e),Un.fromBufferAttribute(t,s),kn.fromBufferAttribute(t,n),o.setScalar(0),o.addScaledVector(Vn,i.x),o.addScaledVector(Un,i.y),o.addScaledVector(kn,i.z),o}static isFrontFacing(t,e,s,n){return It.subVectors(s,e),Xt.subVectors(t,e),It.cross(Xt).dot(n)<0}set(t,e,s){return this.a.copy(t),this.b.copy(e),this.c.copy(s),this}setFromPointsAndIndices(t,e,s,n){return this.a.copy(t[e]),this.b.copy(t[s]),this.c.copy(t[n]),this}setFromAttributeAndIndices(t,e,s,n){return this.a.fromBufferAttribute(t,e),this.b.fromBufferAttribute(t,s),this.c.fromBufferAttribute(t,n),this}clone(){return new this.constructor().copy(this)}copy(t){return this.a.copy(t.a),this.b.copy(t.b),this.c.copy(t.c),this}getArea(){return It.subVectors(this.c,this.b),Xt.subVectors(this.a,this.b),It.cross(Xt).length()*.5}getMidpoint(t){return t.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(t){return wt.getNormal(this.a,this.b,this.c,t)}getPlane(t){return t.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(t,e){return wt.getBarycoord(t,this.a,this.b,this.c,e)}getInterpolation(t,e,s,n,i){return wt.getInterpolation(t,this.a,this.b,this.c,e,s,n,i)}containsPoint(t){return wt.containsPoint(t,this.a,this.b,this.c)}isFrontFacing(t){return wt.isFrontFacing(this.a,this.b,this.c,t)}intersectsBox(t){return t.intersectsTriangle(this)}closestPointToPoint(t,e){const s=this.a,n=this.b,i=this.c;let o,a;ze.subVectors(n,s),be.subVectors(i,s),Ln.subVectors(t,s);const c=ze.dot(Ln),u=be.dot(Ln);if(c<=0&&u<=0)return e.copy(s);On.subVectors(t,n);const h=ze.dot(On),l=be.dot(On);if(h>=0&&l<=h)return e.copy(n);const d=c*l-h*u;if(d<=0&&c>=0&&h<=0)return o=c/(c-h),e.copy(s).addScaledVector(ze,o);Dn.subVectors(t,i);const f=ze.dot(Dn),p=be.dot(Dn);if(p>=0&&f<=p)return e.copy(i);const m=f*u-c*p;if(m<=0&&u>=0&&p<=0)return a=u/(u-p),e.copy(s).addScaledVector(be,a);const g=h*p-f*l;if(g<=0&&l-h>=0&&f-p>=0)return yr.subVectors(i,n),a=(l-h)/(l-h+(f-p)),e.copy(n).addScaledVector(yr,a);const y=1/(g+m+d);return o=m*y,a=d*y,e.copy(s).addScaledVector(ze,o).addScaledVector(be,a)}equals(t){return t.a.equals(this.a)&&t.b.equals(this.b)&&t.c.equals(this.c)}}const gr={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},ie={h:0,s:0,l:0},Ls={h:0,s:0,l:0};function Hn(r,t,e){return e<0&&(e+=1),e>1&&(e-=1),e<1/6?r+(t-r)*6*e:e<1/2?t:e<2/3?r+(t-r)*6*(2/3-e):r}class qn{constructor(t,e,s){return this.isColor=!0,this.r=1,this.g=1,this.b=1,this.set(t,e,s)}set(t,e,s){if(e===void 0&&s===void 0){const n=t;n&&n.isColor?this.copy(n):typeof n=="number"?this.setHex(n):typeof n=="string"&&this.setStyle(n)}else this.setRGB(t,e,s);return this}setScalar(t){return this.r=t,this.g=t,this.b=t,this}setHex(t,e=$t){return t=Math.floor(t),this.r=(t>>16&255)/255,this.g=(t>>8&255)/255,this.b=(t&255)/255,mt.toWorkingColorSpace(this,e),this}setRGB(t,e,s,n=mt.workingColorSpace){return this.r=t,this.g=e,this.b=s,mt.toWorkingColorSpace(this,n),this}setHSL(t,e,s,n=mt.workingColorSpace){if(t=bn(t,1),e=at(e,0,1),s=at(s,0,1),e===0)this.r=this.g=this.b=s;else{const i=s<=.5?s*(1+e):s+e-s*e,o=2*s-i;this.r=Hn(o,i,t+1/3),this.g=Hn(o,i,t),this.b=Hn(o,i,t-1/3)}return mt.toWorkingColorSpace(this,n),this}setStyle(t,e=$t){function s(i){i!==void 0&&parseFloat(i)<1&&console.warn("THREE.Color: Alpha component of "+t+" will be ignored.")}let n;if(n=/^(\w+)\(([^\)]*)\)/.exec(t)){let i;const o=n[1],a=n[2];switch(o){case"rgb":case"rgba":if(i=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return s(i[4]),this.setRGB(Math.min(255,parseInt(i[1],10))/255,Math.min(255,parseInt(i[2],10))/255,Math.min(255,parseInt(i[3],10))/255,e);if(i=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return s(i[4]),this.setRGB(Math.min(100,parseInt(i[1],10))/100,Math.min(100,parseInt(i[2],10))/100,Math.min(100,parseInt(i[3],10))/100,e);break;case"hsl":case"hsla":if(i=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return s(i[4]),this.setHSL(parseFloat(i[1])/360,parseFloat(i[2])/100,parseFloat(i[3])/100,e);break;default:console.warn("THREE.Color: Unknown color model "+t)}}else if(n=/^\#([A-Fa-f\d]+)$/.exec(t)){const i=n[1],o=i.length;if(o===3)return this.setRGB(parseInt(i.charAt(0),16)/15,parseInt(i.charAt(1),16)/15,parseInt(i.charAt(2),16)/15,e);if(o===6)return this.setHex(parseInt(i,16),e);console.warn("THREE.Color: Invalid hex color "+t)}else if(t&&t.length>0)return this.setColorName(t,e);return this}setColorName(t,e=$t){const s=gr[t.toLowerCase()];return s!==void 0?this.setHex(s,e):console.warn("THREE.Color: Unknown color "+t),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(t){return this.r=t.r,this.g=t.g,this.b=t.b,this}copySRGBToLinear(t){return this.r=xe(t.r),this.g=xe(t.g),this.b=xe(t.b),this}copyLinearToSRGB(t){return this.r=Cn(t.r),this.g=Cn(t.g),this.b=Cn(t.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(t=$t){return mt.fromWorkingColorSpace(ct.copy(this),t),Math.round(at(ct.r*255,0,255))*65536+Math.round(at(ct.g*255,0,255))*256+Math.round(at(ct.b*255,0,255))}getHexString(t=$t){return("000000"+this.getHex(t).toString(16)).slice(-6)}getHSL(t,e=mt.workingColorSpace){mt.fromWorkingColorSpace(ct.copy(this),e);const s=ct.r,n=ct.g,i=ct.b,o=Math.max(s,n,i),a=Math.min(s,n,i);let c,u;const h=(a+o)/2;if(a===o)c=0,u=0;else{const l=o-a;switch(u=h<=.5?l/(o+a):l/(2-o-a),o){case s:c=(n-i)/l+(n<i?6:0);break;case n:c=(i-s)/l+2;break;case i:c=(s-n)/l+4;break}c/=6}return t.h=c,t.s=u,t.l=h,t}getRGB(t,e=mt.workingColorSpace){return mt.fromWorkingColorSpace(ct.copy(this),e),t.r=ct.r,t.g=ct.g,t.b=ct.b,t}getStyle(t=$t){mt.fromWorkingColorSpace(ct.copy(this),t);const e=ct.r,s=ct.g,n=ct.b;return t!==$t?`color(${t} ${e.toFixed(3)} ${s.toFixed(3)} ${n.toFixed(3)})`:`rgb(${Math.round(e*255)},${Math.round(s*255)},${Math.round(n*255)})`}offsetHSL(t,e,s){return this.getHSL(ie),this.setHSL(ie.h+t,ie.s+e,ie.l+s)}add(t){return this.r+=t.r,this.g+=t.g,this.b+=t.b,this}addColors(t,e){return this.r=t.r+e.r,this.g=t.g+e.g,this.b=t.b+e.b,this}addScalar(t){return this.r+=t,this.g+=t,this.b+=t,this}sub(t){return this.r=Math.max(0,this.r-t.r),this.g=Math.max(0,this.g-t.g),this.b=Math.max(0,this.b-t.b),this}multiply(t){return this.r*=t.r,this.g*=t.g,this.b*=t.b,this}multiplyScalar(t){return this.r*=t,this.g*=t,this.b*=t,this}lerp(t,e){return this.r+=(t.r-this.r)*e,this.g+=(t.g-this.g)*e,this.b+=(t.b-this.b)*e,this}lerpColors(t,e,s){return this.r=t.r+(e.r-t.r)*s,this.g=t.g+(e.g-t.g)*s,this.b=t.b+(e.b-t.b)*s,this}lerpHSL(t,e){this.getHSL(ie),t.getHSL(Ls);const s=Je(ie.h,Ls.h,e),n=Je(ie.s,Ls.s,e),i=Je(ie.l,Ls.l,e);return this.setHSL(s,n,i),this}setFromVector3(t){return this.r=t.x,this.g=t.y,this.b=t.z,this}applyMatrix3(t){const e=this.r,s=this.g,n=this.b,i=t.elements;return this.r=i[0]*e+i[3]*s+i[6]*n,this.g=i[1]*e+i[4]*s+i[7]*n,this.b=i[2]*e+i[5]*s+i[8]*n,this}equals(t){return t.r===this.r&&t.g===this.g&&t.b===this.b}fromArray(t,e=0){return this.r=t[e],this.g=t[e+1],this.b=t[e+2],this}toArray(t=[],e=0){return t[e]=this.r,t[e+1]=this.g,t[e+2]=this.b,t}fromBufferAttribute(t,e){return this.r=t.getX(e),this.g=t.getY(e),this.b=t.getZ(e),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}}const ct=new qn;qn.NAMES=gr;const j=new A,Os=new J;class vt{constructor(t,e,s=!1){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,this.name="",this.array=t,this.itemSize=e,this.count=t!==void 0?t.length/e:0,this.normalized=s,this.usage=Cs,this.updateRanges=[],this.gpuType=Io,this.version=0}onUploadCallback(){}set needsUpdate(t){t===!0&&this.version++}setUsage(t){return this.usage=t,this}addUpdateRange(t,e){this.updateRanges.push({start:t,count:e})}clearUpdateRanges(){this.updateRanges.length=0}copy(t){return this.name=t.name,this.array=new t.array.constructor(t.array),this.itemSize=t.itemSize,this.count=t.count,this.normalized=t.normalized,this.usage=t.usage,this.gpuType=t.gpuType,this}copyAt(t,e,s){t*=this.itemSize,s*=e.itemSize;for(let n=0,i=this.itemSize;n<i;n++)this.array[t+n]=e.array[s+n];return this}copyArray(t){return this.array.set(t),this}applyMatrix3(t){if(this.itemSize===2)for(let e=0,s=this.count;e<s;e++)Os.fromBufferAttribute(this,e),Os.applyMatrix3(t),this.setXY(e,Os.x,Os.y);else if(this.itemSize===3)for(let e=0,s=this.count;e<s;e++)j.fromBufferAttribute(this,e),j.applyMatrix3(t),this.setXYZ(e,j.x,j.y,j.z);return this}applyMatrix4(t){for(let e=0,s=this.count;e<s;e++)j.fromBufferAttribute(this,e),j.applyMatrix4(t),this.setXYZ(e,j.x,j.y,j.z);return this}applyNormalMatrix(t){for(let e=0,s=this.count;e<s;e++)j.fromBufferAttribute(this,e),j.applyNormalMatrix(t),this.setXYZ(e,j.x,j.y,j.z);return this}transformDirection(t){for(let e=0,s=this.count;e<s;e++)j.fromBufferAttribute(this,e),j.transformDirection(t),this.setXYZ(e,j.x,j.y,j.z);return this}set(t,e=0){return this.array.set(t,e),this}getComponent(t,e){let s=this.array[t*this.itemSize+e];return this.normalized&&(s=Et(s,this.array)),s}setComponent(t,e,s){return this.normalized&&(s=$(s,this.array)),this.array[t*this.itemSize+e]=s,this}getX(t){let e=this.array[t*this.itemSize];return this.normalized&&(e=Et(e,this.array)),e}setX(t,e){return this.normalized&&(e=$(e,this.array)),this.array[t*this.itemSize]=e,this}getY(t){let e=this.array[t*this.itemSize+1];return this.normalized&&(e=Et(e,this.array)),e}setY(t,e){return this.normalized&&(e=$(e,this.array)),this.array[t*this.itemSize+1]=e,this}getZ(t){let e=this.array[t*this.itemSize+2];return this.normalized&&(e=Et(e,this.array)),e}setZ(t,e){return this.normalized&&(e=$(e,this.array)),this.array[t*this.itemSize+2]=e,this}getW(t){let e=this.array[t*this.itemSize+3];return this.normalized&&(e=Et(e,this.array)),e}setW(t,e){return this.normalized&&(e=$(e,this.array)),this.array[t*this.itemSize+3]=e,this}setXY(t,e,s){return t*=this.itemSize,this.normalized&&(e=$(e,this.array),s=$(s,this.array)),this.array[t+0]=e,this.array[t+1]=s,this}setXYZ(t,e,s,n){return t*=this.itemSize,this.normalized&&(e=$(e,this.array),s=$(s,this.array),n=$(n,this.array)),this.array[t+0]=e,this.array[t+1]=s,this.array[t+2]=n,this}setXYZW(t,e,s,n,i){return t*=this.itemSize,this.normalized&&(e=$(e,this.array),s=$(s,this.array),n=$(n,this.array),i=$(i,this.array)),this.array[t+0]=e,this.array[t+1]=s,this.array[t+2]=n,this.array[t+3]=i,this}onUpload(t){return this.onUploadCallback=t,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const t={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return this.name!==""&&(t.name=this.name),this.usage!==Cs&&(t.usage=this.usage),t}}class ma extends vt{constructor(t,e,s){super(new Uint16Array(t),e,s)}}class ya extends vt{constructor(t,e,s){super(new Uint32Array(t),e,s)}}class ga extends vt{constructor(t,e,s){super(new Float32Array(t),e,s)}}let xa=0;const At=new nt,$n=new ne,Ee=new A,gt=new ht,ss=new ht,it=new A;class Gn extends Ze{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:xa++}),this.uuid=Kt(),this.name="",this.type="BufferGeometry",this.index=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(t){return Array.isArray(t)?this.index=new(sa(t)?ya:ma)(t,1):this.index=t,this}getAttribute(t){return this.attributes[t]}setAttribute(t,e){return this.attributes[t]=e,this}deleteAttribute(t){return delete this.attributes[t],this}hasAttribute(t){return this.attributes[t]!==void 0}addGroup(t,e,s=0){this.groups.push({start:t,count:e,materialIndex:s})}clearGroups(){this.groups=[]}setDrawRange(t,e){this.drawRange.start=t,this.drawRange.count=e}applyMatrix4(t){const e=this.attributes.position;e!==void 0&&(e.applyMatrix4(t),e.needsUpdate=!0);const s=this.attributes.normal;if(s!==void 0){const i=new Ct().getNormalMatrix(t);s.applyNormalMatrix(i),s.needsUpdate=!0}const n=this.attributes.tangent;return n!==void 0&&(n.transformDirection(t),n.needsUpdate=!0),this.boundingBox!==null&&this.computeBoundingBox(),this.boundingSphere!==null&&this.computeBoundingSphere(),this}applyQuaternion(t){return At.makeRotationFromQuaternion(t),this.applyMatrix4(At),this}rotateX(t){return At.makeRotationX(t),this.applyMatrix4(At),this}rotateY(t){return At.makeRotationY(t),this.applyMatrix4(At),this}rotateZ(t){return At.makeRotationZ(t),this.applyMatrix4(At),this}translate(t,e,s){return At.makeTranslation(t,e,s),this.applyMatrix4(At),this}scale(t,e,s){return At.makeScale(t,e,s),this.applyMatrix4(At),this}lookAt(t){return $n.lookAt(t),$n.updateMatrix(),this.applyMatrix4($n.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(Ee).negate(),this.translate(Ee.x,Ee.y,Ee.z),this}setFromPoints(t){const e=[];for(let s=0,n=t.length;s<n;s++){const i=t[s];e.push(i.x,i.y,i.z||0)}return this.setAttribute("position",new ga(e,3)),this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new ht);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.",this),this.boundingBox.set(new A(-1/0,-1/0,-1/0),new A(1/0,1/0,1/0));return}if(t!==void 0){if(this.boundingBox.setFromBufferAttribute(t),e)for(let s=0,n=e.length;s<n;s++){const i=e[s];gt.setFromBufferAttribute(i),this.morphTargetsRelative?(it.addVectors(this.boundingBox.min,gt.min),this.boundingBox.expandByPoint(it),it.addVectors(this.boundingBox.max,gt.max),this.boundingBox.expandByPoint(it)):(this.boundingBox.expandByPoint(gt.min),this.boundingBox.expandByPoint(gt.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new cr);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.",this),this.boundingSphere.set(new A,1/0);return}if(t){const s=this.boundingSphere.center;if(gt.setFromBufferAttribute(t),e)for(let i=0,o=e.length;i<o;i++){const a=e[i];ss.setFromBufferAttribute(a),this.morphTargetsRelative?(it.addVectors(gt.min,ss.min),gt.expandByPoint(it),it.addVectors(gt.max,ss.max),gt.expandByPoint(it)):(gt.expandByPoint(ss.min),gt.expandByPoint(ss.max))}gt.getCenter(s);let n=0;for(let i=0,o=t.count;i<o;i++)it.fromBufferAttribute(t,i),n=Math.max(n,s.distanceToSquared(it));if(e)for(let i=0,o=e.length;i<o;i++){const a=e[i],c=this.morphTargetsRelative;for(let u=0,h=a.count;u<h;u++)it.fromBufferAttribute(a,u),c&&(Ee.fromBufferAttribute(t,u),it.add(Ee)),n=Math.max(n,s.distanceToSquared(it))}this.boundingSphere.radius=Math.sqrt(n),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const t=this.index,e=this.attributes;if(t===null||e.position===void 0||e.normal===void 0||e.uv===void 0){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const s=e.position,n=e.normal,i=e.uv;this.hasAttribute("tangent")===!1&&this.setAttribute("tangent",new vt(new Float32Array(4*s.count),4));const o=this.getAttribute("tangent"),a=[],c=[];for(let E=0;E<s.count;E++)a[E]=new A,c[E]=new A;const u=new A,h=new A,l=new A,d=new J,f=new J,p=new J,m=new A,g=new A;function y(E,F,R){u.fromBufferAttribute(s,E),h.fromBufferAttribute(s,F),l.fromBufferAttribute(s,R),d.fromBufferAttribute(i,E),f.fromBufferAttribute(i,F),p.fromBufferAttribute(i,R),h.sub(u),l.sub(u),f.sub(d),p.sub(d);const I=1/(f.x*p.y-p.x*f.y);isFinite(I)&&(m.copy(h).multiplyScalar(p.y).addScaledVector(l,-f.y).multiplyScalar(I),g.copy(l).multiplyScalar(f.x).addScaledVector(h,-p.x).multiplyScalar(I),a[E].add(m),a[F].add(m),a[R].add(m),c[E].add(g),c[F].add(g),c[R].add(g))}let T=this.groups;T.length===0&&(T=[{start:0,count:t.count}]);for(let E=0,F=T.length;E<F;++E){const R=T[E],I=R.start,B=R.count;for(let P=I,L=I+B;P<L;P+=3)y(t.getX(P+0),t.getX(P+1),t.getX(P+2))}const w=new A,M=new A,N=new A,_=new A;function S(E){N.fromBufferAttribute(n,E),_.copy(N);const F=a[E];w.copy(F),w.sub(N.multiplyScalar(N.dot(F))).normalize(),M.crossVectors(_,F);const I=M.dot(c[E])<0?-1:1;o.setXYZW(E,w.x,w.y,w.z,I)}for(let E=0,F=T.length;E<F;++E){const R=T[E],I=R.start,B=R.count;for(let P=I,L=I+B;P<L;P+=3)S(t.getX(P+0)),S(t.getX(P+1)),S(t.getX(P+2))}}computeVertexNormals(){const t=this.index,e=this.getAttribute("position");if(e!==void 0){let s=this.getAttribute("normal");if(s===void 0)s=new vt(new Float32Array(e.count*3),3),this.setAttribute("normal",s);else for(let d=0,f=s.count;d<f;d++)s.setXYZ(d,0,0,0);const n=new A,i=new A,o=new A,a=new A,c=new A,u=new A,h=new A,l=new A;if(t)for(let d=0,f=t.count;d<f;d+=3){const p=t.getX(d+0),m=t.getX(d+1),g=t.getX(d+2);n.fromBufferAttribute(e,p),i.fromBufferAttribute(e,m),o.fromBufferAttribute(e,g),h.subVectors(o,i),l.subVectors(n,i),h.cross(l),a.fromBufferAttribute(s,p),c.fromBufferAttribute(s,m),u.fromBufferAttribute(s,g),a.add(h),c.add(h),u.add(h),s.setXYZ(p,a.x,a.y,a.z),s.setXYZ(m,c.x,c.y,c.z),s.setXYZ(g,u.x,u.y,u.z)}else for(let d=0,f=e.count;d<f;d+=3)n.fromBufferAttribute(e,d+0),i.fromBufferAttribute(e,d+1),o.fromBufferAttribute(e,d+2),h.subVectors(o,i),l.subVectors(n,i),h.cross(l),s.setXYZ(d+0,h.x,h.y,h.z),s.setXYZ(d+1,h.x,h.y,h.z),s.setXYZ(d+2,h.x,h.y,h.z);this.normalizeNormals(),s.needsUpdate=!0}}normalizeNormals(){const t=this.attributes.normal;for(let e=0,s=t.count;e<s;e++)it.fromBufferAttribute(t,e),it.normalize(),t.setXYZ(e,it.x,it.y,it.z)}toNonIndexed(){function t(a,c){const u=a.array,h=a.itemSize,l=a.normalized,d=new u.constructor(c.length*h);let f=0,p=0;for(let m=0,g=c.length;m<g;m++){a.isInterleavedBufferAttribute?f=c[m]*a.data.stride+a.offset:f=c[m]*h;for(let y=0;y<h;y++)d[p++]=u[f++]}return new vt(d,h,l)}if(this.index===null)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const e=new Gn,s=this.index.array,n=this.attributes;for(const a in n){const c=n[a],u=t(c,s);e.setAttribute(a,u)}const i=this.morphAttributes;for(const a in i){const c=[],u=i[a];for(let h=0,l=u.length;h<l;h++){const d=u[h],f=t(d,s);c.push(f)}e.morphAttributes[a]=c}e.morphTargetsRelative=this.morphTargetsRelative;const o=this.groups;for(let a=0,c=o.length;a<c;a++){const u=o[a];e.addGroup(u.start,u.count,u.materialIndex)}return e}toJSON(){const t={metadata:{version:4.6,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(t.uuid=this.uuid,t.type=this.type,this.name!==""&&(t.name=this.name),Object.keys(this.userData).length>0&&(t.userData=this.userData),this.parameters!==void 0){const c=this.parameters;for(const u in c)c[u]!==void 0&&(t[u]=c[u]);return t}t.data={attributes:{}};const e=this.index;e!==null&&(t.data.index={type:e.array.constructor.name,array:Array.prototype.slice.call(e.array)});const s=this.attributes;for(const c in s){const u=s[c];t.data.attributes[c]=u.toJSON(t.data)}const n={};let i=!1;for(const c in this.morphAttributes){const u=this.morphAttributes[c],h=[];for(let l=0,d=u.length;l<d;l++){const f=u[l];h.push(f.toJSON(t.data))}h.length>0&&(n[c]=h,i=!0)}i&&(t.data.morphAttributes=n,t.data.morphTargetsRelative=this.morphTargetsRelative);const o=this.groups;o.length>0&&(t.data.groups=JSON.parse(JSON.stringify(o)));const a=this.boundingSphere;return a!==null&&(t.data.boundingSphere={center:a.center.toArray(),radius:a.radius}),t}clone(){return new this.constructor().copy(this)}copy(t){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const e={};this.name=t.name;const s=t.index;s!==null&&this.setIndex(s.clone(e));const n=t.attributes;for(const u in n){const h=n[u];this.setAttribute(u,h.clone(e))}const i=t.morphAttributes;for(const u in i){const h=[],l=i[u];for(let d=0,f=l.length;d<f;d++)h.push(l[d].clone(e));this.morphAttributes[u]=h}this.morphTargetsRelative=t.morphTargetsRelative;const o=t.groups;for(let u=0,h=o.length;u<h;u++){const l=o[u];this.addGroup(l.start,l.count,l.materialIndex)}const a=t.boundingBox;a!==null&&(this.boundingBox=a.clone());const c=t.boundingSphere;return c!==null&&(this.boundingSphere=c.clone()),this.drawRange.start=t.drawRange.start,this.drawRange.count=t.drawRange.count,this.userData=t.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}}const Wn=new A,Ta=new A,Na=new Ct;class Xn{constructor(t=new A(1,0,0),e=0){this.isPlane=!0,this.normal=t,this.constant=e}set(t,e){return this.normal.copy(t),this.constant=e,this}setComponents(t,e,s,n){return this.normal.set(t,e,s),this.constant=n,this}setFromNormalAndCoplanarPoint(t,e){return this.normal.copy(t),this.constant=-e.dot(this.normal),this}setFromCoplanarPoints(t,e,s){const n=Wn.subVectors(s,e).cross(Ta.subVectors(t,e)).normalize();return this.setFromNormalAndCoplanarPoint(n,t),this}copy(t){return this.normal.copy(t.normal),this.constant=t.constant,this}normalize(){const t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(t){return this.normal.dot(t)+this.constant}distanceToSphere(t){return this.distanceToPoint(t.center)-t.radius}projectPoint(t,e){return e.copy(t).addScaledVector(this.normal,-this.distanceToPoint(t))}intersectLine(t,e){const s=t.delta(Wn),n=this.normal.dot(s);if(n===0)return this.distanceToPoint(t.start)===0?e.copy(t.start):null;const i=-(t.start.dot(this.normal)+this.constant)/n;return i<0||i>1?null:e.copy(t.start).addScaledVector(s,i)}intersectsLine(t){const e=this.distanceToPoint(t.start),s=this.distanceToPoint(t.end);return e<0&&s>0||s<0&&e>0}intersectsBox(t){return t.intersectsPlane(this)}intersectsSphere(t){return t.intersectsPlane(this)}coplanarPoint(t){return t.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(t,e){const s=e||Na.getNormalMatrix(t),n=this.coplanarPoint(Wn).applyMatrix4(t),i=this.normal.applyMatrix3(s).normalize();return this.constant=-n.dot(i),this}translate(t){return this.constant-=t.dot(this.normal),this}equals(t){return t.normal.equals(this.normal)&&t.constant===this.constant}clone(){return new this.constructor().copy(this)}}class xr extends Dt{constructor(t,e,s,n,i,o,a,c,u,h=Sn){if(h!==Sn&&h!==Xi)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");s===void 0&&h===Sn&&(s=Wi),s===void 0&&h===Xi&&(s=Po),super(null,n,i,o,a,c,h,s,u),this.isDepthTexture=!0,this.image={width:t,height:e},this.magFilter=a!==void 0?a:zs,this.minFilter=c!==void 0?c:zs,this.flipY=!1,this.generateMipmaps=!1,this.compareFunction=null}copy(t){return super.copy(t),this.compareFunction=t.compareFunction,this}toJSON(t){const e=super.toJSON(t);return this.compareFunction!==null&&(e.compareFunction=this.compareFunction),e}}class wa{constructor(t,e){this.isInterleavedBuffer=!0,this.array=t,this.stride=e,this.count=t!==void 0?t.length/e:0,this.usage=Cs,this.updateRanges=[],this.version=0,this.uuid=Kt()}onUploadCallback(){}set needsUpdate(t){t===!0&&this.version++}setUsage(t){return this.usage=t,this}addUpdateRange(t,e){this.updateRanges.push({start:t,count:e})}clearUpdateRanges(){this.updateRanges.length=0}copy(t){return this.array=new t.array.constructor(t.array),this.count=t.count,this.stride=t.stride,this.usage=t.usage,this}copyAt(t,e,s){t*=this.stride,s*=e.stride;for(let n=0,i=this.stride;n<i;n++)this.array[t+n]=e.array[s+n];return this}set(t,e=0){return this.array.set(t,e),this}clone(t){t.arrayBuffers===void 0&&(t.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=Kt()),t.arrayBuffers[this.array.buffer._uuid]===void 0&&(t.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const e=new this.array.constructor(t.arrayBuffers[this.array.buffer._uuid]),s=new this.constructor(e,this.stride);return s.setUsage(this.usage),s}onUpload(t){return this.onUploadCallback=t,this}toJSON(t){return t.arrayBuffers===void 0&&(t.arrayBuffers={}),this.array.buffer._uuid===void 0&&(this.array.buffer._uuid=Kt()),t.arrayBuffers[this.array.buffer._uuid]===void 0&&(t.arrayBuffers[this.array.buffer._uuid]=Array.from(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}}const ut=new A;class Yn{constructor(t,e,s,n=!1){this.isInterleavedBufferAttribute=!0,this.name="",this.data=t,this.itemSize=e,this.offset=s,this.normalized=n}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(t){this.data.needsUpdate=t}applyMatrix4(t){for(let e=0,s=this.data.count;e<s;e++)ut.fromBufferAttribute(this,e),ut.applyMatrix4(t),this.setXYZ(e,ut.x,ut.y,ut.z);return this}applyNormalMatrix(t){for(let e=0,s=this.count;e<s;e++)ut.fromBufferAttribute(this,e),ut.applyNormalMatrix(t),this.setXYZ(e,ut.x,ut.y,ut.z);return this}transformDirection(t){for(let e=0,s=this.count;e<s;e++)ut.fromBufferAttribute(this,e),ut.transformDirection(t),this.setXYZ(e,ut.x,ut.y,ut.z);return this}getComponent(t,e){let s=this.array[t*this.data.stride+this.offset+e];return this.normalized&&(s=Et(s,this.array)),s}setComponent(t,e,s){return this.normalized&&(s=$(s,this.array)),this.data.array[t*this.data.stride+this.offset+e]=s,this}setX(t,e){return this.normalized&&(e=$(e,this.array)),this.data.array[t*this.data.stride+this.offset]=e,this}setY(t,e){return this.normalized&&(e=$(e,this.array)),this.data.array[t*this.data.stride+this.offset+1]=e,this}setZ(t,e){return this.normalized&&(e=$(e,this.array)),this.data.array[t*this.data.stride+this.offset+2]=e,this}setW(t,e){return this.normalized&&(e=$(e,this.array)),this.data.array[t*this.data.stride+this.offset+3]=e,this}getX(t){let e=this.data.array[t*this.data.stride+this.offset];return this.normalized&&(e=Et(e,this.array)),e}getY(t){let e=this.data.array[t*this.data.stride+this.offset+1];return this.normalized&&(e=Et(e,this.array)),e}getZ(t){let e=this.data.array[t*this.data.stride+this.offset+2];return this.normalized&&(e=Et(e,this.array)),e}getW(t){let e=this.data.array[t*this.data.stride+this.offset+3];return this.normalized&&(e=Et(e,this.array)),e}setXY(t,e,s){return t=t*this.data.stride+this.offset,this.normalized&&(e=$(e,this.array),s=$(s,this.array)),this.data.array[t+0]=e,this.data.array[t+1]=s,this}setXYZ(t,e,s,n){return t=t*this.data.stride+this.offset,this.normalized&&(e=$(e,this.array),s=$(s,this.array),n=$(n,this.array)),this.data.array[t+0]=e,this.data.array[t+1]=s,this.data.array[t+2]=n,this}setXYZW(t,e,s,n,i){return t=t*this.data.stride+this.offset,this.normalized&&(e=$(e,this.array),s=$(s,this.array),n=$(n,this.array),i=$(i,this.array)),this.data.array[t+0]=e,this.data.array[t+1]=s,this.data.array[t+2]=n,this.data.array[t+3]=i,this}clone(t){if(t===void 0){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");const e=[];for(let s=0;s<this.count;s++){const n=s*this.data.stride+this.offset;for(let i=0;i<this.itemSize;i++)e.push(this.data.array[n+i])}return new vt(new this.array.constructor(e),this.itemSize,this.normalized)}else return t.interleavedBuffers===void 0&&(t.interleavedBuffers={}),t.interleavedBuffers[this.data.uuid]===void 0&&(t.interleavedBuffers[this.data.uuid]=this.data.clone(t)),new Yn(t.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}toJSON(t){if(t===void 0){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");const e=[];for(let s=0;s<this.count;s++){const n=s*this.data.stride+this.offset;for(let i=0;i<this.itemSize;i++)e.push(this.data.array[n+i])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:e,normalized:this.normalized}}else return t.interleavedBuffers===void 0&&(t.interleavedBuffers={}),t.interleavedBuffers[this.data.uuid]===void 0&&(t.interleavedBuffers[this.data.uuid]=this.data.toJSON(t)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}}class Aa extends Dt{constructor(t,e){super({width:t,height:e}),this.isFramebufferTexture=!0,this.magFilter=zs,this.minFilter=zs,this.generateMipmaps=!1,this.needsUpdate=!0}}const Tr=new A,Ds=new A;class Zt{constructor(t=new A,e=new A){this.start=t,this.end=e}set(t,e){return this.start.copy(t),this.end.copy(e),this}copy(t){return this.start.copy(t.start),this.end.copy(t.end),this}getCenter(t){return t.addVectors(this.start,this.end).multiplyScalar(.5)}delta(t){return t.subVectors(this.end,this.start)}distanceSq(){return this.start.distanceToSquared(this.end)}distance(){return this.start.distanceTo(this.end)}at(t,e){return this.delta(e).multiplyScalar(t).add(this.start)}closestPointToPointParameter(t,e){Tr.subVectors(t,this.start),Ds.subVectors(this.end,this.start);const s=Ds.dot(Ds);let i=Ds.dot(Tr)/s;return e&&(i=at(i,0,1)),i}closestPointToPoint(t,e,s){const n=this.closestPointToPointParameter(t,e);return this.delta(s).multiplyScalar(n).add(this.start)}applyMatrix4(t){return this.start.applyMatrix4(t),this.end.applyMatrix4(t),this}equals(t){return t.start.equals(this.start)&&t.end.equals(this.end)}clone(){return new this.constructor().copy(this)}}function Zn(r,t=0){let e=3735928559^t,s=1103547991^t;if(r instanceof Array)for(let n=0,i;n<r.length;n++)i=r[n],e=Math.imul(e^i,2654435761),s=Math.imul(s^i,1597334677);else for(let n=0,i;n<r.length;n++)i=r.charCodeAt(n),e=Math.imul(e^i,2654435761),s=Math.imul(s^i,1597334677);return e=Math.imul(e^e>>>16,2246822507),e^=Math.imul(s^s>>>13,3266489909),s=Math.imul(s^s>>>16,2246822507),s^=Math.imul(e^e>>>13,3266489909),4294967296*(2097151&s)+(e>>>0)}const Ma=(...r)=>Zn(r);function Sa(r,t=!1){const e=[];r.isNode===!0&&(e.push(r.id),r=r.getSelf());for(const{property:s,childNode:n}of Jn(r))e.push(e,Zn(s.slice(0,-4)),n.getCacheKey(t));return Zn(e)}function*Jn(r,t=!1){for(const e in r){if(e.startsWith("_")===!0)continue;const s=r[e];if(Array.isArray(s)===!0)for(let n=0;n<s.length;n++){const i=s[n];i&&(i.isNode===!0||t&&typeof i.toJSON=="function")&&(yield{property:e,index:n,childNode:i})}else if(s&&s.isNode===!0)yield{property:e,childNode:s};else if(typeof s=="object")for(const n in s){const i=s[n];i&&(i.isNode===!0||t&&typeof i.toJSON=="function")&&(yield{property:e,index:n,childNode:i})}}}function Vs(r){if(r==null)return null;const t=typeof r;return r.isNode===!0?"node":t==="number"?"float":t==="boolean"?"bool":t==="string"?"string":t==="function"?"shader":r.isVector2===!0?"vec2":r.isVector3===!0?"vec3":r.isVector4===!0?"vec4":r.isMatrix3===!0?"mat3":r.isMatrix4===!0?"mat4":r.isColor===!0?"color":r instanceof ArrayBuffer?"ArrayBuffer":null}function Nr(r,...t){const e=r?r.slice(-4):void 0;return t.length===1&&(e==="vec2"?t=[t[0],t[0]]:e==="vec3"?t=[t[0],t[0],t[0]]:e==="vec4"&&(t=[t[0],t[0],t[0],t[0]])),r==="color"?new qn(...t):e==="vec2"?new J(...t):e==="vec3"?new A(...t):e==="vec4"?new Ft(...t):e==="mat3"?new Ct(...t):e==="mat4"?new nt(...t):r==="bool"?t[0]||!1:r==="float"||r==="int"||r==="uint"?t[0]||0:r==="string"?t[0]||"":r==="ArrayBuffer"?za(t[0]):null}function _a(r){let t="";const e=new Uint8Array(r);for(let s=0;s<e.length;s++)t+=String.fromCharCode(e[s]);return btoa(t)}function za(r){return Uint8Array.from(atob(r),t=>t.charCodeAt(0)).buffer}const wr={VERTEX:"vertex",FRAGMENT:"fragment"},Q={NONE:"none",FRAME:"frame",RENDER:"render",OBJECT:"object"},ns=["x","y","z","w"];let ba=0;class U extends Ze{static get type(){return"Node"}constructor(t=null){super(),this.nodeType=t,this.updateType=Q.NONE,this.updateBeforeType=Q.NONE,this.updateAfterType=Q.NONE,this.uuid=ea.generateUUID(),this.version=0,this._cacheKey=null,this._cacheKeyVersion=0,this.global=!1,this.isNode=!0,Object.defineProperty(this,"id",{value:ba++})}set needsUpdate(t){t===!0&&this.version++}get type(){return this.constructor.type}onUpdate(t,e){return this.updateType=e,this.update=t.bind(this.getSelf()),this}onFrameUpdate(t){return this.onUpdate(t,Q.FRAME)}onRenderUpdate(t){return this.onUpdate(t,Q.RENDER)}onObjectUpdate(t){return this.onUpdate(t,Q.OBJECT)}onReference(t){return this.updateReference=t.bind(this.getSelf()),this}getSelf(){return this.self||this}updateReference(){return this}isGlobal(){return this.global}*getChildren(){for(const{childNode:t}of Jn(this))yield t}dispose(){this.dispatchEvent({type:"dispose"})}traverse(t){t(this);for(const e of this.getChildren())e.traverse(t)}getCacheKey(t=!1){return t=t||this.version!==this._cacheKeyVersion,(t===!0||this._cacheKey===null)&&(this._cacheKey=Sa(this,t),this._cacheKeyVersion=this.version),this._cacheKey}getScope(){return this}getHash(){return this.uuid}getUpdateType(){return this.updateType}getUpdateBeforeType(){return this.updateBeforeType}getUpdateAfterType(){return this.updateAfterType}getElementType(t){const e=this.getNodeType(t);return t.getElementType(e)}getNodeType(t){const e=t.getNodeProperties(this);return e.outputNode?e.outputNode.getNodeType(t):this.nodeType}getShared(t){const e=this.getHash(t);return t.getNodeFromHash(e)||this}setup(t){const e=t.getNodeProperties(this);let s=0;for(const n of this.getChildren())e["node"+s++]=n;return null}analyze(t){if(t.increaseUsage(this)===1){const s=t.getNodeProperties(this);for(const n of Object.values(s))n&&n.isNode===!0&&n.build(t)}}generate(t,e){const{outputNode:s}=t.getNodeProperties(this);if(s&&s.isNode===!0)return s.build(t,e)}updateBefore(){console.warn("Abstract function.")}updateAfter(){console.warn("Abstract function.")}update(){console.warn("Abstract function.")}build(t,e=null){const s=this.getShared(t);if(this!==s)return s.build(t,e);t.addNode(this),t.addChain(this);let n=null;const i=t.getBuildStage();if(i==="setup"){this.updateReference(t);const o=t.getNodeProperties(this);if(o.initialized!==!0){const a=t.stack.nodes.length;o.initialized=!0,o.outputNode=this.setup(t),o.outputNode!==null&&t.stack.nodes.length;for(const c of Object.values(o))c&&c.isNode===!0&&c.build(t)}}else if(i==="analyze")this.analyze(t);else if(i==="generate")if(this.generate.length===1){const a=this.getNodeType(t),c=t.getDataFromNode(this);n=c.snippet,n===void 0?(n=this.generate(t)||"",c.snippet=n):c.flowCodes!==void 0&&t.context.nodeBlock!==void 0&&t.addFlowCodeHierarchy(this,t.context.nodeBlock),n=t.format(n,a,e)}else n=this.generate(t,e)||"";return t.removeChain(this),n}getSerializeChildren(){return Jn(this)}serialize(t){const e=this.getSerializeChildren(),s={};for(const{property:n,index:i,childNode:o}of e)i!==void 0?(s[n]===void 0&&(s[n]=Number.isInteger(i)?[]:{}),s[n][i]=o.toJSON(t.meta).uuid):s[n]=o.toJSON(t.meta).uuid;Object.keys(s).length>0&&(t.inputNodes=s)}deserialize(t){if(t.inputNodes!==void 0){const e=t.meta.nodes;for(const s in t.inputNodes)if(Array.isArray(t.inputNodes[s])){const n=[];for(const i of t.inputNodes[s])n.push(e[i]);this[s]=n}else if(typeof t.inputNodes[s]=="object"){const n={};for(const i in t.inputNodes[s]){const o=t.inputNodes[s][i];n[i]=e[o]}this[s]=n}else{const n=t.inputNodes[s];this[s]=e[n]}}}toJSON(t){const{uuid:e,type:s}=this,n=t===void 0||typeof t=="string";n&&(t={textures:{},images:{},nodes:{}});let i=t.nodes[e];i===void 0&&(i={uuid:e,type:s,meta:t,metadata:{version:4.6,type:"Node",generator:"Node.toJSON"}},n!==!0&&(t.nodes[i.uuid]=i),this.serialize(i),delete i.meta);function o(a){const c=[];for(const u in a){const h=a[u];delete h.metadata,c.push(h)}return c}if(n){const a=o(t.textures),c=o(t.images),u=o(t.nodes);a.length>0&&(i.textures=a),c.length>0&&(i.images=c),u.length>0&&(i.nodes=u)}return i}}class is extends U{static get type(){return"ArrayElementNode"}constructor(t,e){super(),this.node=t,this.indexNode=e,this.isArrayElementNode=!0}getNodeType(t){return this.node.getElementType(t)}generate(t){const e=this.node.build(t),s=this.indexNode.build(t,"uint");return`${e}[ ${s} ]`}}class Ar extends U{static get type(){return"ConvertNode"}constructor(t,e){super(),this.node=t,this.convertTo=e}getNodeType(t){const e=this.node.getNodeType(t);let s=null;for(const n of this.convertTo.split("|"))(s===null||t.getTypeLength(e)===t.getTypeLength(n))&&(s=n);return s}serialize(t){super.serialize(t),t.convertTo=this.convertTo}deserialize(t){super.deserialize(t),this.convertTo=t.convertTo}generate(t,e){const s=this.node,n=this.getNodeType(t),i=s.build(t,n);return t.format(i,n,e)}}class dt extends U{static get type(){return"TempNode"}constructor(t){super(t),this.isTempNode=!0}hasDependencies(t){return t.getDataFromNode(this).usageCount>1}build(t,e){if(t.getBuildStage()==="generate"){const n=t.getVectorType(this.getNodeType(t,e)),i=t.getDataFromNode(this);if(i.propertyName!==void 0)return t.format(i.propertyName,n,e);if(n!=="void"&&e!=="void"&&this.hasDependencies(t)){const o=super.build(t,n),a=t.getVarFromNode(this,null,n),c=t.getPropertyName(a);return t.addLineFlowCode(`${c} = ${o}`,this),i.snippet=o,i.propertyName=c,t.format(i.propertyName,n,e)}}return super.build(t,e)}}class Ea extends dt{static get type(){return"JoinNode"}constructor(t=[],e=null){super(e),this.nodes=t}getNodeType(t){return this.nodeType!==null?t.getVectorType(this.nodeType):t.getTypeFromLength(this.nodes.reduce((e,s)=>e+t.getTypeLength(s.getNodeType(t)),0))}generate(t,e){const s=this.getNodeType(t),n=this.nodes,i=t.getComponentType(s),o=[];for(const c of n){let u=c.build(t);const h=t.getComponentType(c.getNodeType(t));h!==i&&(u=t.format(u,h,i)),o.push(u)}const a=`${t.getType(s)}( ${o.join(", ")} )`;return t.format(a,s,e)}}const Ca=ns.join("");class Mr extends U{static get type(){return"SplitNode"}constructor(t,e="x"){super(),this.node=t,this.components=e,this.isSplitNode=!0}getVectorLength(){let t=this.components.length;for(const e of this.components)t=Math.max(ns.indexOf(e)+1,t);return t}getComponentType(t){return t.getComponentType(this.node.getNodeType(t))}getNodeType(t){return t.getTypeFromLength(this.components.length,this.getComponentType(t))}generate(t,e){const s=this.node,n=t.getTypeLength(s.getNodeType(t));let i=null;if(n>1){let o=null;this.getVectorLength()>=n&&(o=t.getTypeFromLength(this.getVectorLength(),this.getComponentType(t)));const c=s.build(t,o);this.components.length===n&&this.components===Ca.slice(0,this.components.length)?i=t.format(c,o,e):i=t.format(`${c}.${this.components}`,this.getNodeType(t),e)}else i=s.build(t,e);return i}serialize(t){super.serialize(t),t.components=this.components}deserialize(t){super.deserialize(t),this.components=t.components}}class Fa extends dt{static get type(){return"SetNode"}constructor(t,e,s){super(),this.sourceNode=t,this.components=e,this.targetNode=s}getNodeType(t){return this.sourceNode.getNodeType(t)}generate(t){const{sourceNode:e,components:s,targetNode:n}=this,i=this.getNodeType(t),o=t.getTypeFromLength(s.length,n.getNodeType(t)),a=n.build(t,o),c=e.build(t,i),u=t.getTypeLength(i),h=[];for(let l=0;l<u;l++){const d=ns[l];d===s[0]?(h.push(a),l+=s.length-1):h.push(c+"."+d)}return`${t.getType(i)}( ${h.join(", ")} )`}}class Ra extends dt{static get type(){return"FlipNode"}constructor(t,e){super(),this.sourceNode=t,this.components=e}getNodeType(t){return this.sourceNode.getNodeType(t)}generate(t){const{components:e,sourceNode:s}=this,n=this.getNodeType(t),i=s.build(t),o=t.getVarFromNode(this),a=t.getPropertyName(o);t.addLineFlowCode(a+" = "+i,this);const c=t.getTypeLength(n),u=[];let h=0;for(let l=0;l<c;l++){const d=ns[l];d===e[h]?(u.push("1.0 - "+(a+"."+d)),h++):u.push(a+"."+d)}return`${t.getType(n)}( ${u.join(", ")} )`}}class jn extends U{static get type(){return"InputNode"}constructor(t,e=null){super(e),this.isInputNode=!0,this.value=t,this.precision=null}getNodeType(){return this.nodeType===null?Vs(this.value):this.nodeType}getInputType(t){return this.getNodeType(t)}setPrecision(t){return this.precision=t,this}serialize(t){super.serialize(t),t.value=this.value,this.value&&this.value.toArray&&(t.value=this.value.toArray()),t.valueType=Vs(this.value),t.nodeType=this.nodeType,t.valueType==="ArrayBuffer"&&(t.value=_a(t.value)),t.precision=this.precision}deserialize(t){super.deserialize(t),this.nodeType=t.nodeType,this.value=Array.isArray(t.value)?Nr(t.valueType,...t.value):t.value,this.precision=t.precision||null,this.value&&this.value.fromArray&&(this.value=this.value.fromArray(t.value))}generate(){console.warn("Abstract function.")}}class Jt extends jn{static get type(){return"ConstNode"}constructor(t,e=null){super(t,e),this.isConstNode=!0}generateConst(t){return t.generateConst(this.getNodeType(t),this.value)}generate(t,e){const s=this.getNodeType(t);return t.format(this.generateConst(t),s,e)}}let Sr=null;const Ce=new Map;function b(r,t){if(Ce.has(r)){console.warn(`Redefinition of method chaining ${r}`);return}if(typeof t!="function")throw new Error(`Node element ${r} is not a function`);Ce.set(r,t)}const _r=r=>r.replace(/r|s/g,"x").replace(/g|t/g,"y").replace(/b|p/g,"z").replace(/a|q/g,"w"),zr=r=>_r(r).split("").sort().join(""),br={setup(r,t){const e=t.shift();return r(Hs(e),...t)},get(r,t,e){if(typeof t=="string"&&r[t]===void 0){if(r.isStackNode!==!0&&t==="assign")return(...s)=>(Sr.assign(e,...s),e);if(Ce.has(t)){const s=Ce.get(t);return r.isStackNode?(...n)=>e.add(s(...n)):(...n)=>s(e,...n)}else{if(t==="self")return r;if(t.endsWith("Assign")&&Ce.has(t.slice(0,t.length-6))){const s=Ce.get(t.slice(0,t.length-6));return r.isStackNode?(...n)=>e.assign(n[0],s(...n)):(...n)=>e.assign(s(e,...n))}else{if(/^[xyzwrgbastpq]{1,4}$/.test(t)===!0)return t=_r(t),v(new Mr(e,t));if(/^set[XYZWRGBASTPQ]{1,4}$/.test(t)===!0)return t=zr(t.slice(3).toLowerCase()),s=>v(new Fa(r,t,s));if(/^flip[XYZWRGBASTPQ]{1,4}$/.test(t)===!0)return t=zr(t.slice(4).toLowerCase()),()=>v(new Ra(v(r),t));if(t==="width"||t==="height"||t==="depth")return t==="width"?t="x":t==="height"?t="y":t==="depth"&&(t="z"),v(new Mr(r,t));if(/^\d+$/.test(t)===!0)return v(new is(e,new Jt(Number(t),"uint")))}}}return Reflect.get(r,t,e)},set(r,t,e,s){return typeof t=="string"&&r[t]===void 0&&(/^[xyzwrgbastpq]{1,4}$/.test(t)===!0||t==="width"||t==="height"||t==="depth"||/^\d+$/.test(t)===!0)?(s[t].assign(e),!0):Reflect.set(r,t,e,s)}},Qn=new WeakMap,Er=new WeakMap,Ba=function(r,t=null){const e=Vs(r);if(e==="node"){let s=Qn.get(r);return s===void 0&&(s=new Proxy(r,br),Qn.set(r,s),Qn.set(s,s)),s}else{if(t===null&&(e==="float"||e==="boolean")||e&&e!=="shader"&&e!=="string")return v(si(r,t));if(e==="shader")return tt(r)}return r},Ia=function(r,t=null){for(const e in r)r[e]=v(r[e],t);return r},va=function(r,t=null){const e=r.length;for(let s=0;s<e;s++)r[s]=v(r[s],t);return r},Pa=function(r,t=null,e=null,s=null){const n=i=>v(s!==null?Object.assign(i,s):i);return t===null?(...i)=>n(new r(...Fe(i))):e!==null?(e=v(e),(...i)=>n(new r(t,...Fe(i),e))):(...i)=>n(new r(t,...Fe(i)))},La=function(r,...t){return v(new r(...Fe(t)))};class Oa extends U{constructor(t,e){super(),this.shaderNode=t,this.inputNodes=e}getNodeType(t){return this.shaderNode.nodeType||this.getOutputNode(t).getNodeType(t)}call(t){const{shaderNode:e,inputNodes:s}=this,n=t.getNodeProperties(e);if(n.onceOutput)return n.onceOutput;let i=null;if(e.layout){let o=Er.get(t.constructor);o===void 0&&(o=new WeakMap,Er.set(t.constructor,o));let a=o.get(e);a===void 0&&(a=v(t.buildFunctionNode(e)),o.set(e,a)),t.currentFunctionNode!==null&&t.currentFunctionNode.includes.push(a),i=v(a.call(s))}else{const o=e.jsFunc,a=s!==null?o(s,t):o(t);i=v(a)}return e.once&&(n.onceOutput=i),i}getOutputNode(t){const e=t.getNodeProperties(this);return e.outputNode===null&&(e.outputNode=this.setupOutput(t)),e.outputNode}setup(t){return this.getOutputNode(t)}setupOutput(t){return t.addStack(),t.stack.outputNode=this.call(t),t.removeStack()}generate(t,e){return this.getOutputNode(t).build(t,e)}}class Da extends U{constructor(t,e){super(e),this.jsFunc=t,this.layout=null,this.global=!0,this.once=!1}setLayout(t){return this.layout=t,this}call(t=null){return Hs(t),v(new Oa(this,t))}setup(){return this.call()}}const Va=[!1,!0],Ua=[0,1,2,3],ka=[-1,-2],Cr=[.5,1.5,1/3,1e-6,1e6,Math.PI,Math.PI*2,1/Math.PI,2/Math.PI,1/(Math.PI*2),Math.PI/2],Kn=new Map;for(const r of Va)Kn.set(r,new Jt(r));const ti=new Map;for(const r of Ua)ti.set(r,new Jt(r,"uint"));const ei=new Map([...ti].map(r=>new Jt(r.value,"int")));for(const r of ka)ei.set(r,new Jt(r,"int"));const Us=new Map([...ei].map(r=>new Jt(r.value)));for(const r of Cr)Us.set(r,new Jt(r));for(const r of Cr)Us.set(-r,new Jt(-r));const ks={bool:Kn,uint:ti,ints:ei,float:Us},Fr=new Map([...Kn,...Us]),si=(r,t)=>Fr.has(r)?Fr.get(r):r.isNode===!0?r:new Jt(r,t),Ha=r=>{try{return r.getNodeType()}catch{return}},K=function(r,t=null){return(...e)=>{if((e.length===0||!["bool","float","int","uint"].includes(r)&&e.every(n=>typeof n!="object"))&&(e=[Nr(r,...e)]),e.length===1&&t!==null&&t.has(e[0]))return v(t.get(e[0]));if(e.length===1){const n=si(e[0],r);return Ha(n)===r?v(n):v(new Ar(n,r))}const s=e.map(n=>si(n));return v(new Ea(s,r))}},qa=r=>r!=null?r.nodeType||r.convertTo||(typeof r=="string"?r:null):null;function $a(r,t){return new Proxy(new Da(r,t),br)}const v=(r,t=null)=>Ba(r,t),Hs=(r,t=null)=>new Ia(r,t),Fe=(r,t=null)=>new va(r,t),C=(...r)=>new Pa(...r),O=(...r)=>new La(...r),tt=(r,t)=>{const e=new $a(r,t),s=(...n)=>{let i;return Hs(n),n[0]&&n[0].isNode?i=[...n]:i=n[0],e.call(i)};return s.shaderNode=e,s.setLayout=n=>(e.setLayout(n),s),s.once=()=>(e.once=!0,s),s};b("toGlobal",r=>(r.global=!0,r));const ni=(...r)=>Sr.If(...r);function Ga(r){return r}b("append",Ga);const Wa=new K("color"),q=new K("float",ks.float),Re=new K("int",ks.ints),Xa=new K("uint",ks.uint),Ya=new K("bool",ks.bool),D=new K("vec2"),Za=new K("ivec2"),Ja=new K("uvec2"),ja=new K("bvec2"),k=new K("vec3"),Qa=new K("ivec3"),Ka=new K("uvec3"),tc=new K("bvec3"),Be=new K("vec4"),ec=new K("ivec4"),sc=new K("uvec4"),nc=new K("bvec4"),Rr=new K("mat2"),qs=new K("mat3"),ic=new K("mat4");b("toColor",Wa),b("toFloat",q),b("toInt",Re),b("toUint",Xa),b("toBool",Ya),b("toVec2",D),b("toIVec2",Za),b("toUVec2",Ja),b("toBVec2",ja),b("toVec3",k),b("toIVec3",Qa),b("toUVec3",Ka),b("toBVec3",tc),b("toVec4",Be),b("toIVec4",ec),b("toUVec4",sc),b("toBVec4",nc),b("toMat2",Rr),b("toMat3",qs),b("toMat4",ic);const rc=C(is),oc=(r,t)=>v(new Ar(v(r),t));b("element",rc),b("convert",oc);class Br extends U{static get type(){return"UniformGroupNode"}constructor(t,e=!1,s=1){super("string"),this.name=t,this.version=0,this.shared=e,this.order=s,this.isUniformGroup=!0}set needsUpdate(t){t===!0&&this.version++}serialize(t){super.serialize(t),t.name=this.name,t.version=this.version,t.shared=this.shared}deserialize(t){super.deserialize(t),this.name=t.name,this.version=t.version,this.shared=t.shared}}const ac=r=>new Br(r),de=((r,t=0)=>new Br(r,!0,t))("render"),cc=ac("object");class Ie extends jn{static get type(){return"UniformNode"}constructor(t,e=null){super(t,e),this.isUniformNode=!0,this.name="",this.groupNode=cc}label(t){return this.name=t,this}setGroup(t){return this.groupNode=t,this}getGroup(){return this.groupNode}getUniformHash(t){return this.getHash(t)}onUpdate(t,e){const s=this.getSelf();return t=t.bind(s),super.onUpdate(n=>{const i=t(n,s);i!==void 0&&(this.value=i)},e)}generate(t,e){const s=this.getNodeType(t),n=this.getUniformHash(t);let i=t.getNodeFromHash(n);i===void 0&&(t.setHashNode(this,n),i=this);const o=i.getInputType(t),a=t.getUniformFromNode(i,o,t.shaderStage,this.name||t.context.label),c=t.getPropertyName(a);return t.context.label!==void 0&&delete t.context.label,t.format(c,s,e)}}const xt=(r,t)=>{const e=qa(t||r),s=r&&r.isNode===!0?r.node&&r.node.value||r.value:r;return v(new Ie(s,e))};class Ir extends U{static get type(){return"PropertyNode"}constructor(t,e=null,s=!1){super(t),this.name=e,this.varying=s,this.isPropertyNode=!0}getHash(t){return this.name||super.getHash(t)}isGlobal(){return!0}generate(t){let e;return this.varying===!0?(e=t.getVaryingFromNode(this,this.name),e.needsInterpolation=!0):e=t.getVarFromNode(this,this.name),t.getPropertyName(e)}}const ve=(r,t)=>v(new Ir(r,t)),vr=O(Ir,"vec4","DiffuseColor");class hc extends dt{static get type(){return"AssignNode"}constructor(t,e){super(),this.targetNode=t,this.sourceNode=e}hasDependencies(){return!1}getNodeType(t,e){return e!=="void"?this.targetNode.getNodeType(t):"void"}needsSplitAssign(t){const{targetNode:e}=this;if(t.isAvailable("swizzleAssign")===!1&&e.isSplitNode&&e.components.length>1){const s=t.getTypeLength(e.node.getNodeType(t));return ns.join("").slice(0,s)!==e.components}return!1}generate(t,e){const{targetNode:s,sourceNode:n}=this,i=this.needsSplitAssign(t),o=s.getNodeType(t),a=s.context({assign:!0}).build(t),c=n.build(t,o),u=n.getNodeType(t),h=t.getDataFromNode(this);let l;if(h.initialized===!0)e!=="void"&&(l=a);else if(i){const d=t.getVarFromNode(this,null,o),f=t.getPropertyName(d);t.addLineFlowCode(`${f} = ${c}`,this);const p=s.node.context({assign:!0}).build(t);for(let m=0;m<s.components.length;m++){const g=s.components[m];t.addLineFlowCode(`${p}.${g} = ${f}[ ${m} ]`,this)}e!=="void"&&(l=a)}else l=`${a} = ${c}`,(e==="void"||u==="void")&&(t.addLineFlowCode(l,this),e!=="void"&&(l=a));return h.initialized=!0,t.format(l,o,e)}}b("assign",C(hc));class uc extends dt{static get type(){return"FunctionCallNode"}constructor(t=null,e={}){super(),this.functionNode=t,this.parameters=e}setParameters(t){return this.parameters=t,this}getParameters(){return this.parameters}getNodeType(t){return this.functionNode.getNodeType(t)}generate(t){const e=[],s=this.functionNode,n=s.getInputs(t),i=this.parameters;if(Array.isArray(i))for(let a=0;a<i.length;a++){const c=n[a],u=i[a];e.push(u.build(t,c.type))}else for(const a of n){const c=i[a.name];if(c!==void 0)e.push(c.build(t,a.type));else throw new Error(`FunctionCallNode: Input '${a.name}' not found in FunctionNode.`)}return`${s.build(t,"property")}( ${e.join(", ")} )`}}b("call",(r,...t)=>(t=t.length>1||t[0]&&t[0].isNode===!0?Fe(t):Hs(t[0]),v(new uc(v(r),t))));class Y extends dt{static get type(){return"OperatorNode"}constructor(t,e,s,...n){if(super(),n.length>0){let i=new Y(t,e,s);for(let o=0;o<n.length-1;o++)i=new Y(t,i,n[o]);e=i,s=n[n.length-1]}this.op=t,this.aNode=e,this.bNode=s}getNodeType(t,e){const s=this.op,n=this.aNode,i=this.bNode,o=n.getNodeType(t),a=typeof i<"u"?i.getNodeType(t):null;if(o==="void"||a==="void")return"void";if(s==="%")return o;if(s==="~"||s==="&"||s==="|"||s==="^"||s===">>"||s==="<<")return t.getIntegerType(o);if(s==="!"||s==="=="||s==="&&"||s==="||"||s==="^^")return"bool";if(s==="<"||s===">"||s==="<="||s===">="){const c=e?t.getTypeLength(e):Math.max(t.getTypeLength(o),t.getTypeLength(a));return c>1?`bvec${c}`:"bool"}else return o==="float"&&t.isMatrix(a)?a:t.isMatrix(o)&&t.isVector(a)?t.getVectorFromMatrix(o):t.isVector(o)&&t.isMatrix(a)?t.getVectorFromMatrix(a):t.getTypeLength(a)>t.getTypeLength(o)?a:o}generate(t,e){const s=this.op,n=this.aNode,i=this.bNode,o=this.getNodeType(t,e);let a=null,c=null;o!=="void"?(a=n.getNodeType(t),c=typeof i<"u"?i.getNodeType(t):null,s==="<"||s===">"||s==="<="||s===">="||s==="=="?t.isVector(a)?c=a:a!==c&&(a=c="float"):s===">>"||s==="<<"?(a=o,c=t.changeComponentType(c,"uint")):t.isMatrix(a)&&t.isVector(c)?c=t.getVectorFromMatrix(a):t.isVector(a)&&t.isMatrix(c)?a=t.getVectorFromMatrix(c):a=c=o):a=c=o;const u=n.build(t,a),h=typeof i<"u"?i.build(t,c):null,l=t.getTypeLength(e),d=t.getFunctionOperator(s);if(e!=="void")return s==="<"&&l>1?t.useComparisonMethod?t.format(`${t.getMethod("lessThan",e)}( ${u}, ${h} )`,o,e):t.format(`( ${u} < ${h} )`,o,e):s==="<="&&l>1?t.useComparisonMethod?t.format(`${t.getMethod("lessThanEqual",e)}( ${u}, ${h} )`,o,e):t.format(`( ${u} <= ${h} )`,o,e):s===">"&&l>1?t.useComparisonMethod?t.format(`${t.getMethod("greaterThan",e)}( ${u}, ${h} )`,o,e):t.format(`( ${u} > ${h} )`,o,e):s===">="&&l>1?t.useComparisonMethod?t.format(`${t.getMethod("greaterThanEqual",e)}( ${u}, ${h} )`,o,e):t.format(`( ${u} >= ${h} )`,o,e):s==="!"||s==="~"?t.format(`(${s}${u})`,a,e):d?t.format(`${d}( ${u}, ${h} )`,o,e):t.format(`( ${u} ${s} ${h} )`,o,e);if(a!=="void")return d?t.format(`${d}( ${u}, ${h} )`,o,e):t.format(`${u} ${s} ${h}`,o,e)}serialize(t){super.serialize(t),t.op=this.op}deserialize(t){super.deserialize(t),this.op=t.op}}const fe=C(Y,"+"),$s=C(Y,"-"),Gs=C(Y,"*"),Pr=C(Y,"/"),Lr=C(Y,"%"),lc=C(Y,"=="),dc=C(Y,"!="),fc=C(Y,"<"),pc=C(Y,">"),mc=C(Y,"<="),yc=C(Y,">="),gc=C(Y,"&&"),xc=C(Y,"||"),Tc=C(Y,"!"),Nc=C(Y,"^^"),wc=C(Y,"&"),Ac=C(Y,"~"),Mc=C(Y,"|"),Sc=C(Y,"^"),_c=C(Y,"<<"),zc=C(Y,">>");b("add",fe),b("sub",$s),b("mul",Gs),b("div",Pr),b("modInt",Lr),b("equal",lc),b("notEqual",dc),b("lessThan",fc),b("greaterThan",pc),b("lessThanEqual",mc),b("greaterThanEqual",yc),b("and",gc),b("or",xc),b("not",Tc),b("xor",Nc),b("bitAnd",wc),b("bitNot",Ac),b("bitOr",Mc),b("bitXor",Sc),b("shiftLeft",_c),b("shiftRight",zc),b("remainder",(...r)=>(console.warn("TSL.OperatorNode: .remainder() has been renamed to .modInt()."),Lr(...r)));class x extends dt{static get type(){return"MathNode"}constructor(t,e,s=null,n=null){super(),this.method=t,this.aNode=e,this.bNode=s,this.cNode=n}getInputType(t){const e=this.aNode.getNodeType(t),s=this.bNode?this.bNode.getNodeType(t):null,n=this.cNode?this.cNode.getNodeType(t):null,i=t.isMatrix(e)?0:t.getTypeLength(e),o=t.isMatrix(s)?0:t.getTypeLength(s),a=t.isMatrix(n)?0:t.getTypeLength(n);return i>o&&i>a?e:o>a?s:a>i?n:e}getNodeType(t){const e=this.method;return e===x.LENGTH||e===x.DISTANCE||e===x.DOT?"float":e===x.CROSS?"vec3":e===x.ALL?"bool":e===x.EQUALS?t.changeComponentType(this.aNode.getNodeType(t),"bool"):e===x.MOD?this.aNode.getNodeType(t):this.getInputType(t)}generate(t,e){const s=this.method,n=this.getNodeType(t),i=this.getInputType(t),o=this.aNode,a=this.bNode,c=this.cNode,u=t.renderer.isWebGLRenderer===!0;if(s===x.TRANSFORM_DIRECTION){let h=o,l=a;t.isMatrix(h.getNodeType(t))?l=Be(k(l),0):h=Be(k(h),0);const d=Gs(h,l).xyz;return Or(d).build(t,e)}else{if(s===x.NEGATE)return t.format("( - "+o.build(t,i)+" )",n,e);if(s===x.ONE_MINUS)return $s(1,o).build(t,e);if(s===x.RECIPROCAL)return Pr(1,o).build(t,e);if(s===x.DIFFERENCE)return oi($s(o,a)).build(t,e);{const h=[];return s===x.CROSS||s===x.MOD?h.push(o.build(t,n),a.build(t,n)):u&&s===x.STEP?h.push(o.build(t,t.getTypeLength(o.getNodeType(t))===1?"float":i),a.build(t,i)):u&&(s===x.MIN||s===x.MAX)||s===x.MOD?h.push(o.build(t,i),a.build(t,t.getTypeLength(a.getNodeType(t))===1?"float":i)):s===x.REFRACT?h.push(o.build(t,i),a.build(t,i),c.build(t,"float")):s===x.MIX?h.push(o.build(t,i),a.build(t,i),c.build(t,t.getTypeLength(c.getNodeType(t))===1?"float":i)):(h.push(o.build(t,i)),a!==null&&h.push(a.build(t,i)),c!==null&&h.push(c.build(t,i))),t.format(`${t.getMethod(s,n)}( ${h.join(", ")} )`,n,e)}}}serialize(t){super.serialize(t),t.method=this.method}deserialize(t){super.deserialize(t),this.method=t.method}}x.ALL="all",x.ANY="any",x.EQUALS="equals",x.RADIANS="radians",x.DEGREES="degrees",x.EXP="exp",x.EXP2="exp2",x.LOG="log",x.LOG2="log2",x.SQRT="sqrt",x.INVERSE_SQRT="inversesqrt",x.FLOOR="floor",x.CEIL="ceil",x.NORMALIZE="normalize",x.FRACT="fract",x.SIN="sin",x.COS="cos",x.TAN="tan",x.ASIN="asin",x.ACOS="acos",x.ATAN="atan",x.ABS="abs",x.SIGN="sign",x.LENGTH="length",x.NEGATE="negate",x.ONE_MINUS="oneMinus",x.DFDX="dFdx",x.DFDY="dFdy",x.ROUND="round",x.RECIPROCAL="reciprocal",x.TRUNC="trunc",x.FWIDTH="fwidth",x.BITCAST="bitcast",x.TRANSPOSE="transpose",x.ATAN2="atan2",x.MIN="min",x.MAX="max",x.MOD="mod",x.STEP="step",x.REFLECT="reflect",x.DISTANCE="distance",x.DIFFERENCE="difference",x.DOT="dot",x.CROSS="cross",x.POW="pow",x.TRANSFORM_DIRECTION="transformDirection",x.MIX="mix",x.CLAMP="clamp",x.REFRACT="refract",x.SMOOTHSTEP="smoothstep",x.FACEFORWARD="faceforward";const bc=q(Math.PI),Ec=C(x,x.ALL),Cc=C(x,x.ANY),Fc=C(x,x.EQUALS),Rc=C(x,x.RADIANS),Bc=C(x,x.DEGREES),Ic=C(x,x.EXP),vc=C(x,x.EXP2),Pc=C(x,x.LOG),Lc=C(x,x.LOG2),ii=C(x,x.SQRT),Oc=C(x,x.INVERSE_SQRT),Dc=C(x,x.FLOOR),Vc=C(x,x.CEIL),Or=C(x,x.NORMALIZE),ri=C(x,x.FRACT),Dr=C(x,x.SIN),Uc=C(x,x.COS),kc=C(x,x.TAN),Hc=C(x,x.ASIN),qc=C(x,x.ACOS),$c=C(x,x.ATAN),oi=C(x,x.ABS),Vr=C(x,x.SIGN),Gc=C(x,x.LENGTH),Wc=C(x,x.NEGATE),Xc=C(x,x.ONE_MINUS),Yc=C(x,x.DFDX),Zc=C(x,x.DFDY),Jc=C(x,x.ROUND),jc=C(x,x.RECIPROCAL),Qc=C(x,x.TRUNC),Kc=C(x,x.FWIDTH);x.BITCAST;const th=C(x,x.TRANSPOSE),eh=C(x,x.ATAN2),sh=C(x,x.MIN),ai=C(x,x.MAX),Ur=C(x,x.MOD),kr=C(x,x.STEP),nh=C(x,x.REFLECT),ih=C(x,x.DISTANCE),rh=C(x,x.DIFFERENCE),ci=C(x,x.DOT),oh=C(x,x.CROSS),Hr=C(x,x.POW),ah=C(x,x.POW,2),ch=C(x,x.POW,3),hh=C(x,x.POW,4),uh=C(x,x.TRANSFORM_DIRECTION),lh=r=>Gs(Vr(r),Hr(oi(r),1/3)),dh=r=>ci(r,r),re=C(x,x.MIX),Ws=(r,t=0,e=1)=>v(new x(x.CLAMP,v(r),v(t),v(e))),fh=r=>Ws(r),ph=C(x,x.REFRACT),hi=C(x,x.SMOOTHSTEP),mh=C(x,x.FACEFORWARD),yh=tt(([r])=>{const s=43758.5453,n=ci(r.xy,D(12.9898,78.233)),i=Ur(n,bc);return ri(Dr(i).mul(s))}),gh=(r,t,e)=>re(t,e,r),xh=(r,t,e)=>hi(t,e,r);b("all",Ec),b("any",Cc),b("equals",Fc),b("radians",Rc),b("degrees",Bc),b("exp",Ic),b("exp2",vc),b("log",Pc),b("log2",Lc),b("sqrt",ii),b("inverseSqrt",Oc),b("floor",Dc),b("ceil",Vc),b("normalize",Or),b("fract",ri),b("sin",Dr),b("cos",Uc),b("tan",kc),b("asin",Hc),b("acos",qc),b("atan",$c),b("abs",oi),b("sign",Vr),b("length",Gc),b("lengthSq",dh),b("negate",Wc),b("oneMinus",Xc),b("dFdx",Yc),b("dFdy",Zc),b("round",Jc),b("reciprocal",jc),b("trunc",Qc),b("fwidth",Kc),b("atan2",eh),b("min",sh),b("max",ai),b("mod",Ur),b("step",kr),b("reflect",nh),b("distance",ih),b("dot",ci),b("cross",oh),b("pow",Hr),b("pow2",ah),b("pow3",ch),b("pow4",hh),b("transformDirection",uh),b("mix",gh),b("clamp",Ws),b("refract",ph),b("smoothstep",xh),b("faceForward",mh),b("difference",rh),b("saturate",fh),b("cbrt",lh),b("transpose",th),b("rand",yh);class Th extends U{static get type(){return"ConditionalNode"}constructor(t,e,s=null){super(),this.condNode=t,this.ifNode=e,this.elseNode=s}getNodeType(t){const e=this.ifNode.getNodeType(t);if(this.elseNode!==null){const s=this.elseNode.getNodeType(t);if(t.getTypeLength(s)>t.getTypeLength(e))return s}return e}setup(t){const e=this.condNode.cache(),s=this.ifNode.cache(),n=this.elseNode?this.elseNode.cache():null,i=t.context.nodeBlock;t.getDataFromNode(s).parentNodeBlock=i,n!==null&&(t.getDataFromNode(n).parentNodeBlock=i);const o=t.getNodeProperties(this);o.condNode=e,o.ifNode=s.context({nodeBlock:s}),o.elseNode=n?n.context({nodeBlock:n}):null}generate(t,e){const s=this.getNodeType(t),n=t.getDataFromNode(this);if(n.nodeProperty!==void 0)return n.nodeProperty;const{condNode:i,ifNode:o,elseNode:a}=t.getNodeProperties(this),c=e!=="void",u=c?ve(s).build(t):"";n.nodeProperty=u;const h=i.build(t,"bool");t.addFlowCode(`
${t.tab}if ( ${h} ) {

`).addFlowTab();let l=o.build(t,s);if(l&&(c?l=u+" = "+l+";":l="return "+l+";"),t.removeFlowTab().addFlowCode(t.tab+"	"+l+`

`+t.tab+"}"),a!==null){t.addFlowCode(` else {

`).addFlowTab();let d=a.build(t,s);d&&(c?d=u+" = "+d+";":d="return "+d+";"),t.removeFlowTab().addFlowCode(t.tab+"	"+d+`

`+t.tab+`}

`)}else t.addFlowCode(`

`);return t.format(u,s,e)}}const ui=C(Th);b("select",ui),b("cond",(...r)=>(console.warn("TSL.ConditionalNode: cond() has been renamed to select()."),ui(...r)));class Nh extends U{static get type(){return"ContextNode"}constructor(t,e={}){super(),this.isContextNode=!0,this.node=t,this.value=e}getScope(){return this.node.getScope()}getNodeType(t){return this.node.getNodeType(t)}analyze(t){this.node.build(t)}setup(t){const e=t.getContext();t.setContext({...t.context,...this.value});const s=this.node.build(t);return t.setContext(e),s}generate(t,e){const s=t.getContext();t.setContext({...t.context,...this.value});const n=this.node.build(t,e);return t.setContext(s),n}}const qr=C(Nh),wh=(r,t)=>qr(r,{label:t});b("context",qr),b("label",wh);class Ah extends U{static get type(){return"VarNode"}constructor(t,e=null){super(),this.node=t,this.name=e,this.global=!0,this.isVarNode=!0}getHash(t){return this.name||super.getHash(t)}getNodeType(t){return this.node.getNodeType(t)}generate(t){const{node:e,name:s}=this,n=t.getVarFromNode(this,s,t.getVectorType(this.getNodeType(t))),i=t.getPropertyName(n),o=e.build(t,n.type);return t.addLineFlowCode(`${i} = ${o}`,this),i}}const $r=C(Ah);b("temp",$r),b("toVar",(...r)=>$r(...r).append());class Mh extends U{static get type(){return"VaryingNode"}constructor(t,e=null){super(),this.node=t,this.name=e,this.isVaryingNode=!0}isGlobal(){return!0}getHash(t){return this.name||super.getHash(t)}getNodeType(t){return this.node.getNodeType(t)}setupVarying(t){const e=t.getNodeProperties(this);let s=e.varying;if(s===void 0){const n=this.name,i=this.getNodeType(t);e.varying=s=t.getVaryingFromNode(this,n,i),e.node=this.node}return s.needsInterpolation||(s.needsInterpolation=t.shaderStage==="fragment"),s}setup(t){this.setupVarying(t)}analyze(t){return this.setupVarying(t),this.node.analyze(t)}generate(t){const e=t.getNodeProperties(this),s=this.setupVarying(t);if(e.propertyName===void 0){const n=this.getNodeType(t),i=t.getPropertyName(s,wr.VERTEX);t.flowNodeFromShaderStage(wr.VERTEX,this.node,n,i),e.propertyName=i}return t.getPropertyName(s)}}const Pe=C(Mh);b("varying",Pe);const rs="WorkingColorSpace",li="OutputColorSpace";function Gr(r){let t=null;return r===Es?t="Linear":r===$t&&(t="sRGB"),t}function Sh(r,t){return Gr(r)+"To"+Gr(t)}class Xs extends dt{static get type(){return"ColorSpaceNode"}constructor(t,e,s){super("vec4"),this.colorNode=t,this.source=e,this.target=s}getColorSpace(t,e){return e===rs?mt.workingColorSpace:e===li?t.context.outputColorSpace||t.renderer.outputColorSpace:e}setup(t){const{renderer:e}=t,{colorNode:s}=this,n=this.getColorSpace(t,this.source),i=this.getColorSpace(t,this.target);if(n===i)return s;const o=Sh(n,i);let a=null;const c=e.nodes.library.getColorSpaceFunction(o);return c!==null?a=Be(c(s.rgb),s.a):(console.error("ColorSpaceNode: Unsupported Color Space configuration.",o),a=s),a}}const _h=r=>v(new Xs(v(r),rs,li)),zh=r=>v(new Xs(v(r),li,rs)),bh=(r,t)=>v(new Xs(v(r),rs,t)),Wr=(r,t)=>v(new Xs(v(r),t,rs));b("toOutputColorSpace",_h),b("toWorkingColorSpace",zh),b("workingToColorSpace",bh),b("colorSpaceToWorking",Wr);let Eh=class extends is{static get type(){return"ReferenceElementNode"}constructor(t,e){super(t,e),this.referenceNode=t,this.isReferenceElementNode=!0}getNodeType(){return this.referenceNode.uniformType}generate(t){const e=super.generate(t),s=this.referenceNode.getNodeType(),n=this.getNodeType();return t.format(e,s,n)}};class Ch extends U{static get type(){return"ReferenceBaseNode"}constructor(t,e,s=null,n=null){super(),this.property=t,this.uniformType=e,this.object=s,this.count=n,this.properties=t.split("."),this.reference=s,this.node=null,this.group=null,this.updateType=Q.OBJECT}setGroup(t){return this.group=t,this}element(t){return v(new Eh(this,v(t)))}setNodeType(t){const e=xt(null,t).getSelf();this.group!==null&&e.setGroup(this.group),this.node=e}getNodeType(t){return this.node===null&&(this.updateReference(t),this.updateValue()),this.node.getNodeType(t)}getValueFromReference(t=this.reference){const{properties:e}=this;let s=t[e[0]];for(let n=1;n<e.length;n++)s=s[e[n]];return s}updateReference(t){return this.reference=this.object!==null?this.object:t.object,this.reference}setup(){return this.updateValue(),this.node}update(){this.updateValue()}updateValue(){this.node===null&&this.setNodeType(this.uniformType);const t=this.getValueFromReference();Array.isArray(t)?this.node.array=t:this.node.value=t}}class Fh extends Ch{static get type(){return"RendererReferenceNode"}constructor(t,e,s=null){super(t,e,s),this.renderer=s,this.setGroup(de)}updateReference(t){return this.reference=this.renderer!==null?this.renderer:t.renderer,this.reference}}const Rh=(r,t,e)=>v(new Fh(r,t,e));class Bh extends dt{static get type(){return"ToneMappingNode"}constructor(t,e=vh,s=null){super("vec3"),this.toneMapping=t,this.exposureNode=e,this.colorNode=s}getCacheKey(){return Ma(super.getCacheKey(),this.toneMapping)}setup(t){const e=this.colorNode||t.context.color,s=this.toneMapping;if(s===Mn)return e;let n=null;const i=t.renderer.nodes.library.getToneMappingFunction(s);return i!==null?n=Be(i(e.rgb,this.exposureNode),e.a):(console.error("ToneMappingNode: Unsupported Tone Mapping configuration.",s),n=e),n}}const Ih=(r,t,e)=>v(new Bh(r,v(t),v(e))),vh=Rh("toneMappingExposure","float");b("toneMapping",(r,t,e)=>Ih(t,e,r));class Ph extends jn{static get type(){return"BufferAttributeNode"}constructor(t,e=null,s=0,n=0){super(t,e),this.isBufferNode=!0,this.bufferType=e,this.bufferStride=s,this.bufferOffset=n,this.usage=Cs,this.instanced=!1,this.attribute=null,this.global=!0,t&&t.isBufferAttribute===!0&&(this.attribute=t,this.usage=t.usage,this.instanced=t.isInstancedBufferAttribute)}getHash(t){if(this.bufferStride===0&&this.bufferOffset===0){let e=t.globalCache.getData(this.value);return e===void 0&&(e={node:this},t.globalCache.setData(this.value,e)),e.node.uuid}return this.uuid}getNodeType(t){return this.bufferType===null&&(this.bufferType=t.getTypeFromAttribute(this.attribute)),this.bufferType}setup(t){if(this.attribute!==null)return;const e=this.getNodeType(t),s=this.value,n=t.getTypeLength(e),i=this.bufferStride||n,o=this.bufferOffset,a=s.isInterleavedBuffer===!0?s:new wa(s,i),c=new Yn(a,n,o);a.setUsage(this.usage),this.attribute=c,this.attribute.isInstancedBufferAttribute=this.instanced}generate(t){const e=this.getNodeType(t),s=t.getBufferAttributeFromNode(this,e),n=t.getPropertyName(s);let i=null;return t.shaderStage==="vertex"||t.shaderStage==="compute"?(this.name=n,i=n):i=Pe(this).build(t,e),i}getInputType(){return"bufferAttribute"}setUsage(t){return this.usage=t,this.attribute&&this.attribute.isBufferAttribute===!0&&(this.attribute.usage=t),this}setInstanced(t){return this.instanced=t,this}}const Lh=(r,t,e,s)=>v(new Ph(r,t,e,s));b("toAttribute",r=>Lh(r.value));class Oh extends U{static get type(){return"ComputeNode"}constructor(t,e,s=[64]){super("void"),this.isComputeNode=!0,this.computeNode=t,this.count=e,this.workgroupSize=s,this.dispatchCount=0,this.version=1,this.updateBeforeType=Q.OBJECT,this.updateDispatchCount()}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(t){t===!0&&this.version++}updateDispatchCount(){const{count:t,workgroupSize:e}=this;let s=e[0];for(let n=1;n<e.length;n++)s*=e[n];this.dispatchCount=Math.ceil(t/s)}onInit(){}updateBefore({renderer:t}){t.compute(this)}generate(t){const{shaderStage:e}=t;if(e==="compute"){const s=this.computeNode.build(t,"void");s!==""&&t.addLineFlowCode(s,this)}}}b("compute",(r,t,e)=>v(new Oh(v(r),t,e)));class Dh extends U{static get type(){return"CacheNode"}constructor(t,e=!0){super(),this.node=t,this.parent=e,this.isCacheNode=!0}getNodeType(t){return this.node.getNodeType(t)}build(t,...e){const s=t.getCache(),n=t.getCacheFromNode(this,this.parent);t.setCache(n);const i=this.node.build(t,...e);return t.setCache(s),i}}b("cache",(r,...t)=>v(new Dh(v(r),...t)));class Vh extends U{static get type(){return"BypassNode"}constructor(t,e){super(),this.isBypassNode=!0,this.outputNode=t,this.callNode=e}getNodeType(t){return this.outputNode.getNodeType(t)}generate(t){const e=this.callNode.build(t,"void");return e!==""&&t.addLineFlowCode(e,this),this.outputNode.build(t)}}b("bypass",C(Vh));class Xr extends U{static get type(){return"RemapNode"}constructor(t,e,s,n=q(0),i=q(1)){super(),this.node=t,this.inLowNode=e,this.inHighNode=s,this.outLowNode=n,this.outHighNode=i,this.doClamp=!0}setup(){const{node:t,inLowNode:e,inHighNode:s,outLowNode:n,outHighNode:i,doClamp:o}=this;let a=t.sub(e).div(s.sub(e));return o===!0&&(a=a.clamp()),a.mul(i.sub(n)).add(n)}}const Uh=C(Xr,null,null,{doClamp:!1}),kh=C(Xr);b("remap",Uh),b("remapClamp",kh);class Hh extends U{static get type(){return"ExpressionNode"}constructor(t="",e="void"){super(e),this.snippet=t}generate(t,e){const s=this.getNodeType(t),n=this.snippet;if(s==="void")t.addLineFlowCode(n,this);else return t.format(`( ${n} )`,s,e)}}const Ys=C(Hh);b("discard",r=>(r?ui(r,Ys("discard")):Ys("discard")).append());class qh extends dt{static get type(){return"RenderOutputNode"}constructor(t,e,s){super("vec4"),this.colorNode=t,this.toneMapping=e,this.outputColorSpace=s,this.isRenderOutput=!0}setup({context:t}){let e=this.colorNode||t.color;const s=(this.toneMapping!==null?this.toneMapping:t.toneMapping)||Mn,n=(this.outputColorSpace!==null?this.outputColorSpace:t.outputColorSpace)||bs;return s!==Mn&&(e=e.toneMapping(s)),n!==bs&&n!==mt.workingColorSpace&&(e=e.workingToColorSpace(n)),e}}b("renderOutput",(r,t=null,e=null)=>v(new qh(v(r),t,e)));class $h extends U{static get type(){return"AttributeNode"}constructor(t,e=null){super(e),this.global=!0,this._attributeName=t}getHash(t){return this.getAttributeName(t)}getNodeType(t){let e=this.nodeType;if(e===null){const s=this.getAttributeName(t);if(t.hasGeometryAttribute(s)){const n=t.geometry.getAttribute(s);e=t.getTypeFromAttribute(n)}else e="float"}return e}setAttributeName(t){return this._attributeName=t,this}getAttributeName(){return this._attributeName}generate(t){const e=this.getAttributeName(t),s=this.getNodeType(t);if(t.hasGeometryAttribute(e)===!0){const i=t.geometry.getAttribute(e),o=t.getTypeFromAttribute(i),a=t.getAttribute(e,o);return t.shaderStage==="vertex"?t.format(a.name,o,s):Pe(this).build(t,s)}else return console.warn(`AttributeNode: Vertex attribute "${e}" not found on geometry.`),t.generateConst(s)}serialize(t){super.serialize(t),t.global=this.global,t._attributeName=this._attributeName}deserialize(t){super.deserialize(t),this.global=t.global,this._attributeName=t._attributeName}}const os=(r,t)=>v(new $h(r,t)),Zs=r=>os("uv"+(r>0?r:""),"vec2");class Gh extends U{static get type(){return"TextureSizeNode"}constructor(t,e=null){super("uvec2"),this.isTextureSizeNode=!0,this.textureNode=t,this.levelNode=e}generate(t,e){const s=this.textureNode.build(t,"property"),n=this.levelNode===null?"0":this.levelNode.build(t,"int");return t.format(`${t.getMethod("textureDimensions")}( ${s}, ${n} )`,this.getNodeType(t),e)}}const Yr=C(Gh);class Wh extends Ie{static get type(){return"MaxMipLevelNode"}constructor(t){super(0),this._textureNode=t,this.updateType=Q.FRAME}get textureNode(){return this._textureNode}get texture(){return this._textureNode.value}update(){const t=this.texture,e=t.images,s=e&&e.length>0?e[0]&&e[0].image||e[0]:t.image;if(s&&s.width!==void 0){const{width:n,height:i}=s;this.value=Math.log2(Math.max(n,i))}}}const Xh=C(Wh);class Js extends Ie{static get type(){return"TextureNode"}constructor(t,e=null,s=null,n=null){super(t),this.isTextureNode=!0,this.uvNode=e,this.levelNode=s,this.biasNode=n,this.compareNode=null,this.depthNode=null,this.gradNode=null,this.sampler=!0,this.updateMatrix=!1,this.updateType=Q.NONE,this.referenceNode=null,this._value=t,this._matrixUniform=null,this.setUpdateMatrix(e===null)}set value(t){this.referenceNode?this.referenceNode.value=t:this._value=t}get value(){return this.referenceNode?this.referenceNode.value:this._value}getUniformHash(){return this.value.uuid}getNodeType(){return this.value.isDepthTexture===!0?"float":this.value.type===Wi?"uvec4":this.value.type===Bo?"ivec4":"vec4"}getInputType(){return"texture"}getDefaultUV(){return Zs(this.value.channel)}updateReference(){return this.value}getTransformedUV(t){return this._matrixUniform===null&&(this._matrixUniform=xt(this.value.matrix)),this._matrixUniform.mul(k(t,1)).xy}setUpdateMatrix(t){return this.updateMatrix=t,this.updateType=t?Q.FRAME:Q.NONE,this}setupUV(t,e){const s=this.value;return t.isFlipY()&&(s.isRenderTargetTexture===!0||s.isFramebufferTexture===!0||s.isDepthTexture===!0)&&(this.sampler?e=e.flipY():e=e.setY(Re(Yr(this,this.levelNode).y).sub(e.y).sub(1))),e}setup(t){const e=t.getNodeProperties(this);e.referenceNode=this.referenceNode;let s=this.uvNode;(s===null||t.context.forceUVContext===!0)&&t.context.getUV&&(s=t.context.getUV(this)),s||(s=this.getDefaultUV()),this.updateMatrix===!0&&(s=this.getTransformedUV(s)),s=this.setupUV(t,s);let n=this.levelNode;n===null&&t.context.getTextureLevel&&(n=t.context.getTextureLevel(this)),e.uvNode=s,e.levelNode=n,e.biasNode=this.biasNode,e.compareNode=this.compareNode,e.gradNode=this.gradNode,e.depthNode=this.depthNode}generateUV(t,e){return e.build(t,this.sampler===!0?"vec2":"ivec2")}generateSnippet(t,e,s,n,i,o,a,c){const u=this.value;let h;return n?h=t.generateTextureLevel(u,e,s,n,o):i?h=t.generateTextureBias(u,e,s,i,o):c?h=t.generateTextureGrad(u,e,s,c,o):a?h=t.generateTextureCompare(u,e,s,a,o):this.sampler===!1?h=t.generateTextureLoad(u,e,s,o):h=t.generateTexture(u,e,s,o),h}generate(t,e){const s=t.getNodeProperties(this),n=this.value;if(!n||n.isTexture!==!0)throw new Error("TextureNode: Need a three.js texture.");const i=super.generate(t,"property");if(e==="sampler")return i+"_sampler";if(t.isReference(e))return i;{const o=t.getDataFromNode(this);let a=o.propertyName;if(a===void 0){const{uvNode:h,levelNode:l,biasNode:d,compareNode:f,depthNode:p,gradNode:m}=s,g=this.generateUV(t,h),y=l?l.build(t,"float"):null,T=d?d.build(t,"float"):null,w=p?p.build(t,"int"):null,M=f?f.build(t,"float"):null,N=m?[m[0].build(t,"vec2"),m[1].build(t,"vec2")]:null,_=t.getVarFromNode(this);a=t.getPropertyName(_);const S=this.generateSnippet(t,i,g,y,T,w,M,N);t.addLineFlowCode(`${a} = ${S}`,this),o.snippet=S,o.propertyName=a}let c=a;const u=this.getNodeType(t);return t.needsToWorkingColorSpace(n)&&(c=Wr(Ys(c,u),n.colorSpace).setup(t).build(t,u)),t.format(c,u,e)}}setSampler(t){return this.sampler=t,this}getSampler(){return this.sampler}uv(t){const e=this.clone();return e.uvNode=v(t),e.referenceNode=this.getSelf(),v(e)}blur(t){const e=this.clone();return e.biasNode=v(t).mul(Xh(e)),e.referenceNode=this.getSelf(),v(e)}level(t){const e=this.clone();return e.levelNode=v(t),e.referenceNode=this.getSelf(),v(e)}size(t){return Yr(this,t)}bias(t){const e=this.clone();return e.biasNode=v(t),e.referenceNode=this.getSelf(),v(e)}compare(t){const e=this.clone();return e.compareNode=v(t),e.referenceNode=this.getSelf(),v(e)}grad(t,e){const s=this.clone();return s.gradNode=[v(t),v(e)],s.referenceNode=this.getSelf(),v(s)}depth(t){const e=this.clone();return e.depthNode=v(t),e.referenceNode=this.getSelf(),v(e)}serialize(t){super.serialize(t),t.value=this.value.toJSON(t.meta).uuid,t.sampler=this.sampler,t.updateMatrix=this.updateMatrix,t.updateType=this.updateType}deserialize(t){super.deserialize(t),this.value=t.meta.textures[t.value],this.sampler=t.sampler,this.updateMatrix=t.updateMatrix,this.updateType=t.updateType}update(){const t=this.value,e=this._matrixUniform;e!==null&&(e.value=t.matrix),t.matrixAutoUpdate===!0&&t.updateMatrix()}clone(){const t=new this.constructor(this.value,this.uvNode,this.levelNode,this.biasNode);return t.sampler=this.sampler,t}}const as=C(Js),cs=xt("float").label("cameraNear").setGroup(de).onRenderUpdate(({camera:r})=>r.near),hs=xt("float").label("cameraFar").setGroup(de).onRenderUpdate(({camera:r})=>r.far),js=xt("mat4").label("cameraViewMatrix").setGroup(de).onRenderUpdate(({camera:r})=>r.matrixWorldInverse);class H extends U{static get type(){return"Object3DNode"}constructor(t,e=null){super(),this.scope=t,this.object3d=e,this.updateType=Q.OBJECT,this._uniformNode=new Ie(null)}getNodeType(){const t=this.scope;if(t===H.WORLD_MATRIX)return"mat4";if(t===H.POSITION||t===H.VIEW_POSITION||t===H.DIRECTION||t===H.SCALE)return"vec3"}update(t){const e=this.object3d,s=this._uniformNode,n=this.scope;if(n===H.WORLD_MATRIX)s.value=e.matrixWorld;else if(n===H.POSITION)s.value=s.value||new A,s.value.setFromMatrixPosition(e.matrixWorld);else if(n===H.SCALE)s.value=s.value||new A,s.value.setFromMatrixScale(e.matrixWorld);else if(n===H.DIRECTION)s.value=s.value||new A,e.getWorldDirection(s.value);else if(n===H.VIEW_POSITION){const i=t.camera;s.value=s.value||new A,s.value.setFromMatrixPosition(e.matrixWorld),s.value.applyMatrix4(i.matrixWorldInverse)}}generate(t){const e=this.scope;return e===H.WORLD_MATRIX?this._uniformNode.nodeType="mat4":(e===H.POSITION||e===H.VIEW_POSITION||e===H.DIRECTION||e===H.SCALE)&&(this._uniformNode.nodeType="vec3"),this._uniformNode.build(t)}serialize(t){super.serialize(t),t.scope=this.scope}deserialize(t){super.deserialize(t),this.scope=t.scope}}H.WORLD_MATRIX="worldMatrix",H.POSITION="position",H.SCALE="scale",H.VIEW_POSITION="viewPosition",H.DIRECTION="direction",H.DIRECTION,H.WORLD_MATRIX,H.POSITION,H.SCALE,H.VIEW_POSITION;class Vt extends H{static get type(){return"ModelNode"}constructor(t){super(t)}update(t){this.object3d=t.object,super.update(t)}}Vt.DIRECTION;const Yh=O(Vt,Vt.WORLD_MATRIX);Vt.POSITION,Vt.SCALE,Vt.VIEW_POSITION;const Zh=xt(new Ct).onObjectUpdate(({object:r},t)=>t.value.getNormalMatrix(r.matrixWorld)),Zr=js.mul(Yh).toVar("modelViewMatrix_2"),Jh=os("position","vec3").varying("positionLocal"),Mt=Zr.mul(Jh).xyz.varying("v_positionView"),Jr=Mt.negate().varying("v_positionViewDirection").normalize().toVar("positionViewDirection");class jh extends U{static get type(){return"FrontFacingNode"}constructor(){super("bool"),this.isFrontFacingNode=!0}generate(t){const{renderer:e,material:s}=t;return e.coordinateSystem===Ye&&s.side===Ui?"false":t.getFrontFacing()}}const di=q(O(jh)).mul(2).sub(1),Qh=os("normal","vec3"),Kh=tt(r=>r.geometry.hasAttribute("normal")===!1?(console.warn('TSL.NormalNode: Vertex attribute "normal" not found on geometry.'),k(0,1,0)):Qh,"vec3").once()().toVar("normalLocal"),tu=Mt.dFdx().cross(Mt.dFdy()).normalize().toVar("normalFlat"),Le=tt(r=>{let t;return r.material.flatShading===!0?t=tu:t=Pe(Qr(Kh),"v_normalView").normalize(),t},"vec3").once()().toVar("normalView"),jr=tt(r=>r.context.setupNormal(),"vec3").once()().mul(di).toVar("transformedNormalView"),Qr=tt(([r],t)=>{const e=t.renderer.nodes.modelNormalViewMatrix;if(e!==null)return e.transformDirection(r);const s=Zh.mul(r);return js.transformDirection(s)}),eu=xt(0).onReference(({material:r})=>r).onRenderUpdate(({material:r})=>r.refractionRatio),su=Jr.negate().reflect(jr),nu=Jr.negate().refract(jr,eu),iu=su.transformDirection(js).toVar("reflectVector"),ru=nu.transformDirection(js).toVar("reflectVector");class ou extends Js{static get type(){return"CubeTextureNode"}constructor(t,e=null,s=null,n=null){super(t,e,s,n),this.isCubeTextureNode=!0}getInputType(){return"cubeTexture"}getDefaultUV(){const t=this.value;return t.mapping===Co?iu:t.mapping===Fo?ru:(console.error('THREE.CubeTextureNode: Mapping "%s" not supported.',t.mapping),k(0,0,0))}setUpdateMatrix(){}setupUV(t,e){const s=this.value;return t.renderer.coordinateSystem===zn||!s.isRenderTargetTexture?k(e.x.negate(),e.yz):e}generateUV(t,e){return e.build(t,"vec3")}}const au=C(ou);class Kr extends Ie{static get type(){return"BufferNode"}constructor(t,e,s=0){super(t,e),this.isBufferNode=!0,this.bufferType=e,this.bufferCount=s}getElementType(t){return this.getNodeType(t)}getInputType(){return"buffer"}}const cu=(r,t,e)=>v(new Kr(r,t,e));class hu extends is{static get type(){return"UniformArrayElementNode"}constructor(t,e){super(t,e),this.isArrayBufferElementNode=!0}generate(t){const e=super.generate(t),s=this.getNodeType();return t.format(e,"vec4",s)}}class uu extends Kr{static get type(){return"UniformArrayNode"}constructor(t,e=null){super(null,"vec4"),this.array=t,this.elementType=e,this._elementType=null,this._elementLength=0,this.updateType=Q.RENDER,this.isArrayBufferNode=!0}getElementType(){return this.elementType||this._elementType}getElementLength(){return this._elementLength}update(){const{array:t,value:e}=this,s=this.getElementLength(),n=this.getElementType();if(s===1)for(let i=0;i<t.length;i++){const o=i*4;e[o]=t[i]}else if(n==="color")for(let i=0;i<t.length;i++){const o=i*4,a=t[i];e[o]=a.r,e[o+1]=a.g,e[o+2]=a.b||0}else for(let i=0;i<t.length;i++){const o=i*4,a=t[i];e[o]=a.x,e[o+1]=a.y,e[o+2]=a.z||0,e[o+3]=a.w||0}}setup(t){const e=this.array.length;this._elementType=this.elementType===null?Vs(this.array[0]):this.elementType,this._elementLength=t.getTypeLength(this._elementType);let s=Float32Array;return this._elementType.charAt(0)==="i"?s=Int32Array:this._elementType.charAt(0)==="u"&&(s=Uint32Array),this.value=new s(e*4),this.bufferCount=e,this.bufferType=t.changeComponentType("vec4",t.getComponentType(this._elementType)),super.setup(t)}element(t){return v(new hu(this,v(t)))}}const fi=(r,t)=>v(new uu(r,t));class lu extends is{static get type(){return"ReferenceElementNode"}constructor(t,e){super(t,e),this.referenceNode=t,this.isReferenceElementNode=!0}getNodeType(){return this.referenceNode.uniformType}generate(t){const e=super.generate(t),s=this.referenceNode.getNodeType(),n=this.getNodeType();return t.format(e,s,n)}}class to extends U{static get type(){return"ReferenceNode"}constructor(t,e,s=null,n=null){super(),this.property=t,this.uniformType=e,this.object=s,this.count=n,this.properties=t.split("."),this.reference=s,this.node=null,this.group=null,this.name=null,this.updateType=Q.OBJECT}element(t){return v(new lu(this,v(t)))}setGroup(t){return this.group=t,this}label(t){return this.name=t,this}setNodeType(t){let e=null;this.count!==null?e=cu(null,t,this.count):Array.isArray(this.getValueFromReference())?e=fi(null,t):t==="texture"?e=as(null):t==="cubeTexture"?e=au(null):e=xt(null,t),this.group!==null&&e.setGroup(this.group),this.name!==null&&e.label(this.name),this.node=e.getSelf()}getNodeType(t){return this.node===null&&(this.updateReference(t),this.updateValue()),this.node.getNodeType(t)}getValueFromReference(t=this.reference){const{properties:e}=this;let s=t[e[0]];for(let n=1;n<e.length;n++)s=s[e[n]];return s}updateReference(t){return this.reference=this.object!==null?this.object:t.object,this.reference}setup(){return this.updateValue(),this.node}update(){this.updateValue()}updateValue(){this.node===null&&this.setNodeType(this.uniformType);const t=this.getValueFromReference();Array.isArray(t)?this.node.array=t:this.node.value=t}}const pe=(r,t,e)=>v(new to(r,t,e));class du extends to{static get type(){return"MaterialReferenceNode"}constructor(t,e,s=null){super(t,e,s),this.material=s,this.isMaterialReferenceNode=!0}updateReference(t){return this.reference=this.material!==null?this.material:t.material,this.reference}}const fu=(r,t,e)=>v(new du(r,t,e)),eo=tt(r=>(r.geometry.hasAttribute("tangent")===!1&&r.geometry.computeTangents(),os("tangent","vec4")))(),pu=eo.xyz.toVar("tangentLocal"),so=Zr.mul(Be(pu,0)).xyz.varying("v_tangentView").normalize().toVar("tangentView"),mu=qs(so,Pe((r=>r.mul(eo.w).xyz)(Le.cross(so)),"v_bitangentView").normalize().toVar("bitangentView"),Le),yu=tt(r=>{const{eye_pos:t,surf_norm:e,mapN:s,uv:n}=r,i=t.dFdx(),o=t.dFdy(),a=n.dFdx(),c=n.dFdy(),u=e,h=o.cross(u),l=u.cross(i),d=h.mul(a.x).add(l.mul(c.x)),f=h.mul(a.y).add(l.mul(c.y)),p=d.dot(d).max(f.dot(f)),m=di.mul(p.inverseSqrt());return fe(d.mul(s.x,m),f.mul(s.y,m),u.mul(s.z)).normalize()});class gu extends dt{static get type(){return"NormalMapNode"}constructor(t,e=null){super("vec3"),this.node=t,this.scaleNode=e,this.normalMapType=Yi}setup(t){const{normalMapType:e,scaleNode:s}=this;let n=this.node.mul(2).sub(1);s!==null&&(n=k(n.xy.mul(s),n.z));let i=null;return e===Oo?i=Qr(n):e===Yi&&(t.hasGeometryAttribute("tangent")===!0?i=mu.mul(n).normalize():i=yu({eye_pos:Mt,surf_norm:Le,mapN:n,uv:Zs()})),i}}const no=C(gu),xu=tt(({textureNode:r,bumpScale:t})=>{const e=n=>r.cache().context({getUV:i=>n(i.uvNode||Zs()),forceUVContext:!0}),s=q(e(n=>n));return D(q(e(n=>n.add(n.dFdx()))).sub(s),q(e(n=>n.add(n.dFdy()))).sub(s)).mul(t)}),Tu=tt(r=>{const{surf_pos:t,surf_norm:e,dHdxy:s}=r,n=t.dFdx().normalize(),i=t.dFdy().normalize(),o=e,a=i.cross(o),c=o.cross(n),u=n.dot(a).mul(di),h=u.sign().mul(s.x.mul(a).add(s.y.mul(c)));return u.abs().mul(e).sub(h).normalize()});class Nu extends dt{static get type(){return"BumpMapNode"}constructor(t,e=null){super("vec3"),this.textureNode=t,this.scaleNode=e}setup(){const t=this.scaleNode!==null?this.scaleNode:1,e=xu({textureNode:this.textureNode,bumpScale:t});return Tu({surf_pos:Mt,surf_norm:Le,dHdxy:e})}}const wu=C(Nu),io=new Map;class z extends U{static get type(){return"MaterialNode"}constructor(t){super(),this.scope=t}getCache(t,e){let s=io.get(t);return s===void 0&&(s=fu(t,e),io.set(t,s)),s}getFloat(t){return this.getCache(t,"float")}getColor(t){return this.getCache(t,"color")}getTexture(t){return this.getCache(t==="map"?"map":t+"Map","texture")}setup(t){const e=t.context.material,s=this.scope;let n=null;if(s===z.COLOR){const i=e.color!==void 0?this.getColor(s):k();e.map&&e.map.isTexture===!0?n=i.mul(this.getTexture("map")):n=i}else if(s===z.OPACITY){const i=this.getFloat(s);e.alphaMap&&e.alphaMap.isTexture===!0?n=i.mul(this.getTexture("alpha")):n=i}else if(s===z.SPECULAR_STRENGTH)e.specularMap&&e.specularMap.isTexture===!0?n=this.getTexture("specular").r:n=q(1);else if(s===z.SPECULAR_INTENSITY){const i=this.getFloat(s);e.specularMap?n=i.mul(this.getTexture(s).a):n=i}else if(s===z.SPECULAR_COLOR){const i=this.getColor(s);e.specularColorMap&&e.specularColorMap.isTexture===!0?n=i.mul(this.getTexture(s).rgb):n=i}else if(s===z.ROUGHNESS){const i=this.getFloat(s);e.roughnessMap&&e.roughnessMap.isTexture===!0?n=i.mul(this.getTexture(s).g):n=i}else if(s===z.METALNESS){const i=this.getFloat(s);e.metalnessMap&&e.metalnessMap.isTexture===!0?n=i.mul(this.getTexture(s).b):n=i}else if(s===z.EMISSIVE){const i=this.getFloat("emissiveIntensity"),o=this.getColor(s).mul(i);e.emissiveMap&&e.emissiveMap.isTexture===!0?n=o.mul(this.getTexture(s)):n=o}else if(s===z.NORMAL)e.normalMap?(n=no(this.getTexture("normal"),this.getCache("normalScale","vec2")),n.normalMapType=e.normalMapType):e.bumpMap?n=wu(this.getTexture("bump").r,this.getFloat("bumpScale")):n=Le;else if(s===z.CLEARCOAT){const i=this.getFloat(s);e.clearcoatMap&&e.clearcoatMap.isTexture===!0?n=i.mul(this.getTexture(s).r):n=i}else if(s===z.CLEARCOAT_ROUGHNESS){const i=this.getFloat(s);e.clearcoatRoughnessMap&&e.clearcoatRoughnessMap.isTexture===!0?n=i.mul(this.getTexture(s).r):n=i}else if(s===z.CLEARCOAT_NORMAL)e.clearcoatNormalMap?n=no(this.getTexture(s),this.getCache(s+"Scale","vec2")):n=Le;else if(s===z.SHEEN){const i=this.getColor("sheenColor").mul(this.getFloat("sheen"));e.sheenColorMap&&e.sheenColorMap.isTexture===!0?n=i.mul(this.getTexture("sheenColor").rgb):n=i}else if(s===z.SHEEN_ROUGHNESS){const i=this.getFloat(s);e.sheenRoughnessMap&&e.sheenRoughnessMap.isTexture===!0?n=i.mul(this.getTexture(s).a):n=i,n=n.clamp(.07,1)}else if(s===z.ANISOTROPY)if(e.anisotropyMap&&e.anisotropyMap.isTexture===!0){const i=this.getTexture(s);n=Rr(us.x,us.y,us.y.negate(),us.x).mul(i.rg.mul(2).sub(D(1)).normalize().mul(i.b))}else n=us;else if(s===z.IRIDESCENCE_THICKNESS){const i=pe("1","float",e.iridescenceThicknessRange);if(e.iridescenceThicknessMap){const o=pe("0","float",e.iridescenceThicknessRange);n=i.sub(o).mul(this.getTexture(s).g).add(o)}else n=i}else if(s===z.TRANSMISSION){const i=this.getFloat(s);e.transmissionMap?n=i.mul(this.getTexture(s).r):n=i}else if(s===z.THICKNESS){const i=this.getFloat(s);e.thicknessMap?n=i.mul(this.getTexture(s).g):n=i}else if(s===z.IOR)n=this.getFloat(s);else if(s===z.LIGHT_MAP)n=this.getTexture(s).rgb.mul(this.getFloat("lightMapIntensity"));else if(s===z.AO_MAP)n=this.getTexture(s).r.sub(1).mul(this.getFloat("aoMapIntensity")).add(1);else{const i=this.getNodeType(t);n=this.getCache(s,i)}return n}}z.ALPHA_TEST="alphaTest",z.COLOR="color",z.OPACITY="opacity",z.SHININESS="shininess",z.SPECULAR="specular",z.SPECULAR_STRENGTH="specularStrength",z.SPECULAR_INTENSITY="specularIntensity",z.SPECULAR_COLOR="specularColor",z.REFLECTIVITY="reflectivity",z.ROUGHNESS="roughness",z.METALNESS="metalness",z.NORMAL="normal",z.CLEARCOAT="clearcoat",z.CLEARCOAT_ROUGHNESS="clearcoatRoughness",z.CLEARCOAT_NORMAL="clearcoatNormal",z.EMISSIVE="emissive",z.ROTATION="rotation",z.SHEEN="sheen",z.SHEEN_ROUGHNESS="sheenRoughness",z.ANISOTROPY="anisotropy",z.IRIDESCENCE="iridescence",z.IRIDESCENCE_IOR="iridescenceIOR",z.IRIDESCENCE_THICKNESS="iridescenceThickness",z.IOR="ior",z.TRANSMISSION="transmission",z.THICKNESS="thickness",z.ATTENUATION_DISTANCE="attenuationDistance",z.ATTENUATION_COLOR="attenuationColor",z.LINE_SCALE="scale",z.LINE_DASH_SIZE="dashSize",z.LINE_GAP_SIZE="gapSize",z.LINE_WIDTH="linewidth",z.LINE_DASH_OFFSET="dashOffset",z.POINT_WIDTH="pointWidth",z.DISPERSION="dispersion",z.LIGHT_MAP="light",z.AO_MAP="ao",z.ALPHA_TEST,z.COLOR,z.SHININESS,z.EMISSIVE,z.OPACITY,z.SPECULAR,z.SPECULAR_INTENSITY,z.SPECULAR_COLOR,z.SPECULAR_STRENGTH,z.REFLECTIVITY,z.ROUGHNESS,z.METALNESS,z.CLEARCOAT,z.CLEARCOAT_ROUGHNESS,z.ROTATION,z.SHEEN,z.SHEEN_ROUGHNESS,z.ANISOTROPY,z.IRIDESCENCE,z.IRIDESCENCE_IOR,z.IRIDESCENCE_THICKNESS,z.TRANSMISSION,z.THICKNESS,z.IOR,z.ATTENUATION_DISTANCE,z.ATTENUATION_COLOR,z.LINE_SCALE,z.LINE_DASH_SIZE,z.LINE_GAP_SIZE,z.LINE_WIDTH,z.LINE_DASH_OFFSET,z.POINT_WIDTH,z.DISPERSION,z.LIGHT_MAP,z.AO_MAP;const us=xt(new J).onReference(function(r){return r.material}).onRenderUpdate(function({material:r}){this.value.set(r.anisotropy*Math.cos(r.anisotropyRotation),r.anisotropy*Math.sin(r.anisotropyRotation))});class W extends U{static get type(){return"IndexNode"}constructor(t){super("uint"),this.scope=t,this.isInstanceIndexNode=!0}generate(t){const e=this.getNodeType(t),s=this.scope;let n;if(s===W.VERTEX)n=t.getVertexIndex();else if(s===W.INSTANCE)n=t.getInstanceIndex();else if(s===W.DRAW)n=t.getDrawIndex();else if(s===W.INVOCATION_LOCAL)n=t.getInvocationLocalIndex();else if(s===W.INVOCATION_SUBGROUP)n=t.getInvocationSubgroupIndex();else if(s===W.SUBGROUP)n=t.getSubgroupIndex();else throw new Error("THREE.IndexNode: Unknown scope: "+s);let i;return t.shaderStage==="vertex"||t.shaderStage==="compute"?i=n:i=Pe(this).build(t,e),i}}W.VERTEX="vertex",W.INSTANCE="instance",W.SUBGROUP="subgroup",W.INVOCATION_LOCAL="invocationLocal",W.INVOCATION_SUBGROUP="invocationSubgroup",W.DRAW="draw",W.VERTEX,W.INSTANCE,W.SUBGROUP,W.INVOCATION_SUBGROUP,W.INVOCATION_LOCAL,W.DRAW;class Au extends U{static get type(){return"LoopNode"}constructor(t=[]){super(),this.params=t}getVarName(t){return String.fromCharCode("i".charCodeAt()+t)}getProperties(t){const e=t.getNodeProperties(this);if(e.stackNode!==void 0)return e;const s={};for(let i=0,o=this.params.length-1;i<o;i++){const a=this.params[i],c=a.isNode!==!0&&a.name||this.getVarName(i),u=a.isNode!==!0&&a.type||"int";s[c]=Ys(c,u)}const n=t.addStack();return e.returnsNode=this.params[this.params.length-1](s,n,t),e.stackNode=n,t.removeStack(),e}getNodeType(t){const{returnsNode:e}=this.getProperties(t);return e?e.getNodeType(t):"void"}setup(t){this.getProperties(t)}generate(t){const e=this.getProperties(t),s=this.params,n=e.stackNode;for(let a=0,c=s.length-1;a<c;a++){const u=s[a];let h=null,l=null,d=null,f=null,p=null,m=null;u.isNode?(f="int",d=this.getVarName(a),h="0",l=u.build(t,f),p="<"):(f=u.type||"int",d=u.name||this.getVarName(a),h=u.start,l=u.end,p=u.condition,m=u.update,typeof h=="number"?h=h.toString():h&&h.isNode&&(h=h.build(t,f)),typeof l=="number"?l=l.toString():l&&l.isNode&&(l=l.build(t,f)),h!==void 0&&l===void 0?(h=h+" - 1",l="0",p=">="):l!==void 0&&h===void 0&&(h="0",p="<"),p===void 0&&(Number(h)>Number(l)?p=">=":p="<"));const g={start:h,end:l,condition:p},y=g.start,T=g.end;let w="",M="",N="";m||(f==="int"||f==="uint"?p.includes("<")?m="++":m="--":p.includes("<")?m="+= 1.":m="-= 1."),w+=t.getVar(f,d)+" = "+y,M+=d+" "+p+" "+T,N+=d+" "+m;const _=`for ( ${w}; ${M}; ${N} )`;t.addFlowCode((a===0?`
`:"")+t.tab+_+` {

`).addFlowTab()}const i=n.build(t,"void"),o=e.returnsNode?e.returnsNode.build(t):"";t.removeFlowTab().addFlowCode(`
`+t.tab+i);for(let a=0,c=this.params.length-1;a<c;a++)t.addFlowCode((a===0?"":t.tab)+`}

`).removeFlowTab();return t.addFlowTab(),o}}const Oe=(...r)=>v(new Au(Fe(r,"int"))).append();let ls,ds;class et extends U{static get type(){return"ScreenNode"}constructor(t){super(),this.scope=t,this.isViewportNode=!0}getNodeType(){return this.scope===et.VIEWPORT?"vec4":"vec2"}getUpdateType(){let t=Q.NONE;return(this.scope===et.SIZE||this.scope===et.VIEWPORT)&&(t=Q.RENDER),this.updateType=t,t}update({renderer:t}){const e=t.getRenderTarget();this.scope===et.VIEWPORT?e!==null?ds.copy(e.viewport):(t.getViewport(ds),ds.multiplyScalar(t.getPixelRatio())):e!==null?(ls.width=e.width,ls.height=e.height):t.getDrawingBufferSize(ls)}setup(){const t=this.scope;let e=null;return t===et.SIZE?e=xt(ls||(ls=new J)):t===et.VIEWPORT?e=xt(ds||(ds=new Ft)):e=D(Qs.div(ro)),e}generate(t){if(this.scope===et.COORDINATE){let e=t.getFragCoord();if(t.isFlipY()){const s=t.getNodeProperties(ro).outputNode.build(t);e=`${t.getType("vec2")}( ${e}.x, ${s}.y - ${e}.y )`}return e}return super.generate(t)}}et.COORDINATE="coordinate",et.VIEWPORT="viewport",et.SIZE="size",et.UV="uv";const pi=O(et,et.UV),ro=O(et,et.SIZE),Qs=O(et,et.COORDINATE),oo=O(et,et.VIEWPORT);oo.zw,oo.xy;const fs=new J;class Mu extends Js{static get type(){return"ViewportTextureNode"}constructor(t=pi,e=null,s=null){s===null&&(s=new Aa,s.minFilter=Gi),super(s,t,e),this.generateMipmaps=!1,this.isOutputTextureNode=!0,this.updateBeforeType=Q.FRAME}updateBefore(t){const e=t.renderer;e.getDrawingBufferSize(fs);const s=this.value;(s.image.width!==fs.width||s.image.height!==fs.height)&&(s.image.width=fs.width,s.image.height=fs.height,s.needsUpdate=!0);const n=s.generateMipmaps;s.generateMipmaps=this.generateMipmaps,e.copyFramebufferToTexture(s),s.generateMipmaps=n}clone(){const t=new this.constructor(this.uvNode,this.levelNode,this.value);return t.generateMipmaps=this.generateMipmaps,t}}let mi=null;class Su extends Mu{static get type(){return"ViewportDepthTextureNode"}constructor(t=pi,e=null){mi===null&&(mi=new xr),super(t,e,mi)}}const _u=C(Su);class ft extends U{static get type(){return"ViewportDepthNode"}constructor(t,e=null){super("float"),this.scope=t,this.valueNode=e,this.isViewportDepthNode=!0}generate(t){const{scope:e}=this;return e===ft.DEPTH_BASE?t.getFragDepth():super.generate(t)}setup({camera:t}){const{scope:e}=this,s=this.valueNode;let n=null;if(e===ft.DEPTH_BASE)s!==null&&(n=co().assign(s));else if(e===ft.DEPTH)t.isPerspectiveCamera?n=zu(Mt.z,cs,hs):n=Ks(Mt.z,cs,hs);else if(e===ft.LINEAR_DEPTH)if(s!==null)if(t.isPerspectiveCamera){const i=ao(s,cs,hs);n=Ks(i,cs,hs)}else n=s;else n=Ks(Mt.z,cs,hs);return n}}ft.DEPTH_BASE="depthBase",ft.DEPTH="depth",ft.LINEAR_DEPTH="linearDepth";const Ks=(r,t,e)=>r.add(t).div(t.sub(e)),zu=(r,t,e)=>t.add(r).mul(e).div(e.sub(t).mul(r)),ao=(r,t,e)=>t.mul(e).div(e.sub(t).mul(r).sub(e)),co=C(ft,ft.DEPTH_BASE),bu=O(ft,ft.DEPTH),Eu=C(ft,ft.LINEAR_DEPTH);_u(),bu.assign=r=>co(r);class ps extends U{static get type(){return"ClippingNode"}constructor(t=ps.DEFAULT){super(),this.scope=t}setup(t){super.setup(t);const e=t.clippingContext,{localClipIntersection:s,localClippingCount:n,globalClippingCount:i}=e,o=i+n,a=s?o-n:o;return this.scope===ps.ALPHA_TO_COVERAGE?this.setupAlphaToCoverage(e.planes,o,a):this.setupDefault(e.planes,o,a)}setupAlphaToCoverage(t,e,s){return tt(()=>{const n=fi(t),i=ve("float","distanceToPlane"),o=ve("float","distanceToGradient"),a=ve("float","clipOpacity");a.assign(1);let c;if(Oe(s,({i:u})=>{c=n.element(u),i.assign(Mt.dot(c.xyz).negate().add(c.w)),o.assign(i.fwidth().div(2)),a.mulAssign(hi(o.negate(),o,i)),a.equal(0).discard()}),s<e){const u=ve("float","unionclipOpacity");u.assign(1),Oe({start:s,end:e},({i:h})=>{c=n.element(h),i.assign(Mt.dot(c.xyz).negate().add(c.w)),o.assign(i.fwidth().div(2)),u.mulAssign(hi(o.negate(),o,i).oneMinus())}),a.mulAssign(u.oneMinus())}vr.a.mulAssign(a),vr.a.equal(0).discard()})()}setupDefault(t,e,s){return tt(()=>{const n=fi(t);let i;if(Oe(s,({i:o})=>{i=n.element(o),Mt.dot(i.xyz).greaterThan(i.w).discard()}),s<e){const o=ve("bool","clipped");o.assign(!0),Oe({start:s,end:e},({i:a})=>{i=n.element(a),o.assign(Mt.dot(i.xyz).greaterThan(i.w).and(o))}),o.discard()}})()}}ps.ALPHA_TO_COVERAGE="alphaToCoverage",ps.DEFAULT="default",k(.04),q(1);const Cu=tt(([r,t])=>{const e=r.toVar();e.assign(Gs(2,e).sub(1));const s=k(e,1).toVar();return ni(t.equal(0),()=>{s.assign(s.zyx)}).ElseIf(t.equal(1),()=>{s.assign(s.xzy),s.xz.mulAssign(-1)}).ElseIf(t.equal(2),()=>{s.x.mulAssign(-1)}).ElseIf(t.equal(3),()=>{s.assign(s.zyx),s.xz.mulAssign(-1)}).ElseIf(t.equal(4),()=>{s.assign(s.xzy),s.xy.mulAssign(-1)}).ElseIf(t.equal(5),()=>{s.z.mulAssign(-1)}),s}).setLayout({name:"getDirection",type:"vec3",inputs:[{name:"uv",type:"vec2"},{name:"face",type:"float"}]});tt(({texture:r,uv:t})=>{const s=k().toVar();return ni(t.x.lessThan(1e-4),()=>{s.assign(k(1,0,0))}).ElseIf(t.y.lessThan(1e-4),()=>{s.assign(k(0,1,0))}).ElseIf(t.z.lessThan(1e-4),()=>{s.assign(k(0,0,1))}).ElseIf(t.x.greaterThan(1-1e-4),()=>{s.assign(k(-1,0,0))}).ElseIf(t.y.greaterThan(1-1e-4),()=>{s.assign(k(0,-1,0))}).ElseIf(t.z.greaterThan(1-1e-4),()=>{s.assign(k(0,0,-1))}).Else(()=>{const i=r.uv(t.add(k(-.01,0,0))).r.sub(r.uv(t.add(k(.01,0,0))).r),o=r.uv(t.add(k(0,-.01,0))).r.sub(r.uv(t.add(k(0,.01,0))).r),a=r.uv(t.add(k(0,0,-.01))).r.sub(r.uv(t.add(k(0,0,.01))).r);s.assign(k(i,o,a))}),s.normalize()});const yi=Cu(Zs(),os("faceIndex")).normalize();k(yi.x,yi.y.negate(),yi.z);class Pt extends Ie{static get type(){return"TimerNode"}constructor(t=Pt.LOCAL,e=1,s=0){super(s),this.scope=t,this.scale=e,this.updateType=Q.FRAME}update(t){const e=this.scope,s=this.scale;e===Pt.LOCAL?this.value+=t.deltaTime*s:e===Pt.DELTA?this.value=t.deltaTime*s:e===Pt.FRAME?this.value=t.frameId:this.value=t.time*s}serialize(t){super.serialize(t),t.scope=this.scope,t.scale=this.scale}deserialize(t){super.deserialize(t),this.scope=t.scope,this.scale=t.scale}}Pt.LOCAL="local",Pt.GLOBAL="global",Pt.DELTA="delta",Pt.FRAME="frame";const Fu=(r,t=0)=>v(new Pt(Pt.LOCAL,r,t));class rt extends U{static get type(){return"OscNode"}constructor(t=rt.SINE,e=Fu()){super(),this.method=t,this.timeNode=e}getNodeType(t){return this.timeNode.getNodeType(t)}setup(){const t=this.method,e=v(this.timeNode);let s=null;return t===rt.SINE?s=e.add(.75).mul(Math.PI*2).sin().mul(.5).add(.5):t===rt.SQUARE?s=e.fract().round():t===rt.TRIANGLE?s=e.add(.5).fract().mul(2).sub(1).abs():t===rt.SAWTOOTH&&(s=e.fract()),s}serialize(t){super.serialize(t),t.method=this.method}deserialize(t){super.deserialize(t),this.method=t.method}}rt.SINE="sine",rt.SQUARE="square",rt.TRIANGLE="triangle",rt.SAWTOOTH="sawtooth",rt.SINE,rt.SQUARE,rt.TRIANGLE,rt.SAWTOOTH,new Xn,new A,new A,new A,new nt,new A(0,0,-1),new Ft,new A,new A,new Ft,new J,new or,pi.flipX();class Ut extends U{static get type(){return"SceneNode"}constructor(t=Ut.BACKGROUND_BLURRINESS,e=null){super(),this.scope=t,this.scene=e}setup(t){const e=this.scope,s=this.scene!==null?this.scene:t.scene;let n;return e===Ut.BACKGROUND_BLURRINESS?n=pe("backgroundBlurriness","float",s):e===Ut.BACKGROUND_INTENSITY?n=pe("backgroundIntensity","float",s):console.error("THREE.SceneNode: Unknown scope:",e),n}}Ut.BACKGROUND_BLURRINESS="backgroundBlurriness",Ut.BACKGROUND_INTENSITY="backgroundIntensity",Ut.BACKGROUND_BLURRINESS,Ut.BACKGROUND_INTENSITY;const Ru=new J;class Bu extends Js{static get type(){return"PassTextureNode"}constructor(t,e){super(e),this.passNode=t,this.setUpdateMatrix(!1)}setup(t){return t.object.isQuadMesh&&this.passNode.build(t),super.setup(t)}clone(){return new this.constructor(this.passNode,this.value)}}class ho extends Bu{static get type(){return"PassMultipleTextureNode"}constructor(t,e,s=!1){super(t,null),this.textureName=e,this.previousTexture=s}updateTexture(){this.value=this.previousTexture?this.passNode.getPreviousTexture(this.textureName):this.passNode.getTexture(this.textureName)}setup(t){return this.updateTexture(),super.setup(t)}clone(){return new this.constructor(this.passNode,this.textureName,this.previousTexture)}}class tn extends dt{static get type(){return"PassNode"}constructor(t,e,s,n={}){super("vec4"),this.scope=t,this.scene=e,this.camera=s,this.options=n,this._pixelRatio=1,this._width=1,this._height=1;const i=new xr;i.isRenderTargetTexture=!0,i.name="depth";const o=new or(this._width*this._pixelRatio,this._height*this._pixelRatio,{type:vo,...n});o.texture.name="output",o.depthTexture=i,this.renderTarget=o,this.updateBeforeType=Q.FRAME,this._textures={output:o.texture,depth:i},this._textureNodes={},this._linearDepthNodes={},this._viewZNodes={},this._previousTextures={},this._previousTextureNodes={},this._cameraNear=xt(0),this._cameraFar=xt(0),this._mrt=null,this.isPassNode=!0}setMRT(t){return this._mrt=t,this}getMRT(){return this._mrt}isGlobal(){return!0}getTexture(t){let e=this._textures[t];return e===void 0&&(e=this.renderTarget.texture.clone(),e.isRenderTargetTexture=!0,e.name=t,this._textures[t]=e,this.renderTarget.textures.push(e)),e}getPreviousTexture(t){let e=this._previousTextures[t];return e===void 0&&(e=this.getTexture(t).clone(),e.isRenderTargetTexture=!0,this._previousTextures[t]=e),e}toggleTexture(t){const e=this._previousTextures[t];if(e!==void 0){const s=this._textures[t],n=this.renderTarget.textures.indexOf(s);this.renderTarget.textures[n]=e,this._textures[t]=e,this._previousTextures[t]=s,this._textureNodes[t].updateTexture(),this._previousTextureNodes[t].updateTexture()}}getTextureNode(t="output"){let e=this._textureNodes[t];return e===void 0&&(this._textureNodes[t]=e=v(new ho(this,t)),this._textureNodes[t].updateTexture()),e}getPreviousTextureNode(t="output"){let e=this._previousTextureNodes[t];return e===void 0&&(this._textureNodes[t]===void 0&&this.getTextureNode(t),this._previousTextureNodes[t]=e=v(new ho(this,t,!0)),this._previousTextureNodes[t].updateTexture()),e}getViewZNode(t="depth"){let e=this._viewZNodes[t];if(e===void 0){const s=this._cameraNear,n=this._cameraFar;this._viewZNodes[t]=e=ao(this.getTextureNode(t),s,n)}return e}getLinearDepthNode(t="depth"){let e=this._linearDepthNodes[t];if(e===void 0){const s=this._cameraNear,n=this._cameraFar,i=this.getViewZNode(t);this._linearDepthNodes[t]=e=Ks(i,s,n)}return e}setup({renderer:t}){return this.renderTarget.samples=this.options.samples===void 0?t.samples:this.options.samples,t.backend.isWebGLBackend===!0&&(this.renderTarget.samples=0),this.renderTarget.depthTexture.isMultisampleRenderTargetTexture=this.renderTarget.samples>1,this.scope===tn.COLOR?this.getTextureNode():this.getLinearDepthNode()}updateBefore(t){const{renderer:e}=t,{scene:s,camera:n}=this;this._pixelRatio=e.getPixelRatio();const i=e.getSize(Ru);this.setSize(i.width,i.height);const o=e.getRenderTarget(),a=e.getMRT();this._cameraNear.value=n.near,this._cameraFar.value=n.far;for(const c in this._previousTextures)this.toggleTexture(c);e.setRenderTarget(this.renderTarget),e.setMRT(this._mrt),e.render(s,n),e.setRenderTarget(o),e.setMRT(a)}setSize(t,e){this._width=t,this._height=e;const s=this._width*this._pixelRatio,n=this._height*this._pixelRatio;this.renderTarget.setSize(s,n)}setPixelRatio(t){this._pixelRatio=t,this.setSize(this._width,this._height)}dispose(){this.renderTarget.dispose()}}tn.COLOR="color",tn.DEPTH="depth",tt(({depthTexture:r,shadowCoord:t})=>as(r,t.xy).compare(t.z)),tt(({depthTexture:r,shadowCoord:t,shadow:e})=>{const s=(m,g)=>as(r,m).compare(g),n=pe("mapSize","vec2",e).setGroup(de),i=pe("radius","float",e).setGroup(de),o=D(1).div(n),a=o.x.negate().mul(i),c=o.y.negate().mul(i),u=o.x.mul(i),h=o.y.mul(i),l=a.div(2),d=c.div(2),f=u.div(2),p=h.div(2);return fe(s(t.xy.add(D(a,c)),t.z),s(t.xy.add(D(0,c)),t.z),s(t.xy.add(D(u,c)),t.z),s(t.xy.add(D(l,d)),t.z),s(t.xy.add(D(0,d)),t.z),s(t.xy.add(D(f,d)),t.z),s(t.xy.add(D(a,0)),t.z),s(t.xy.add(D(l,0)),t.z),s(t.xy,t.z),s(t.xy.add(D(f,0)),t.z),s(t.xy.add(D(u,0)),t.z),s(t.xy.add(D(l,p)),t.z),s(t.xy.add(D(0,p)),t.z),s(t.xy.add(D(f,p)),t.z),s(t.xy.add(D(a,h)),t.z),s(t.xy.add(D(0,h)),t.z),s(t.xy.add(D(u,h)),t.z)).mul(1/17)}),tt(({depthTexture:r,shadowCoord:t,shadow:e})=>{const s=(h,l)=>as(r,h).compare(l),n=pe("mapSize","vec2",e).setGroup(de),i=D(1).div(n),o=i.x,a=i.y,c=t.xy,u=ri(c.mul(n).add(.5));return c.subAssign(u.mul(i)),fe(s(c,t.z),s(c.add(D(o,0)),t.z),s(c.add(D(0,a)),t.z),s(c.add(i),t.z),re(s(c.add(D(o.negate(),0)),t.z),s(c.add(D(o.mul(2),0)),t.z),u.x),re(s(c.add(D(o.negate(),a)),t.z),s(c.add(D(o.mul(2),a)),t.z),u.x),re(s(c.add(D(0,a.negate())),t.z),s(c.add(D(0,a.mul(2))),t.z),u.y),re(s(c.add(D(o,a.negate())),t.z),s(c.add(D(o,a.mul(2))),t.z),u.y),re(re(s(c.add(D(o.negate(),a.negate())),t.z),s(c.add(D(o.mul(2),a.negate())),t.z),u.x),re(s(c.add(D(o.negate(),a.mul(2))),t.z),s(c.add(D(o.mul(2),a.mul(2))),t.z),u.x),u.y)).mul(1/9)}),tt(({depthTexture:r,shadowCoord:t})=>{const e=q(1).toVar(),s=as(r).uv(t.xy).rg,n=kr(t.z,s.x);return ni(n.notEqual(q(1)),()=>{const i=t.z.sub(s.x),o=ai(0,s.y.mul(s.y));let a=o.div(o.add(i.mul(i)));a=Ws($s(a,.3).div(.95-.3)),e.assign(Ws(ai(n,a)))}),e}),tt(({samples:r,radius:t,size:e,shadowPass:s})=>{const n=q(0).toVar(),i=q(0).toVar(),o=r.lessThanEqual(q(1)).select(q(0),q(2).div(r.sub(1))),a=r.lessThanEqual(q(1)).select(q(0),q(-1));Oe({start:Re(0),end:Re(r),type:"int",condition:"<"},({i:u})=>{const h=a.add(q(u).mul(o)),l=s.uv(fe(Qs.xy,D(0,h).mul(t)).div(e)).x;n.addAssign(l),i.addAssign(l.mul(l))}),n.divAssign(r),i.divAssign(r);const c=ii(i.sub(n.mul(n)));return D(n,c)}),tt(({samples:r,radius:t,size:e,shadowPass:s})=>{const n=q(0).toVar(),i=q(0).toVar(),o=r.lessThanEqual(q(1)).select(q(0),q(2).div(r.sub(1))),a=r.lessThanEqual(q(1)).select(q(0),q(-1));Oe({start:Re(0),end:Re(r),type:"int",condition:"<"},({i:u})=>{const h=a.add(q(u).mul(o)),l=s.uv(fe(Qs.xy,D(h,0).mul(t)).div(e));n.addAssign(l.x),i.addAssign(fe(l.y.mul(l.y),l.x.mul(l.x)))}),n.divAssign(r),i.divAssign(r);const c=ii(i.sub(n.mul(n)));return D(n,c)}),k(1.6605,-.1246,-.0182),k(-.5876,1.1329,-.1006),k(-.0728,-.0083,1.1187),k(.6274,.0691,.0164),k(.3293,.9195,.088),k(.0433,.0113,.8956);class Iu extends U{constructor(t){super(),this.scope=t}generate(t){const{scope:e}=this,{renderer:s}=t;s.backend.isWebGLBackend===!0?t.addFlowCode(`	// ${e}Barrier 
`):t.addLineFlowCode(`${e}Barrier()`,this)}}C(Iu);class kt extends dt{static get type(){return"AtomicFunctionNode"}constructor(t,e,s,n=null){super("uint"),this.method=t,this.pointerNode=e,this.valueNode=s,this.storeNode=n}getInputType(t){return this.pointerNode.getNodeType(t)}getNodeType(t){return this.getInputType(t)}generate(t){const e=this.method,s=this.getNodeType(t),n=this.getInputType(t),i=this.pointerNode,o=this.valueNode,a=[];a.push(`&${i.build(t,n)}`),a.push(o.build(t,n));const c=`${t.getMethod(e,s)}( ${a.join(", ")} )`;if(this.storeNode!==null){const u=this.storeNode.build(t,n);t.addLineFlowCode(`${u} = ${c}`,this)}else t.addLineFlowCode(c,this)}}if(kt.ATOMIC_LOAD="atomicLoad",kt.ATOMIC_STORE="atomicStore",kt.ATOMIC_ADD="atomicAdd",kt.ATOMIC_SUB="atomicSub",kt.ATOMIC_MAX="atomicMax",kt.ATOMIC_MIN="atomicMin",kt.ATOMIC_AND="atomicAnd",kt.ATOMIC_OR="atomicOr",kt.ATOMIC_XOR="atomicXor",C(kt),typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:Xe}})),typeof window<"u"){try{An&&An.tagName.toUpperCase()==="SCRIPT"&&An.src||new URL("assets/generateMeshBVH.worker-b7788939.js",document.baseURI).href,window.__THREE__IMPORTS__||(window.__THREE__IMPORTS__=[]),window.__THREE__IMPORTS__.push({url:self.location.href,revision:Xe})}catch{}window.__THREE__?(console.warn("WARNING: Multiple instances of Three.js being imported. Existing: "+window.__THREE__+", new: "+Xe),console.warn(window.__THREE__IMPORTS__)):window.__THREE__=Xe}const uo=0,vu=1,Pu=2,lo=2,gi=1.25,fo=1,ms=6*4+4+4,en=65535,Lu=Math.pow(2,-24),xi=Symbol("SKIP_GENERATION");function Ou(r){return r.index?r.index.count:r.attributes.position.count}function De(r){return Ou(r)/3}function Du(r,t=ArrayBuffer){return r>65535?new Uint32Array(new t(4*r)):new Uint16Array(new t(2*r))}function Vu(r,t){if(!r.index){const e=r.attributes.position.count,s=t.useSharedArrayBuffer?SharedArrayBuffer:ArrayBuffer,n=Du(e,s);r.setIndex(new vt(n,1));for(let i=0;i<e;i++)n[i]=i}}function po(r,t){const e=De(r),s=t||r.drawRange,n=s.start/3,i=(s.start+s.count)/3,o=Math.max(0,n),a=Math.min(e,i)-o;return[{offset:Math.floor(o),count:Math.floor(a)}]}function mo(r,t){if(!r.groups||!r.groups.length)return po(r,t);const e=[],s=new Set,n=t||r.drawRange,i=n.start/3,o=(n.start+n.count)/3;for(const c of r.groups){const u=c.start/3,h=(c.start+c.count)/3;s.add(Math.max(i,u)),s.add(Math.min(o,h))}const a=Array.from(s.values()).sort((c,u)=>c-u);for(let c=0;c<a.length-1;c++){const u=a[c],h=a[c+1];e.push({offset:Math.floor(u),count:Math.floor(h-u)})}return e}function Uu(r,t){const e=De(r),s=mo(r,t).sort((o,a)=>o.offset-a.offset),n=s[s.length-1];n.count=Math.min(e-n.offset,n.count);let i=0;return s.forEach(({count:o})=>i+=o),e!==i}function Ti(r,t,e,s,n){let i=1/0,o=1/0,a=1/0,c=-1/0,u=-1/0,h=-1/0,l=1/0,d=1/0,f=1/0,p=-1/0,m=-1/0,g=-1/0;for(let y=t*6,T=(t+e)*6;y<T;y+=6){const w=r[y+0],M=r[y+1],N=w-M,_=w+M;N<i&&(i=N),_>c&&(c=_),w<l&&(l=w),w>p&&(p=w);const S=r[y+2],E=r[y+3],F=S-E,R=S+E;F<o&&(o=F),R>u&&(u=R),S<d&&(d=S),S>m&&(m=S);const I=r[y+4],B=r[y+5],P=I-B,L=I+B;P<a&&(a=P),L>h&&(h=L),I<f&&(f=I),I>g&&(g=I)}s[0]=i,s[1]=o,s[2]=a,s[3]=c,s[4]=u,s[5]=h,n[0]=l,n[1]=d,n[2]=f,n[3]=p,n[4]=m,n[5]=g}function ku(r,t=null,e=null,s=null){const n=r.attributes.position,i=r.index?r.index.array:null,o=De(r),a=n.normalized;let c;t===null?(c=new Float32Array(o*6),e=0,s=o):(c=t,e=e||0,s=s||o);const u=n.array,h=n.offset||0;let l=3;n.isInterleavedBufferAttribute&&(l=n.data.stride);const d=["getX","getY","getZ"];for(let f=e;f<e+s;f++){const p=f*3,m=f*6;let g=p+0,y=p+1,T=p+2;i&&(g=i[g],y=i[y],T=i[T]),a||(g=g*l+h,y=y*l+h,T=T*l+h);for(let w=0;w<3;w++){let M,N,_;a?(M=n[d[w]](g),N=n[d[w]](y),_=n[d[w]](T)):(M=u[g+w],N=u[y+w],_=u[T+w]);let S=M;N<S&&(S=N),_<S&&(S=_);let E=M;N>E&&(E=N),_>E&&(E=_);const F=(E-S)/2,R=w*2;c[m+R+0]=S+F,c[m+R+1]=F+(Math.abs(S)+F)*Lu}}return c}function Z(r,t,e){return e.min.x=t[r],e.min.y=t[r+1],e.min.z=t[r+2],e.max.x=t[r+3],e.max.y=t[r+4],e.max.z=t[r+5],e}function yo(r){let t=-1,e=-1/0;for(let s=0;s<3;s++){const n=r[s+3]-r[s];n>e&&(e=n,t=s)}return t}function go(r,t){t.set(r)}function xo(r,t,e){let s,n;for(let i=0;i<3;i++){const o=i+3;s=r[i],n=t[i],e[i]=s<n?s:n,s=r[o],n=t[o],e[o]=s>n?s:n}}function sn(r,t,e){for(let s=0;s<3;s++){const n=t[r+2*s],i=t[r+2*s+1],o=n-i,a=n+i;o<e[s]&&(e[s]=o),a>e[s+3]&&(e[s+3]=a)}}function ys(r){const t=r[3]-r[0],e=r[4]-r[1],s=r[5]-r[2];return 2*(t*e+e*s+s*t)}const jt=32,Hu=(r,t)=>r.candidate-t.candidate,oe=new Array(jt).fill().map(()=>({count:0,bounds:new Float32Array(6),rightCacheBounds:new Float32Array(6),leftCacheBounds:new Float32Array(6),candidate:0})),nn=new Float32Array(6);function qu(r,t,e,s,n,i){let o=-1,a=0;if(i===uo)o=yo(t),o!==-1&&(a=(t[o]+t[o+3])/2);else if(i===vu)o=yo(r),o!==-1&&(a=$u(e,s,n,o));else if(i===Pu){const c=ys(r);let u=gi*n;const h=s*6,l=(s+n)*6;for(let d=0;d<3;d++){const f=t[d],g=(t[d+3]-f)/jt;if(n<jt/4){const y=[...oe];y.length=n;let T=0;for(let M=h;M<l;M+=6,T++){const N=y[T];N.candidate=e[M+2*d],N.count=0;const{bounds:_,leftCacheBounds:S,rightCacheBounds:E}=N;for(let F=0;F<3;F++)E[F]=1/0,E[F+3]=-1/0,S[F]=1/0,S[F+3]=-1/0,_[F]=1/0,_[F+3]=-1/0;sn(M,e,_)}y.sort(Hu);let w=n;for(let M=0;M<w;M++){const N=y[M];for(;M+1<w&&y[M+1].candidate===N.candidate;)y.splice(M+1,1),w--}for(let M=h;M<l;M+=6){const N=e[M+2*d];for(let _=0;_<w;_++){const S=y[_];N>=S.candidate?sn(M,e,S.rightCacheBounds):(sn(M,e,S.leftCacheBounds),S.count++)}}for(let M=0;M<w;M++){const N=y[M],_=N.count,S=n-N.count,E=N.leftCacheBounds,F=N.rightCacheBounds;let R=0;_!==0&&(R=ys(E)/c);let I=0;S!==0&&(I=ys(F)/c);const B=fo+gi*(R*_+I*S);B<u&&(o=d,u=B,a=N.candidate)}}else{for(let w=0;w<jt;w++){const M=oe[w];M.count=0,M.candidate=f+g+w*g;const N=M.bounds;for(let _=0;_<3;_++)N[_]=1/0,N[_+3]=-1/0}for(let w=h;w<l;w+=6){let _=~~((e[w+2*d]-f)/g);_>=jt&&(_=jt-1);const S=oe[_];S.count++,sn(w,e,S.bounds)}const y=oe[jt-1];go(y.bounds,y.rightCacheBounds);for(let w=jt-2;w>=0;w--){const M=oe[w],N=oe[w+1];xo(M.bounds,N.rightCacheBounds,M.rightCacheBounds)}let T=0;for(let w=0;w<jt-1;w++){const M=oe[w],N=M.count,_=M.bounds,E=oe[w+1].rightCacheBounds;N!==0&&(T===0?go(_,nn):xo(_,nn,nn)),T+=N;let F=0,R=0;T!==0&&(F=ys(nn)/c);const I=n-T;I!==0&&(R=ys(E)/c);const B=fo+gi*(F*T+R*I);B<u&&(o=d,u=B,a=M.candidate)}}}}else console.warn(`MeshBVH: Invalid build strategy value ${i} used.`);return{axis:o,pos:a}}function $u(r,t,e,s){let n=0;for(let i=t,o=t+e;i<o;i++)n+=r[i*6+s*2];return n/e}class Ni{constructor(){this.boundingData=new Float32Array(6)}}function Gu(r,t,e,s,n,i){let o=s,a=s+n-1;const c=i.pos,u=i.axis*2;for(;;){for(;o<=a&&e[o*6+u]<c;)o++;for(;o<=a&&e[a*6+u]>=c;)a--;if(o<a){for(let h=0;h<3;h++){let l=t[o*3+h];t[o*3+h]=t[a*3+h],t[a*3+h]=l}for(let h=0;h<6;h++){let l=e[o*6+h];e[o*6+h]=e[a*6+h],e[a*6+h]=l}o++,a--}else return o}}function Wu(r,t,e,s,n,i){let o=s,a=s+n-1;const c=i.pos,u=i.axis*2;for(;;){for(;o<=a&&e[o*6+u]<c;)o++;for(;o<=a&&e[a*6+u]>=c;)a--;if(o<a){let h=r[o];r[o]=r[a],r[a]=h;for(let l=0;l<6;l++){let d=e[o*6+l];e[o*6+l]=e[a*6+l],e[a*6+l]=d}o++,a--}else return o}}function pt(r,t){return t[r+15]===65535}function Tt(r,t){return t[r+6]}function St(r,t){return t[r+14]}function _t(r){return r+8}function zt(r,t){return t[r+6]}function To(r,t){return t[r+7]}function jl(r){return r}let No,gs,rn,wo;const Xu=Math.pow(2,32);function wi(r){return"count"in r?1:1+wi(r.left)+wi(r.right)}function Yu(r,t,e){return No=new Float32Array(e),gs=new Uint32Array(e),rn=new Uint16Array(e),wo=new Uint8Array(e),Ai(r,t)}function Ai(r,t){const e=r/4,s=r/2,n="count"in t,i=t.boundingData;for(let o=0;o<6;o++)No[e+o]=i[o];if(n)if(t.buffer){const o=t.buffer;wo.set(new Uint8Array(o),r);for(let a=r,c=r+o.byteLength;a<c;a+=ms){const u=a/2;pt(u,rn)||(gs[a/4+6]+=e)}return r+o.byteLength}else{const o=t.offset,a=t.count;return gs[e+6]=o,rn[s+14]=a,rn[s+15]=en,r+ms}else{const o=t.left,a=t.right,c=t.splitAxis;let u;if(u=Ai(r+ms,o),u/4>Xu)throw new Error("MeshBVH: Cannot store child pointer greater than 32 bits.");return gs[e+6]=u/4,u=Ai(u,a),gs[e+7]=c,u}}function Zu(r,t){const e=(r.index?r.index.count:r.attributes.position.count)/3,s=e>2**16,n=s?4:2,i=t?new SharedArrayBuffer(e*n):new ArrayBuffer(e*n),o=s?new Uint32Array(i):new Uint16Array(i);for(let a=0,c=o.length;a<c;a++)o[a]=a;return o}function Ju(r,t,e,s,n){const{maxDepth:i,verbose:o,maxLeafTris:a,strategy:c,onProgress:u,indirect:h}=n,l=r._indirectBuffer,d=r.geometry,f=d.index?d.index.array:null,p=h?Wu:Gu,m=De(d),g=new Float32Array(6);let y=!1;const T=new Ni;return Ti(t,e,s,T.boundingData,g),M(T,e,s,g),T;function w(N){u&&u(N/m)}function M(N,_,S,E=null,F=0){if(!y&&F>=i&&(y=!0,o&&(console.warn(`MeshBVH: Max depth of ${i} reached when generating BVH. Consider increasing maxDepth.`),console.warn(d))),S<=a||F>=i)return w(_+S),N.offset=_,N.count=S,N;const R=qu(N.boundingData,E,t,_,S,c);if(R.axis===-1)return w(_+S),N.offset=_,N.count=S,N;const I=p(l,f,t,_,S,R);if(I===_||I===_+S)w(_+S),N.offset=_,N.count=S;else{N.splitAxis=R.axis;const B=new Ni,P=_,L=I-_;N.left=B,Ti(t,P,L,B.boundingData,g),M(B,P,L,g,F+1);const V=new Ni,G=I,Nt=S-L;N.right=V,Ti(t,G,Nt,V.boundingData,g),M(V,G,Nt,g,F+1)}return N}}function ju(r,t){const e=r.geometry;t.indirect&&(r._indirectBuffer=Zu(e,t.useSharedArrayBuffer),Uu(e,t.range)&&!t.verbose&&console.warn('MeshBVH: Provided geometry contains groups or a range that do not fully span the vertex contents while using the "indirect" option. BVH may incorrectly report intersections on unrendered portions of the geometry.')),r._indirectBuffer||Vu(e,t);const s=t.useSharedArrayBuffer?SharedArrayBuffer:ArrayBuffer,n=ku(e),i=t.indirect?po(e,t.range):mo(e,t.range);r._roots=i.map(o=>{const a=Ju(r,n,o.offset,o.count,t),c=wi(a),u=new s(ms*c);return Yu(0,a,u),u})}class Qt{constructor(){this.min=1/0,this.max=-1/0}setFromPointsField(t,e){let s=1/0,n=-1/0;for(let i=0,o=t.length;i<o;i++){const c=t[i][e];s=c<s?c:s,n=c>n?c:n}this.min=s,this.max=n}setFromPoints(t,e){let s=1/0,n=-1/0;for(let i=0,o=e.length;i<o;i++){const a=e[i],c=t.dot(a);s=c<s?c:s,n=c>n?c:n}this.min=s,this.max=n}isSeparated(t){return this.min>t.max||t.min>this.max}}Qt.prototype.setFromBox=function(){const r=new A;return function(e,s){const n=s.min,i=s.max;let o=1/0,a=-1/0;for(let c=0;c<=1;c++)for(let u=0;u<=1;u++)for(let h=0;h<=1;h++){r.x=n.x*c+i.x*(1-c),r.y=n.y*u+i.y*(1-u),r.z=n.z*h+i.z*(1-h);const l=e.dot(r);o=Math.min(l,o),a=Math.max(l,a)}this.min=o,this.max=a}}();const Qu=function(){const r=new A,t=new A,e=new A;return function(n,i,o){const a=n.start,c=r,u=i.start,h=t;e.subVectors(a,u),r.subVectors(n.end,n.start),t.subVectors(i.end,i.start);const l=e.dot(h),d=h.dot(c),f=h.dot(h),p=e.dot(c),g=c.dot(c)*f-d*d;let y,T;g!==0?y=(l*d-p*f)/g:y=0,T=(l+y*d)/f,o.x=y,o.y=T}}(),Mi=function(){const r=new J,t=new A,e=new A;return function(n,i,o,a){Qu(n,i,r);let c=r.x,u=r.y;if(c>=0&&c<=1&&u>=0&&u<=1){n.at(c,o),i.at(u,a);return}else if(c>=0&&c<=1){u<0?i.at(0,a):i.at(1,a),n.closestPointToPoint(a,!0,o);return}else if(u>=0&&u<=1){c<0?n.at(0,o):n.at(1,o),i.closestPointToPoint(o,!0,a);return}else{let h;c<0?h=n.start:h=n.end;let l;u<0?l=i.start:l=i.end;const d=t,f=e;if(n.closestPointToPoint(l,!0,t),i.closestPointToPoint(h,!0,e),d.distanceToSquared(l)<=f.distanceToSquared(h)){o.copy(d),a.copy(l);return}else{o.copy(h),a.copy(f);return}}}}(),Ku=function(){const r=new A,t=new A,e=new Xn,s=new Zt;return function(i,o){const{radius:a,center:c}=i,{a:u,b:h,c:l}=o;if(s.start=u,s.end=h,s.closestPointToPoint(c,!0,r).distanceTo(c)<=a||(s.start=u,s.end=l,s.closestPointToPoint(c,!0,r).distanceTo(c)<=a)||(s.start=h,s.end=l,s.closestPointToPoint(c,!0,r).distanceTo(c)<=a))return!0;const m=o.getPlane(e);if(Math.abs(m.distanceToPoint(c))<=a){const y=m.projectPoint(c,t);if(o.containsPoint(y))return!0}return!1}}(),tl=1e-15;function Si(r){return Math.abs(r)<tl}class Lt extends wt{constructor(...t){super(...t),this.isExtendedTriangle=!0,this.satAxes=new Array(4).fill().map(()=>new A),this.satBounds=new Array(4).fill().map(()=>new Qt),this.points=[this.a,this.b,this.c],this.sphere=new cr,this.plane=new Xn,this.needsUpdate=!0}intersectsSphere(t){return Ku(t,this)}update(){const t=this.a,e=this.b,s=this.c,n=this.points,i=this.satAxes,o=this.satBounds,a=i[0],c=o[0];this.getNormal(a),c.setFromPoints(a,n);const u=i[1],h=o[1];u.subVectors(t,e),h.setFromPoints(u,n);const l=i[2],d=o[2];l.subVectors(e,s),d.setFromPoints(l,n);const f=i[3],p=o[3];f.subVectors(s,t),p.setFromPoints(f,n),this.sphere.setFromPoints(this.points),this.plane.setFromNormalAndCoplanarPoint(a,t),this.needsUpdate=!1}}Lt.prototype.closestPointToSegment=function(){const r=new A,t=new A,e=new Zt;return function(n,i=null,o=null){const{start:a,end:c}=n,u=this.points;let h,l=1/0;for(let d=0;d<3;d++){const f=(d+1)%3;e.start.copy(u[d]),e.end.copy(u[f]),Mi(e,n,r,t),h=r.distanceToSquared(t),h<l&&(l=h,i&&i.copy(r),o&&o.copy(t))}return this.closestPointToPoint(a,r),h=a.distanceToSquared(r),h<l&&(l=h,i&&i.copy(r),o&&o.copy(a)),this.closestPointToPoint(c,r),h=c.distanceToSquared(r),h<l&&(l=h,i&&i.copy(r),o&&o.copy(c)),Math.sqrt(l)}}(),Lt.prototype.intersectsTriangle=function(){const r=new Lt,t=new Array(3),e=new Array(3),s=new Qt,n=new Qt,i=new A,o=new A,a=new A,c=new A,u=new A,h=new Zt,l=new Zt,d=new Zt,f=new A;function p(m,g,y){const T=m.points;let w=0,M=-1;for(let N=0;N<3;N++){const{start:_,end:S}=h;_.copy(T[N]),S.copy(T[(N+1)%3]),h.delta(o);const E=Si(g.distanceToPoint(_));if(Si(g.normal.dot(o))&&E){y.copy(h),w=2;break}const F=g.intersectLine(h,f);if(!F&&E&&f.copy(_),(F||E)&&!Si(f.distanceTo(S))){if(w<=1)(w===1?y.start:y.end).copy(f),E&&(M=w);else if(w>=2){(M===1?y.start:y.end).copy(f),w=2;break}if(w++,w===2&&M===-1)break}}return w}return function(g,y=null,T=!1){this.needsUpdate&&this.update(),g.isExtendedTriangle?g.needsUpdate&&g.update():(r.copy(g),r.update(),g=r);const w=this.plane,M=g.plane;if(Math.abs(w.normal.dot(M.normal))>1-1e-10){const N=this.satBounds,_=this.satAxes;e[0]=g.a,e[1]=g.b,e[2]=g.c;for(let F=0;F<4;F++){const R=N[F],I=_[F];if(s.setFromPoints(I,e),R.isSeparated(s))return!1}const S=g.satBounds,E=g.satAxes;t[0]=this.a,t[1]=this.b,t[2]=this.c;for(let F=0;F<4;F++){const R=S[F],I=E[F];if(s.setFromPoints(I,t),R.isSeparated(s))return!1}for(let F=0;F<4;F++){const R=_[F];for(let I=0;I<4;I++){const B=E[I];if(i.crossVectors(R,B),s.setFromPoints(i,t),n.setFromPoints(i,e),s.isSeparated(n))return!1}}return y&&(T||console.warn("ExtendedTriangle.intersectsTriangle: Triangles are coplanar which does not support an output edge. Setting edge to 0, 0, 0."),y.start.set(0,0,0),y.end.set(0,0,0)),!0}else{const N=p(this,M,l);if(N===1&&g.containsPoint(l.end))return y&&(y.start.copy(l.end),y.end.copy(l.end)),!0;if(N!==2)return!1;const _=p(g,w,d);if(_===1&&this.containsPoint(d.end))return y&&(y.start.copy(d.end),y.end.copy(d.end)),!0;if(_!==2)return!1;if(l.delta(a),d.delta(c),a.dot(c)<0){let P=d.start;d.start=d.end,d.end=P}const S=l.start.dot(a),E=l.end.dot(a),F=d.start.dot(a),R=d.end.dot(a),I=E<F,B=S<R;return S!==R&&F!==E&&I===B?!1:(y&&(u.subVectors(l.start,d.start),u.dot(a)>0?y.start.copy(l.start):y.start.copy(d.start),u.subVectors(l.end,d.end),u.dot(a)<0?y.end.copy(l.end):y.end.copy(d.end)),!0)}}}(),Lt.prototype.distanceToPoint=function(){const r=new A;return function(e){return this.closestPointToPoint(e,r),e.distanceTo(r)}}(),Lt.prototype.distanceToTriangle=function(){const r=new A,t=new A,e=["a","b","c"],s=new Zt,n=new Zt;return function(o,a=null,c=null){const u=a||c?s:null;if(this.intersectsTriangle(o,u))return(a||c)&&(a&&u.getCenter(a),c&&u.getCenter(c)),0;let h=1/0;for(let l=0;l<3;l++){let d;const f=e[l],p=o[f];this.closestPointToPoint(p,r),d=p.distanceToSquared(r),d<h&&(h=d,a&&a.copy(r),c&&c.copy(p));const m=this[f];o.closestPointToPoint(m,r),d=m.distanceToSquared(r),d<h&&(h=d,a&&a.copy(m),c&&c.copy(r))}for(let l=0;l<3;l++){const d=e[l],f=e[(l+1)%3];s.set(this[d],this[f]);for(let p=0;p<3;p++){const m=e[p],g=e[(p+1)%3];n.set(o[m],o[g]),Mi(s,n,r,t);const y=r.distanceToSquared(t);y<h&&(h=y,a&&a.copy(r),c&&c.copy(t))}}return Math.sqrt(h)}}();class lt{constructor(t,e,s){this.isOrientedBox=!0,this.min=new A,this.max=new A,this.matrix=new nt,this.invMatrix=new nt,this.points=new Array(8).fill().map(()=>new A),this.satAxes=new Array(3).fill().map(()=>new A),this.satBounds=new Array(3).fill().map(()=>new Qt),this.alignedSatBounds=new Array(3).fill().map(()=>new Qt),this.needsUpdate=!1,t&&this.min.copy(t),e&&this.max.copy(e),s&&this.matrix.copy(s)}set(t,e,s){this.min.copy(t),this.max.copy(e),this.matrix.copy(s),this.needsUpdate=!0}copy(t){this.min.copy(t.min),this.max.copy(t.max),this.matrix.copy(t.matrix),this.needsUpdate=!0}}lt.prototype.update=function(){return function(){const t=this.matrix,e=this.min,s=this.max,n=this.points;for(let u=0;u<=1;u++)for(let h=0;h<=1;h++)for(let l=0;l<=1;l++){const d=1*u|2*h|4*l,f=n[d];f.x=u?s.x:e.x,f.y=h?s.y:e.y,f.z=l?s.z:e.z,f.applyMatrix4(t)}const i=this.satBounds,o=this.satAxes,a=n[0];for(let u=0;u<3;u++){const h=o[u],l=i[u],d=1<<u,f=n[d];h.subVectors(a,f),l.setFromPoints(h,n)}const c=this.alignedSatBounds;c[0].setFromPointsField(n,"x"),c[1].setFromPointsField(n,"y"),c[2].setFromPointsField(n,"z"),this.invMatrix.copy(this.matrix).invert(),this.needsUpdate=!1}}(),lt.prototype.intersectsBox=function(){const r=new Qt;return function(e){this.needsUpdate&&this.update();const s=e.min,n=e.max,i=this.satBounds,o=this.satAxes,a=this.alignedSatBounds;if(r.min=s.x,r.max=n.x,a[0].isSeparated(r)||(r.min=s.y,r.max=n.y,a[1].isSeparated(r))||(r.min=s.z,r.max=n.z,a[2].isSeparated(r)))return!1;for(let c=0;c<3;c++){const u=o[c],h=i[c];if(r.setFromBox(u,e),h.isSeparated(r))return!1}return!0}}(),lt.prototype.intersectsTriangle=function(){const r=new Lt,t=new Array(3),e=new Qt,s=new Qt,n=new A;return function(o){this.needsUpdate&&this.update(),o.isExtendedTriangle?o.needsUpdate&&o.update():(r.copy(o),r.update(),o=r);const a=this.satBounds,c=this.satAxes;t[0]=o.a,t[1]=o.b,t[2]=o.c;for(let d=0;d<3;d++){const f=a[d],p=c[d];if(e.setFromPoints(p,t),f.isSeparated(e))return!1}const u=o.satBounds,h=o.satAxes,l=this.points;for(let d=0;d<3;d++){const f=u[d],p=h[d];if(e.setFromPoints(p,l),f.isSeparated(e))return!1}for(let d=0;d<3;d++){const f=c[d];for(let p=0;p<4;p++){const m=h[p];if(n.crossVectors(f,m),e.setFromPoints(n,t),s.setFromPoints(n,l),e.isSeparated(s))return!1}}return!0}}(),lt.prototype.closestPointToPoint=function(){return function(t,e){return this.needsUpdate&&this.update(),e.copy(t).applyMatrix4(this.invMatrix).clamp(this.min,this.max).applyMatrix4(this.matrix),e}}(),lt.prototype.distanceToPoint=function(){const r=new A;return function(e){return this.closestPointToPoint(e,r),e.distanceTo(r)}}(),lt.prototype.distanceToBox=function(){const r=["x","y","z"],t=new Array(12).fill().map(()=>new Zt),e=new Array(12).fill().map(()=>new Zt),s=new A,n=new A;return function(o,a=0,c=null,u=null){if(this.needsUpdate&&this.update(),this.intersectsBox(o))return(c||u)&&(o.getCenter(n),this.closestPointToPoint(n,s),o.closestPointToPoint(s,n),c&&c.copy(s),u&&u.copy(n)),0;const h=a*a,l=o.min,d=o.max,f=this.points;let p=1/0;for(let g=0;g<8;g++){const y=f[g];n.copy(y).clamp(l,d);const T=y.distanceToSquared(n);if(T<p&&(p=T,c&&c.copy(y),u&&u.copy(n),T<h))return Math.sqrt(T)}let m=0;for(let g=0;g<3;g++)for(let y=0;y<=1;y++)for(let T=0;T<=1;T++){const w=(g+1)%3,M=(g+2)%3,N=y<<w|T<<M,_=1<<g|y<<w|T<<M,S=f[N],E=f[_];t[m].set(S,E);const R=r[g],I=r[w],B=r[M],P=e[m],L=P.start,V=P.end;L[R]=l[R],L[I]=y?l[I]:d[I],L[B]=T?l[B]:d[I],V[R]=d[R],V[I]=y?l[I]:d[I],V[B]=T?l[B]:d[I],m++}for(let g=0;g<=1;g++)for(let y=0;y<=1;y++)for(let T=0;T<=1;T++){n.x=g?d.x:l.x,n.y=y?d.y:l.y,n.z=T?d.z:l.z,this.closestPointToPoint(n,s);const w=n.distanceToSquared(s);if(w<p&&(p=w,c&&c.copy(s),u&&u.copy(n),w<h))return Math.sqrt(w)}for(let g=0;g<12;g++){const y=t[g];for(let T=0;T<12;T++){const w=e[T];Mi(y,w,s,n);const M=s.distanceToSquared(n);if(M<p&&(p=M,c&&c.copy(s),u&&u.copy(n),M<h))return Math.sqrt(M)}}return Math.sqrt(p)}}();class _i{constructor(t){this._getNewPrimitive=t,this._primitives=[]}getPrimitive(){const t=this._primitives;return t.length===0?this._getNewPrimitive():t.pop()}releasePrimitive(t){this._primitives.push(t)}}class el extends _i{constructor(){super(()=>new Lt)}}const bt=new el;class sl{constructor(){this.float32Array=null,this.uint16Array=null,this.uint32Array=null;const t=[];let e=null;this.setBuffer=s=>{e&&t.push(e),e=s,this.float32Array=new Float32Array(s),this.uint16Array=new Uint16Array(s),this.uint32Array=new Uint32Array(s)},this.clearBuffer=()=>{e=null,this.float32Array=null,this.uint16Array=null,this.uint32Array=null,t.length!==0&&this.setBuffer(t.pop())}}}const X=new sl;let ae,Ve;const Ue=[],on=new _i(()=>new ht);function nl(r,t,e,s,n,i){ae=on.getPrimitive(),Ve=on.getPrimitive(),Ue.push(ae,Ve),X.setBuffer(r._roots[t]);const o=zi(0,r.geometry,e,s,n,i);X.clearBuffer(),on.releasePrimitive(ae),on.releasePrimitive(Ve),Ue.pop(),Ue.pop();const a=Ue.length;return a>0&&(Ve=Ue[a-1],ae=Ue[a-2]),o}function zi(r,t,e,s,n=null,i=0,o=0){const{float32Array:a,uint16Array:c,uint32Array:u}=X;let h=r*2;if(pt(h,c)){const d=Tt(r,u),f=St(h,c);return Z(r,a,ae),s(d,f,!1,o,i+r,ae)}else{let R=function(B){const{uint16Array:P,uint32Array:L}=X;let V=B*2;for(;!pt(V,P);)B=_t(B),V=B*2;return Tt(B,L)},I=function(B){const{uint16Array:P,uint32Array:L}=X;let V=B*2;for(;!pt(V,P);)B=zt(B,L),V=B*2;return Tt(B,L)+St(V,P)};const d=_t(r),f=zt(r,u);let p=d,m=f,g,y,T,w;if(n&&(T=ae,w=Ve,Z(p,a,T),Z(m,a,w),g=n(T),y=n(w),y<g)){p=f,m=d;const B=g;g=y,y=B,T=w}T||(T=ae,Z(p,a,T));const M=pt(p*2,c),N=e(T,M,g,o+1,i+p);let _;if(N===lo){const B=R(p),L=I(p)-B;_=s(B,L,!0,o+1,i+p,T)}else _=N&&zi(p,t,e,s,n,i,o+1);if(_)return!0;w=Ve,Z(m,a,w);const S=pt(m*2,c),E=e(w,S,y,o+1,i+m);let F;if(E===lo){const B=R(m),L=I(m)-B;F=s(B,L,!0,o+1,i+m,w)}else F=E&&zi(m,t,e,s,n,i,o+1);return!!F}}const xs=new A,bi=new A;function il(r,t,e={},s=0,n=1/0){const i=s*s,o=n*n;let a=1/0,c=null;if(r.shapecast({boundsTraverseOrder:h=>(xs.copy(t).clamp(h.min,h.max),xs.distanceToSquared(t)),intersectsBounds:(h,l,d)=>d<a&&d<o,intersectsTriangle:(h,l)=>{h.closestPointToPoint(t,xs);const d=t.distanceToSquared(xs);return d<a&&(bi.copy(xs),a=d,c=l),d<i}}),a===1/0)return null;const u=Math.sqrt(a);return e.point?e.point.copy(bi):e.point=bi.clone(),e.distance=u,e.faceIndex=c,e}const rl=parseInt(Xe)>=169,me=new A,ye=new A,ge=new A,an=new J,cn=new J,hn=new J,Ao=new A,Mo=new A,So=new A,Ts=new A;function ol(r,t,e,s,n,i,o,a){let c;if(i===Ui?c=r.intersectTriangle(s,e,t,!0,n):c=r.intersectTriangle(t,e,s,i!==Eo,n),c===null)return null;const u=r.origin.distanceTo(n);return u<o||u>a?null:{distance:u,point:n.clone()}}function al(r,t,e,s,n,i,o,a,c,u,h){me.fromBufferAttribute(t,i),ye.fromBufferAttribute(t,o),ge.fromBufferAttribute(t,a);const l=ol(r,me,ye,ge,Ts,c,u,h);if(l){const d=new A;wt.getBarycoord(Ts,me,ye,ge,d),s&&(an.fromBufferAttribute(s,i),cn.fromBufferAttribute(s,o),hn.fromBufferAttribute(s,a),l.uv=wt.getInterpolation(Ts,me,ye,ge,an,cn,hn,new J)),n&&(an.fromBufferAttribute(n,i),cn.fromBufferAttribute(n,o),hn.fromBufferAttribute(n,a),l.uv1=wt.getInterpolation(Ts,me,ye,ge,an,cn,hn,new J)),e&&(Ao.fromBufferAttribute(e,i),Mo.fromBufferAttribute(e,o),So.fromBufferAttribute(e,a),l.normal=wt.getInterpolation(Ts,me,ye,ge,Ao,Mo,So,new A),l.normal.dot(r.direction)>0&&l.normal.multiplyScalar(-1));const f={a:i,b:o,c:a,normal:new A,materialIndex:0};wt.getNormal(me,ye,ge,f.normal),l.face=f,l.faceIndex=i,rl&&(l.barycoord=d)}return l}function un(r,t,e,s,n,i,o){const a=s*3;let c=a+0,u=a+1,h=a+2;const l=r.index;r.index&&(c=l.getX(c),u=l.getX(u),h=l.getX(h));const{position:d,normal:f,uv:p,uv1:m}=r.attributes,g=al(e,d,f,p,m,c,u,h,t,i,o);return g?(g.faceIndex=s,n&&n.push(g),g):null}function st(r,t,e,s){const n=r.a,i=r.b,o=r.c;let a=t,c=t+1,u=t+2;e&&(a=e.getX(a),c=e.getX(c),u=e.getX(u)),n.x=s.getX(a),n.y=s.getY(a),n.z=s.getZ(a),i.x=s.getX(c),i.y=s.getY(c),i.z=s.getZ(c),o.x=s.getX(u),o.y=s.getY(u),o.z=s.getZ(u)}function cl(r,t,e,s,n,i,o,a){const{geometry:c,_indirectBuffer:u}=r;for(let h=s,l=s+n;h<l;h++)un(c,t,e,h,i,o,a)}function hl(r,t,e,s,n,i,o){const{geometry:a,_indirectBuffer:c}=r;let u=1/0,h=null;for(let l=s,d=s+n;l<d;l++){let f;f=un(a,t,e,l,null,i,o),f&&f.distance<u&&(h=f,u=f.distance)}return h}function ul(r,t,e,s,n,i,o){const{geometry:a}=e,{index:c}=a,u=a.attributes.position;for(let h=r,l=t+r;h<l;h++){let d;if(d=h,st(o,d*3,c,u),o.needsUpdate=!0,s(o,d,n,i))return!0}return!1}function ll(r,t=null){t&&Array.isArray(t)&&(t=new Set(t));const e=r.geometry,s=e.index?e.index.array:null,n=e.attributes.position;let i,o,a,c,u=0;const h=r._roots;for(let d=0,f=h.length;d<f;d++)i=h[d],o=new Uint32Array(i),a=new Uint16Array(i),c=new Float32Array(i),l(0,u),u+=i.byteLength;function l(d,f,p=!1){const m=d*2;if(a[m+15]===en){const y=o[d+6],T=a[m+14];let w=1/0,M=1/0,N=1/0,_=-1/0,S=-1/0,E=-1/0;for(let F=3*y,R=3*(y+T);F<R;F++){let I=s[F];const B=n.getX(I),P=n.getY(I),L=n.getZ(I);B<w&&(w=B),B>_&&(_=B),P<M&&(M=P),P>S&&(S=P),L<N&&(N=L),L>E&&(E=L)}return c[d+0]!==w||c[d+1]!==M||c[d+2]!==N||c[d+3]!==_||c[d+4]!==S||c[d+5]!==E?(c[d+0]=w,c[d+1]=M,c[d+2]=N,c[d+3]=_,c[d+4]=S,c[d+5]=E,!0):!1}else{const y=d+8,T=o[d+6],w=y+f,M=T+f;let N=p,_=!1,S=!1;t?N||(_=t.has(w),S=t.has(M),N=!_&&!S):(_=!0,S=!0);const E=N||_,F=N||S;let R=!1;E&&(R=l(y,f,N));let I=!1;F&&(I=l(T,f,N));const B=R||I;if(B)for(let P=0;P<3;P++){const L=y+P,V=T+P,G=c[L],Nt=c[L+3],Ht=c[V],qt=c[V+3];c[d+P]=G<Ht?G:Ht,c[d+P+3]=Nt>qt?Nt:qt}return B}}}function ce(r,t,e,s,n){let i,o,a,c,u,h;const l=1/e.direction.x,d=1/e.direction.y,f=1/e.direction.z,p=e.origin.x,m=e.origin.y,g=e.origin.z;let y=t[r],T=t[r+3],w=t[r+1],M=t[r+3+1],N=t[r+2],_=t[r+3+2];return l>=0?(i=(y-p)*l,o=(T-p)*l):(i=(T-p)*l,o=(y-p)*l),d>=0?(a=(w-m)*d,c=(M-m)*d):(a=(M-m)*d,c=(w-m)*d),i>c||a>o||((a>i||isNaN(i))&&(i=a),(c<o||isNaN(o))&&(o=c),f>=0?(u=(N-g)*f,h=(_-g)*f):(u=(_-g)*f,h=(N-g)*f),i>h||u>o)?!1:((u>i||i!==i)&&(i=u),(h<o||o!==o)&&(o=h),i<=n&&o>=s)}function dl(r,t,e,s,n,i,o,a){const{geometry:c,_indirectBuffer:u}=r;for(let h=s,l=s+n;h<l;h++){let d=u?u[h]:h;un(c,t,e,d,i,o,a)}}function fl(r,t,e,s,n,i,o){const{geometry:a,_indirectBuffer:c}=r;let u=1/0,h=null;for(let l=s,d=s+n;l<d;l++){let f;f=un(a,t,e,c?c[l]:l,null,i,o),f&&f.distance<u&&(h=f,u=f.distance)}return h}function pl(r,t,e,s,n,i,o){const{geometry:a}=e,{index:c}=a,u=a.attributes.position;for(let h=r,l=t+r;h<l;h++){let d;if(d=e.resolveTriangleIndex(h),st(o,d*3,c,u),o.needsUpdate=!0,s(o,d,n,i))return!0}return!1}function ml(r,t,e,s,n,i,o){X.setBuffer(r._roots[t]),Ei(0,r,e,s,n,i,o),X.clearBuffer()}function Ei(r,t,e,s,n,i,o){const{float32Array:a,uint16Array:c,uint32Array:u}=X,h=r*2;if(pt(h,c)){const d=Tt(r,u),f=St(h,c);cl(t,e,s,d,f,n,i,o)}else{const d=_t(r);ce(d,a,s,i,o)&&Ei(d,t,e,s,n,i,o);const f=zt(r,u);ce(f,a,s,i,o)&&Ei(f,t,e,s,n,i,o)}}const yl=["x","y","z"];function gl(r,t,e,s,n,i){X.setBuffer(r._roots[t]);const o=Ci(0,r,e,s,n,i);return X.clearBuffer(),o}function Ci(r,t,e,s,n,i){const{float32Array:o,uint16Array:a,uint32Array:c}=X;let u=r*2;if(pt(u,a)){const l=Tt(r,c),d=St(u,a);return hl(t,e,s,l,d,n,i)}else{const l=To(r,c),d=yl[l],p=s.direction[d]>=0;let m,g;p?(m=_t(r),g=zt(r,c)):(m=zt(r,c),g=_t(r));const T=ce(m,o,s,n,i)?Ci(m,t,e,s,n,i):null;if(T){const N=T.point[d];if(p?N<=o[g+l]:N>=o[g+l+3])return T}const M=ce(g,o,s,n,i)?Ci(g,t,e,s,n,i):null;return T&&M?T.distance<=M.distance?T:M:T||M||null}}const ln=new ht,ke=new Lt,He=new Lt,Ns=new nt,_o=new lt,dn=new lt;function xl(r,t,e,s){X.setBuffer(r._roots[t]);const n=Fi(0,r,e,s);return X.clearBuffer(),n}function Fi(r,t,e,s,n=null){const{float32Array:i,uint16Array:o,uint32Array:a}=X;let c=r*2;if(n===null&&(e.boundingBox||e.computeBoundingBox(),_o.set(e.boundingBox.min,e.boundingBox.max,s),n=_o),pt(c,o)){const h=t.geometry,l=h.index,d=h.attributes.position,f=e.index,p=e.attributes.position,m=Tt(r,a),g=St(c,o);if(Ns.copy(s).invert(),e.boundsTree)return Z(r,i,dn),dn.matrix.copy(Ns),dn.needsUpdate=!0,e.boundsTree.shapecast({intersectsBounds:T=>dn.intersectsBox(T),intersectsTriangle:T=>{T.a.applyMatrix4(s),T.b.applyMatrix4(s),T.c.applyMatrix4(s),T.needsUpdate=!0;for(let w=m*3,M=(g+m)*3;w<M;w+=3)if(st(He,w,l,d),He.needsUpdate=!0,T.intersectsTriangle(He))return!0;return!1}});for(let y=m*3,T=(g+m)*3;y<T;y+=3){st(ke,y,l,d),ke.a.applyMatrix4(Ns),ke.b.applyMatrix4(Ns),ke.c.applyMatrix4(Ns),ke.needsUpdate=!0;for(let w=0,M=f.count;w<M;w+=3)if(st(He,w,f,p),He.needsUpdate=!0,ke.intersectsTriangle(He))return!0}}else{const h=r+8,l=a[r+6];return Z(h,i,ln),!!(n.intersectsBox(ln)&&Fi(h,t,e,s,n)||(Z(l,i,ln),n.intersectsBox(ln)&&Fi(l,t,e,s,n)))}}const fn=new nt,Ri=new lt,ws=new lt,Tl=new A,Nl=new A,wl=new A,Al=new A;function Ml(r,t,e,s={},n={},i=0,o=1/0){t.boundingBox||t.computeBoundingBox(),Ri.set(t.boundingBox.min,t.boundingBox.max,e),Ri.needsUpdate=!0;const a=r.geometry,c=a.attributes.position,u=a.index,h=t.attributes.position,l=t.index,d=bt.getPrimitive(),f=bt.getPrimitive();let p=Tl,m=Nl,g=null,y=null;n&&(g=wl,y=Al);let T=1/0,w=null,M=null;return fn.copy(e).invert(),ws.matrix.copy(fn),r.shapecast({boundsTraverseOrder:N=>Ri.distanceToBox(N),intersectsBounds:(N,_,S)=>S<T&&S<o?(_&&(ws.min.copy(N.min),ws.max.copy(N.max),ws.needsUpdate=!0),!0):!1,intersectsRange:(N,_)=>{if(t.boundsTree)return t.boundsTree.shapecast({boundsTraverseOrder:E=>ws.distanceToBox(E),intersectsBounds:(E,F,R)=>R<T&&R<o,intersectsRange:(E,F)=>{for(let R=E,I=E+F;R<I;R++){st(f,3*R,l,h),f.a.applyMatrix4(e),f.b.applyMatrix4(e),f.c.applyMatrix4(e),f.needsUpdate=!0;for(let B=N,P=N+_;B<P;B++){st(d,3*B,u,c),d.needsUpdate=!0;const L=d.distanceToTriangle(f,p,g);if(L<T&&(m.copy(p),y&&y.copy(g),T=L,w=B,M=R),L<i)return!0}}}});{const S=De(t);for(let E=0,F=S;E<F;E++){st(f,3*E,l,h),f.a.applyMatrix4(e),f.b.applyMatrix4(e),f.c.applyMatrix4(e),f.needsUpdate=!0;for(let R=N,I=N+_;R<I;R++){st(d,3*R,u,c),d.needsUpdate=!0;const B=d.distanceToTriangle(f,p,g);if(B<T&&(m.copy(p),y&&y.copy(g),T=B,w=R,M=E),B<i)return!0}}}}}),bt.releasePrimitive(d),bt.releasePrimitive(f),T===1/0?null:(s.point?s.point.copy(m):s.point=m.clone(),s.distance=T,s.faceIndex=w,n&&(n.point?n.point.copy(y):n.point=y.clone(),n.point.applyMatrix4(fn),m.applyMatrix4(fn),n.distance=m.sub(n.point).length(),n.faceIndex=M),s)}function Sl(r,t=null){t&&Array.isArray(t)&&(t=new Set(t));const e=r.geometry,s=e.index?e.index.array:null,n=e.attributes.position;let i,o,a,c,u=0;const h=r._roots;for(let d=0,f=h.length;d<f;d++)i=h[d],o=new Uint32Array(i),a=new Uint16Array(i),c=new Float32Array(i),l(0,u),u+=i.byteLength;function l(d,f,p=!1){const m=d*2;if(a[m+15]===en){const y=o[d+6],T=a[m+14];let w=1/0,M=1/0,N=1/0,_=-1/0,S=-1/0,E=-1/0;for(let F=y,R=y+T;F<R;F++){const I=3*r.resolveTriangleIndex(F);for(let B=0;B<3;B++){let P=I+B;P=s?s[P]:P;const L=n.getX(P),V=n.getY(P),G=n.getZ(P);L<w&&(w=L),L>_&&(_=L),V<M&&(M=V),V>S&&(S=V),G<N&&(N=G),G>E&&(E=G)}}return c[d+0]!==w||c[d+1]!==M||c[d+2]!==N||c[d+3]!==_||c[d+4]!==S||c[d+5]!==E?(c[d+0]=w,c[d+1]=M,c[d+2]=N,c[d+3]=_,c[d+4]=S,c[d+5]=E,!0):!1}else{const y=d+8,T=o[d+6],w=y+f,M=T+f;let N=p,_=!1,S=!1;t?N||(_=t.has(w),S=t.has(M),N=!_&&!S):(_=!0,S=!0);const E=N||_,F=N||S;let R=!1;E&&(R=l(y,f,N));let I=!1;F&&(I=l(T,f,N));const B=R||I;if(B)for(let P=0;P<3;P++){const L=y+P,V=T+P,G=c[L],Nt=c[L+3],Ht=c[V],qt=c[V+3];c[d+P]=G<Ht?G:Ht,c[d+P+3]=Nt>qt?Nt:qt}return B}}}function _l(r,t,e,s,n,i,o){X.setBuffer(r._roots[t]),Bi(0,r,e,s,n,i,o),X.clearBuffer()}function Bi(r,t,e,s,n,i,o){const{float32Array:a,uint16Array:c,uint32Array:u}=X,h=r*2;if(pt(h,c)){const d=Tt(r,u),f=St(h,c);dl(t,e,s,d,f,n,i,o)}else{const d=_t(r);ce(d,a,s,i,o)&&Bi(d,t,e,s,n,i,o);const f=zt(r,u);ce(f,a,s,i,o)&&Bi(f,t,e,s,n,i,o)}}const zl=["x","y","z"];function bl(r,t,e,s,n,i){X.setBuffer(r._roots[t]);const o=Ii(0,r,e,s,n,i);return X.clearBuffer(),o}function Ii(r,t,e,s,n,i){const{float32Array:o,uint16Array:a,uint32Array:c}=X;let u=r*2;if(pt(u,a)){const l=Tt(r,c),d=St(u,a);return fl(t,e,s,l,d,n,i)}else{const l=To(r,c),d=zl[l],p=s.direction[d]>=0;let m,g;p?(m=_t(r),g=zt(r,c)):(m=zt(r,c),g=_t(r));const T=ce(m,o,s,n,i)?Ii(m,t,e,s,n,i):null;if(T){const N=T.point[d];if(p?N<=o[g+l]:N>=o[g+l+3])return T}const M=ce(g,o,s,n,i)?Ii(g,t,e,s,n,i):null;return T&&M?T.distance<=M.distance?T:M:T||M||null}}const pn=new ht,qe=new Lt,$e=new Lt,As=new nt,zo=new lt,mn=new lt;function El(r,t,e,s){X.setBuffer(r._roots[t]);const n=vi(0,r,e,s);return X.clearBuffer(),n}function vi(r,t,e,s,n=null){const{float32Array:i,uint16Array:o,uint32Array:a}=X;let c=r*2;if(n===null&&(e.boundingBox||e.computeBoundingBox(),zo.set(e.boundingBox.min,e.boundingBox.max,s),n=zo),pt(c,o)){const h=t.geometry,l=h.index,d=h.attributes.position,f=e.index,p=e.attributes.position,m=Tt(r,a),g=St(c,o);if(As.copy(s).invert(),e.boundsTree)return Z(r,i,mn),mn.matrix.copy(As),mn.needsUpdate=!0,e.boundsTree.shapecast({intersectsBounds:T=>mn.intersectsBox(T),intersectsTriangle:T=>{T.a.applyMatrix4(s),T.b.applyMatrix4(s),T.c.applyMatrix4(s),T.needsUpdate=!0;for(let w=m,M=g+m;w<M;w++)if(st($e,3*t.resolveTriangleIndex(w),l,d),$e.needsUpdate=!0,T.intersectsTriangle($e))return!0;return!1}});for(let y=m,T=g+m;y<T;y++){const w=t.resolveTriangleIndex(y);st(qe,3*w,l,d),qe.a.applyMatrix4(As),qe.b.applyMatrix4(As),qe.c.applyMatrix4(As),qe.needsUpdate=!0;for(let M=0,N=f.count;M<N;M+=3)if(st($e,M,f,p),$e.needsUpdate=!0,qe.intersectsTriangle($e))return!0}}else{const h=r+8,l=a[r+6];return Z(h,i,pn),!!(n.intersectsBox(pn)&&vi(h,t,e,s,n)||(Z(l,i,pn),n.intersectsBox(pn)&&vi(l,t,e,s,n)))}}const yn=new nt,Pi=new lt,Ms=new lt,Cl=new A,Fl=new A,Rl=new A,Bl=new A;function Il(r,t,e,s={},n={},i=0,o=1/0){t.boundingBox||t.computeBoundingBox(),Pi.set(t.boundingBox.min,t.boundingBox.max,e),Pi.needsUpdate=!0;const a=r.geometry,c=a.attributes.position,u=a.index,h=t.attributes.position,l=t.index,d=bt.getPrimitive(),f=bt.getPrimitive();let p=Cl,m=Fl,g=null,y=null;n&&(g=Rl,y=Bl);let T=1/0,w=null,M=null;return yn.copy(e).invert(),Ms.matrix.copy(yn),r.shapecast({boundsTraverseOrder:N=>Pi.distanceToBox(N),intersectsBounds:(N,_,S)=>S<T&&S<o?(_&&(Ms.min.copy(N.min),Ms.max.copy(N.max),Ms.needsUpdate=!0),!0):!1,intersectsRange:(N,_)=>{if(t.boundsTree){const S=t.boundsTree;return S.shapecast({boundsTraverseOrder:E=>Ms.distanceToBox(E),intersectsBounds:(E,F,R)=>R<T&&R<o,intersectsRange:(E,F)=>{for(let R=E,I=E+F;R<I;R++){const B=S.resolveTriangleIndex(R);st(f,3*B,l,h),f.a.applyMatrix4(e),f.b.applyMatrix4(e),f.c.applyMatrix4(e),f.needsUpdate=!0;for(let P=N,L=N+_;P<L;P++){const V=r.resolveTriangleIndex(P);st(d,3*V,u,c),d.needsUpdate=!0;const G=d.distanceToTriangle(f,p,g);if(G<T&&(m.copy(p),y&&y.copy(g),T=G,w=P,M=R),G<i)return!0}}}})}else{const S=De(t);for(let E=0,F=S;E<F;E++){st(f,3*E,l,h),f.a.applyMatrix4(e),f.b.applyMatrix4(e),f.c.applyMatrix4(e),f.needsUpdate=!0;for(let R=N,I=N+_;R<I;R++){const B=r.resolveTriangleIndex(R);st(d,3*B,u,c),d.needsUpdate=!0;const P=d.distanceToTriangle(f,p,g);if(P<T&&(m.copy(p),y&&y.copy(g),T=P,w=R,M=E),P<i)return!0}}}}}),bt.releasePrimitive(d),bt.releasePrimitive(f),T===1/0?null:(s.point?s.point.copy(m):s.point=m.clone(),s.distance=T,s.faceIndex=w,n&&(n.point?n.point.copy(y):n.point=y.clone(),n.point.applyMatrix4(yn),m.applyMatrix4(yn),n.distance=m.sub(n.point).length(),n.faceIndex=M),s)}function vl(){return typeof SharedArrayBuffer<"u"}const Ss=new X.constructor,gn=new X.constructor,he=new _i(()=>new ht),Ge=new ht,We=new ht,Li=new ht,Oi=new ht;let Di=!1;function Pl(r,t,e,s){if(Di)throw new Error("MeshBVH: Recursive calls to bvhcast not supported.");Di=!0;const n=r._roots,i=t._roots;let o,a=0,c=0;const u=new nt().copy(e).invert();for(let h=0,l=n.length;h<l;h++){Ss.setBuffer(n[h]),c=0;const d=he.getPrimitive();Z(0,Ss.float32Array,d),d.applyMatrix4(u);for(let f=0,p=i.length;f<p&&(gn.setBuffer(i[f]),o=Ot(0,0,e,u,s,a,c,0,0,d),gn.clearBuffer(),c+=i[f].length,!o);f++);if(he.releasePrimitive(d),Ss.clearBuffer(),a+=n[h].length,o)break}return Di=!1,o}function Ot(r,t,e,s,n,i=0,o=0,a=0,c=0,u=null,h=!1){let l,d;h?(l=gn,d=Ss):(l=Ss,d=gn);const f=l.float32Array,p=l.uint32Array,m=l.uint16Array,g=d.float32Array,y=d.uint32Array,T=d.uint16Array,w=r*2,M=t*2,N=pt(w,m),_=pt(M,T);let S=!1;if(_&&N)h?S=n(Tt(t,y),St(t*2,T),Tt(r,p),St(r*2,m),c,o+t,a,i+r):S=n(Tt(r,p),St(r*2,m),Tt(t,y),St(t*2,T),a,i+r,c,o+t);else if(_){const E=he.getPrimitive();Z(t,g,E),E.applyMatrix4(e);const F=_t(r),R=zt(r,p);Z(F,f,Ge),Z(R,f,We);const I=E.intersectsBox(Ge),B=E.intersectsBox(We);S=I&&Ot(t,F,s,e,n,o,i,c,a+1,E,!h)||B&&Ot(t,R,s,e,n,o,i,c,a+1,E,!h),he.releasePrimitive(E)}else{const E=_t(t),F=zt(t,y);Z(E,g,Li),Z(F,g,Oi);const R=u.intersectsBox(Li),I=u.intersectsBox(Oi);if(R&&I)S=Ot(r,E,e,s,n,i,o,a,c+1,u,h)||Ot(r,F,e,s,n,i,o,a,c+1,u,h);else if(R)if(N)S=Ot(r,E,e,s,n,i,o,a,c+1,u,h);else{const B=he.getPrimitive();B.copy(Li).applyMatrix4(e);const P=_t(r),L=zt(r,p);Z(P,f,Ge),Z(L,f,We);const V=B.intersectsBox(Ge),G=B.intersectsBox(We);S=V&&Ot(E,P,s,e,n,o,i,c,a+1,B,!h)||G&&Ot(E,L,s,e,n,o,i,c,a+1,B,!h),he.releasePrimitive(B)}else if(I)if(N)S=Ot(r,F,e,s,n,i,o,a,c+1,u,h);else{const B=he.getPrimitive();B.copy(Oi).applyMatrix4(e);const P=_t(r),L=zt(r,p);Z(P,f,Ge),Z(L,f,We);const V=B.intersectsBox(Ge),G=B.intersectsBox(We);S=V&&Ot(F,P,s,e,n,o,i,c,a+1,B,!h)||G&&Ot(F,L,s,e,n,o,i,c,a+1,B,!h),he.releasePrimitive(B)}}return S}const xn=new lt,bo=new ht,Ll={strategy:uo,maxDepth:40,maxLeafTris:10,useSharedArrayBuffer:!1,setBoundingBox:!0,onProgress:null,indirect:!1,verbose:!0,range:null};class Tn{static serialize(t,e={}){e={cloneBuffers:!0,...e};const s=t.geometry,n=t._roots,i=t._indirectBuffer,o=s.getIndex();let a;return e.cloneBuffers?a={roots:n.map(c=>c.slice()),index:o?o.array.slice():null,indirectBuffer:i?i.slice():null}:a={roots:n,index:o?o.array:null,indirectBuffer:i},a}static deserialize(t,e,s={}){s={setIndex:!0,indirect:!!t.indirectBuffer,...s};const{index:n,roots:i,indirectBuffer:o}=t,a=new Tn(e,{...s,[xi]:!0});if(a._roots=i,a._indirectBuffer=o||null,s.setIndex){const c=e.getIndex();if(c===null){const u=new vt(t.index,1,!1);e.setIndex(u)}else c.array!==n&&(c.array.set(n),c.needsUpdate=!0)}return a}get indirect(){return!!this._indirectBuffer}constructor(t,e={}){if(t.isBufferGeometry){if(t.index&&t.index.isInterleavedBufferAttribute)throw new Error("MeshBVH: InterleavedBufferAttribute is not supported for the index attribute.")}else throw new Error("MeshBVH: Only BufferGeometries are supported.");if(e=Object.assign({...Ll,[xi]:!1},e),e.useSharedArrayBuffer&&!vl())throw new Error("MeshBVH: SharedArrayBuffer is not available.");this.geometry=t,this._roots=null,this._indirectBuffer=null,e[xi]||(ju(this,e),!t.boundingBox&&e.setBoundingBox&&(t.boundingBox=this.getBoundingBox(new ht))),this.resolveTriangleIndex=e.indirect?s=>this._indirectBuffer[s]:s=>s}refit(t=null){return(this.indirect?Sl:ll)(this,t)}traverse(t,e=0){const s=this._roots[e],n=new Uint32Array(s),i=new Uint16Array(s);o(0);function o(a,c=0){const u=a*2,h=i[u+15]===en;if(h){const l=n[a+6],d=i[u+14];t(c,h,new Float32Array(s,a*4,6),l,d)}else{const l=a+ms/4,d=n[a+6],f=n[a+7];t(c,h,new Float32Array(s,a*4,6),f)||(o(l,c+1),o(d,c+1))}}}raycast(t,e=Vi,s=0,n=1/0){const i=this._roots,o=this.geometry,a=[],c=e.isMaterial,u=Array.isArray(e),h=o.groups,l=c?e.side:e,d=this.indirect?_l:ml;for(let f=0,p=i.length;f<p;f++){const m=u?e[h[f].materialIndex].side:l,g=a.length;if(d(this,f,m,t,a,s,n),u){const y=h[f].materialIndex;for(let T=g,w=a.length;T<w;T++)a[T].face.materialIndex=y}}return a}raycastFirst(t,e=Vi,s=0,n=1/0){const i=this._roots,o=this.geometry,a=e.isMaterial,c=Array.isArray(e);let u=null;const h=o.groups,l=a?e.side:e,d=this.indirect?bl:gl;for(let f=0,p=i.length;f<p;f++){const m=c?e[h[f].materialIndex].side:l,g=d(this,f,m,t,s,n);g!=null&&(u==null||g.distance<u.distance)&&(u=g,c&&(g.face.materialIndex=h[f].materialIndex))}return u}intersectsGeometry(t,e){let s=!1;const n=this._roots,i=this.indirect?El:xl;for(let o=0,a=n.length;o<a&&(s=i(this,o,t,e),!s);o++);return s}shapecast(t){const e=bt.getPrimitive(),s=this.indirect?pl:ul;let{boundsTraverseOrder:n,intersectsBounds:i,intersectsRange:o,intersectsTriangle:a}=t;if(o&&a){const l=o;o=(d,f,p,m,g)=>l(d,f,p,m,g)?!0:s(d,f,this,a,p,m,e)}else o||(a?o=(l,d,f,p)=>s(l,d,this,a,f,p,e):o=(l,d,f)=>f);let c=!1,u=0;const h=this._roots;for(let l=0,d=h.length;l<d;l++){const f=h[l];if(c=nl(this,l,i,o,n,u),c)break;u+=f.byteLength}return bt.releasePrimitive(e),c}bvhcast(t,e,s){let{intersectsRanges:n,intersectsTriangles:i}=s;const o=bt.getPrimitive(),a=this.geometry.index,c=this.geometry.attributes.position,u=this.indirect?p=>{const m=this.resolveTriangleIndex(p);st(o,m*3,a,c)}:p=>{st(o,p*3,a,c)},h=bt.getPrimitive(),l=t.geometry.index,d=t.geometry.attributes.position,f=t.indirect?p=>{const m=t.resolveTriangleIndex(p);st(h,m*3,l,d)}:p=>{st(h,p*3,l,d)};if(i){const p=(m,g,y,T,w,M,N,_)=>{for(let S=y,E=y+T;S<E;S++){f(S),h.a.applyMatrix4(e),h.b.applyMatrix4(e),h.c.applyMatrix4(e),h.needsUpdate=!0;for(let F=m,R=m+g;F<R;F++)if(u(F),o.needsUpdate=!0,i(o,h,F,S,w,M,N,_))return!0}return!1};if(n){const m=n;n=function(g,y,T,w,M,N,_,S){return m(g,y,T,w,M,N,_,S)?!0:p(g,y,T,w,M,N,_,S)}}else n=p}return Pl(this,t,e,n)}intersectsBox(t,e){return xn.set(t.min,t.max,e),xn.needsUpdate=!0,this.shapecast({intersectsBounds:s=>xn.intersectsBox(s),intersectsTriangle:s=>xn.intersectsTriangle(s)})}intersectsSphere(t){return this.shapecast({intersectsBounds:e=>t.intersectsBox(e),intersectsTriangle:e=>e.intersectsSphere(t)})}closestPointToGeometry(t,e,s={},n={},i=0,o=1/0){return(this.indirect?Il:Ml)(this,t,e,s,n,i,o)}closestPointToPoint(t,e={},s=0,n=1/0){return il(this,t,e,s,n)}getBoundingBox(t){return t.makeEmpty(),this._roots.forEach(s=>{Z(0,new Float32Array(s),bo),t.union(bo)}),t}}onmessage=({data:r})=>{let t=performance.now();function e(o){o=Math.min(o,1);const a=performance.now();a-t>=10&&o!==1&&(postMessage({error:null,serialized:null,position:null,progress:o}),t=a)}const{index:s,position:n,options:i}=r;try{const o=new Gn;if(o.setAttribute("position",new vt(n,3,!1)),s&&o.setIndex(new vt(s,1,!1)),i.includedProgressCallback&&(i.onProgress=e),i.groups){const h=i.groups;for(const l in h){const d=h[l];o.addGroup(d.start,d.count,d.materialIndex)}}const a=new Tn(o,i),c=Tn.serialize(a,{copyIndexBuffer:!1});let u=[n.buffer,...c.roots];c.index&&u.push(c.index.buffer),u=u.filter(h=>typeof SharedArrayBuffer>"u"||!(h instanceof SharedArrayBuffer)),a._indirectBuffer&&u.push(c.indirectBuffer.buffer),postMessage({error:null,serialized:c,position:n,progress:1},u)}catch(o){postMessage({error:o,serialized:null,position:null,progress:1})}}})();
",W=typeof window<"u"&&window.Blob&&new Blob([atob(h)],{type:"text/javascript;charset=utf-8"});function C(){let Z;try{if(Z=W&&(window.URL||window.webkitURL).createObjectURL(W),!Z)throw"";return new Worker(Z)}catch{return new Worker("data:application/javascript;base64,"+h)}finally{Z&&(window.URL||window.webkitURL).revokeObjectURL(Z)}}class o extends z{constructor(){super(new C),this.name="GenerateMeshBVHWorker"}runTask(d,l,X={}){return new Promise((R,V)=>{if(l.getAttribute("position").isInterleavedBufferAttribute||l.index&&l.index.isInterleavedBufferAttribute)throw new Error("GenerateMeshBVHWorker: InterleavedBufferAttribute are not supported for the geometry attributes.");d.onerror=G=>{V(new Error(`GenerateMeshBVHWorker: ${G.message}`))},d.onmessage=G=>{const{data:c}=G;if(c.error)V(new Error(c.error)),d.onmessage=null;else if(c.serialized){const{serialized:b,position:u}=c,y=H.deserialize(b,l,{setIndex:!1}),K=Object.assign({setBoundingBox:!0},X);if(l.attributes.position.array=u,b.index)if(l.index)l.index.array=b.index;else{const a=new s(b.index,1,!1);l.setIndex(a)}K.setBoundingBox&&(l.boundingBox=y.getBoundingBox(new Y)),X.onProgress&&X.onProgress(c.progress),R(y),d.onmessage=null}else X.onProgress&&X.onProgress(c.progress)};const m=l.index?l.index.array:null,p=l.attributes.position.array,L=[p];m&&L.push(m),d.postMessage({index:m,position:p,options:{...X,onProgress:null,includedProgressCallback:!!X.onProgress,groups:[...l.groups]}},L.map(G=>G.buffer).filter(G=>typeof SharedArrayBuffer>"u"||!(G instanceof SharedArrayBuffer)))})}}export{o as GenerateMeshBVHWorker};
